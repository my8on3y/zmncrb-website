var autocomplete_js = jQuery.parseJSON('{"charAt":{"desc":"Returns the character at the specified index (position)","params":[{"param":"index","desc":"An integer representing the index of the character you want to return","required":"yes"}]},"charCodeAt":{"desc":"Returns the Unicode of the character at the specified index","params":[{"param":"index","desc":"A number representing the index of the character you want to return","required":"yes"}]},"concat":{"desc":"Joins two or more arrays, and returns a copy of the joined arrays","params":[{"param":"array2array3arrayX","desc":"The arrays to be joined","required":"yes"}]},"endsWith":{"desc":"Checks whether a string ends with specified string/characters","params":[{"param":"searchvalue","desc":"The string to search for","required":"yes"},{"param":"length","desc":"Specify the length of the string to search. If omitted, the default value is the length of the string","required":"no"}]},"fromCharCode":{"desc":"Converts Unicode values to characters","params":[{"param":"n1n2nX","desc":"One or more Unicode values to be converted","required":"yes"}]},"includes":{"desc":"Checks whether a string contains the specified string/characters","params":[{"param":"searchvalue","desc":"The string to search for","required":"yes"},{"param":"start","desc":"Default 0. At which position to start the search","required":"no"}]},"indexOf":{"desc":"Search the array for an element and returns its position","params":[{"param":"item","desc":"The item to search for","required":"yes"},{"param":"start","desc":"Where to start the search. Negative values will start at the given position counting from the end, and search to the end.","required":"no"}]},"lastIndexOf":{"desc":"Search the array for an element, starting at the end, and returns its position","params":[{"param":"item","desc":"The item to search for","required":"yes"},{"param":"start","desc":"Where to start the search. Negative values will start at the given position counting from the end, and search to the beginning","required":"no"}]},"localeCompare":{"desc":"Compares two strings in the current locale","params":[{"param":"compareString","desc":"The string to compare with","required":"yes"}]},"match":{"desc":"Searches a string for a match against a regular expression, and returns the matches","params":[{"param":"regexp","desc":"The value to search for, as a regular expression.","required":"yes"}]},"repeat":{"desc":"Returns a new string with a specified number of copies of an existing string","params":[{"param":"count","desc":"The number of times the original string value should be repeated in the new string","required":"yes"}]},"replace":{"desc":"Searches a string for a specified value, or a regular expression, and returns a new string where the specified values are replaced","params":[{"param":"searchvalue","desc":"The value, or regular expression, that will be replaced by the new value","required":"yes"},{"param":"newvalue","desc":"The value to replace the search value with","required":"yes"}]},"search":{"desc":"Searches a string for a specified value, or regular expression, and returns the position of the match","params":[{"param":"searchvalue","desc":"A regular expression. A string  will automatically be converted to a regular expression.","required":"yes"}]},"slice":{"desc":"Selects a part of an array, and returns the new array","params":[{"param":"start","desc":"An integer that specifies where to start the selection (The first element has an index of 0). Use negative numbers to select from the end of an array. If omitted, it acts like 0","required":"no"},{"param":"end","desc":"An integer that specifies where to end the selection. If omitted, all elements from the start position and to the end of the array will be selected. Use negative numbers to select from the end of an array","required":"no"}]},"split":{"desc":"Splits a string into an array of substrings","params":[{"param":"separator","desc":"Specifies the character, or the regular expression, to use for splitting the string. If omitted, the entire string will be returned (an array with only one item)","required":"no"},{"param":"limit","desc":"An integer that specifies the number of splits, items after the split limit will not be included in the array","required":"no"}]},"startsWith":{"desc":"Checks whether a string begins with specified characters","params":[{"param":"searchvalue","desc":"The string to search for","required":"yes"},{"param":"start","desc":"Default 0. At which position to start the search","required":"no"}]},"substr":{"desc":"Extracts the characters from a string, beginning at a specified start position, and through the specified number of character","params":[{"param":"startstartstartstart start","desc":"The position where to start the extraction. First character is at index 0. If start is positive and greater than, or equal, to the length      of the string, substr() returns an empty string.If start is      negative, substr() uses it as a character index from the end of the string.     If start is negative or larger than the length of the      string, start is set to 0","required":"yes"},{"param":"length","desc":"The number of characters to extract. If omitted, it extracts the rest of the string","required":"no"}]},"substring":{"desc":"Extracts the characters from a string, between two specified indices","params":[{"param":"start","desc":"The position where to start the extraction. First character is at index 0","required":"yes"},{"param":"end","desc":"The position (up to, but not including) where to end the extraction. If omitted, it extracts the rest of the string","required":"no"}]},"toLocaleLowerCase":{"desc":"Converts a string to lowercase letters, according to the hosts locale","params":[]},"toLocaleUpperCase":{"desc":"Converts a string to uppercase letters, according to the hosts locale","params":[]},"toLowerCase":{"desc":"Converts a string to lowercase letters","params":[]},"toString":{"desc":"Converts an array to a string, and returns the result","params":[]},"toUpperCase":{"desc":"Converts a string to uppercase letters","params":[]},"trim":{"desc":"Removes whitespace from both ends of a string","params":[]},"valueOf":{"desc":"Returns the primitive value of an array","params":[]},"isFinite":{"desc":"Determines whether a value is a finite, legal number","params":[{"param":"value","desc":"The value to be tested","required":"yes"}]},"isInteger":{"desc":"Checks whether a value is an integer","params":[{"param":"value","desc":"The value to be tested","required":"yes"}]},"isNaN":{"desc":"Determines whether a value is an illegal number","params":[{"param":"value","desc":"The value to be tested","required":"yes"}]},"isSafeInteger":{"desc":"Checks whether a value is a safe integer","params":[{"param":"value","desc":"The value to be tested","required":"yes"}]},"toExponential":{"desc":"Converts a number into an exponential notation","params":[{"param":"x","desc":"An integer between 0 and 20 representing the number of digits in the notation after the decimal point. If omitted, it is set to as many digits as necessary to represent the value","required":"no"}]},"toFixed":{"desc":"Formats a number with x numbers of digits after the decimal point","params":[{"param":"x","desc":"The number of digits after the decimal point. Default is 0 (no digits after the decimal point)","required":"no"}]},"toPrecision":{"desc":"Formats a number to x length","params":[{"param":"x","desc":"The number of digits. If omitted, it returns the entire number (without any formatting)","required":"no"}]},"abs":{"desc":"Returns the absolute value of x","params":[{"param":"x","desc":"A number","required":"yes"}]},"acos":{"desc":"Returns the arccosine of x, in radians","params":[{"param":"x","desc":"A number","required":"yes"}]},"asin":{"desc":"Returns the arcsine of x, in radians","params":[{"param":"x","desc":"A number","required":"yes"}]},"atan":{"desc":"Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians","params":[{"param":"x","desc":"A number","required":"yes"}]},"atan2":{"desc":"Returns the arctangent of the quotient of its arguments","params":[]},"ceil":{"desc":"Returns x, rounded upwards to the nearest integer","params":[{"param":"x","desc":"The number you want to round","required":"yes"}]},"cos":{"desc":"Returns the cosine of x (x is in radians)","params":[{"param":"x","desc":"A number","required":"yes"}]},"exp":{"desc":"Returns the value of Ex","params":[{"param":"x","desc":"A number","required":"yes"}]},"floor":{"desc":"Returns x, rounded downwards to the nearest integer","params":[{"param":"x","desc":"The number you want to round","required":"yes"}]},"log":{"desc":"Returns the natural logarithm (base E) of x","params":[{"param":"x","desc":"A number","required":"yes"}]},"max":{"desc":"Returns the number with the highest value","params":[{"param":"n1 n2 n3","desc":"One or more numbers to compare","required":"no"}]},"min":{"desc":"Returns the number with the lowest value","params":[{"param":"n1 n2 n3","desc":"One or more numbers to compare","required":"no"}]},"pow":{"desc":"Returns the value of x to the power of y","params":[{"param":"x","desc":"The base","required":"yes"},{"param":"y","desc":"The exponent","required":"yes"}]},"random":{"desc":"Returns a random number between 0 and 1","params":[]},"round":{"desc":"Rounds x to the nearest integer","params":[{"param":"x","desc":"The number to be rounded","required":"yes"}]},"sin":{"desc":"Returns the sine of x (x is in radians)","params":[{"param":"x","desc":"A number","required":"yes"}]},"sqrt":{"desc":"Returns the square root of x","params":[{"param":"x","desc":"A number","required":"yes"}]},"tan":{"desc":"Returns the tangent of an angle","params":[{"param":"x","desc":"A number representing an angle (in radians)","required":"yes"}]},"getDate":{"desc":"Returns the day of the month (from 1-31)","params":[]},"getDay":{"desc":"Returns the day of the week (from 0-6)","params":[]},"getFullYear":{"desc":"Returns the year","params":[]},"getHours":{"desc":"Returns the hour (from 0-23)","params":[]},"getMilliseconds":{"desc":"Returns the milliseconds (from 0-999)","params":[]},"getMinutes":{"desc":"Returns the minutes (from 0-59)","params":[]},"getMonth":{"desc":"Returns the month (from 0-11)","params":[]},"getSeconds":{"desc":"Returns the seconds (from 0-59)","params":[]},"getTime":{"desc":"Returns the number of milliseconds since midnight Jan 1 1970, and a specified date","params":[]},"getTimezoneOffset":{"desc":"Returns the time difference between UTC time and local time, in minutes","params":[]},"getUTCDate":{"desc":"Returns the day of the month, according to universal time (from 1-31)","params":[]},"getUTCDay":{"desc":"Returns the day of the week, according to universal time (from 0-6)","params":[]},"getUTCFullYear":{"desc":"Returns the year, according to universal time","params":[]},"getUTCHours":{"desc":"Returns the hour, according to universal time (from 0-23)","params":[]},"getUTCMilliseconds":{"desc":"Returns the milliseconds, according to universal time (from 0-999)","params":[]},"getUTCMinutes":{"desc":"Returns the minutes, according to universal time (from 0-59)","params":[]},"getUTCMonth":{"desc":"Returns the month, according to universal time (from 0-11)","params":[]},"getUTCSeconds":{"desc":"Returns the seconds, according to universal time (from 0-59)","params":[]},"getYear":{"desc":"Deprecated. Use the getFullYear() method instead","params":[]},"now":{"desc":"Returns the number of milliseconds since midnight Jan 1, 1970","params":[]},"parse":{"desc":"Parses a date string and returns the number of milliseconds since January 1, 1970","params":[{"param":"datestring","desc":"A string representing a date","required":"yes"}]},"setDate":{"desc":"Sets the day of the month of a date object","params":[{"param":"day","desc":"An integer representing the day of a month.     Expected values are 1-31, but other values are allowed:            0 will result in the last day of the previous month       -1 will result in the day before the last day of the previous month       If the month has 31 days:         32 will result in the first day of the next month           If the month has 30 days:         32 will result in the second day of the next month           ","required":"yes"}]},"setFullYear":{"desc":"Sets the year of a date object","params":[{"param":"year","desc":"A value representing the year, negative values are allowed","required":"yes"},{"param":"month","desc":"An integer representing the month     Expected values are 0-11, but other values are allowed:            -1 will result in the last month of the previous year       12 will result in the first month of the next year            13 will result in the second month of the next year                    ","required":"no"},{"param":"day","desc":"An integer representing the day of month     Expected values are 1-31, but other values are allowed:            0 will result in the last day of the previous month       -1 will result in the day before the last day of the previous month       If the month has 31 days:         32 will result in the first day of the next month           If the month has 30 days:         32 will result in the second day of the next month          ","required":"no"}]},"setHours":{"desc":"Sets the hour of a date object","params":[{"param":"hour","desc":"An integer representing the hour.     Expected values are 0-23, but other values are allowed:            -1 will result in the last hour of the previous day       24 will result in the first hour of the next day               ","required":"yes"},{"param":"min","desc":"An integer representing the minutes.     Expected values are 0-59, but other values are allowed:            -1 will result in the last minute of the previous hour       60 will result in the first minute of the next hour               ","required":"no"},{"param":"sec","desc":"An integer representing the seconds     Expected values are 0-59, but other values are allowed:            -1 will result in the last second of the previous minute       60 will result in the first second of the next minute               ","required":"no"},{"param":"millisec","desc":"An integer representing the milliseconds     Expected values are 0-999, but other values are allowed:            -1 will result in the last millisecond of the previous second       1000 will result in the first millisecond of the next second               ","required":"no"}]},"setMilliseconds":{"desc":"Sets the milliseconds of a date object","params":[{"param":"millisec","desc":"An integer representing the milliseconds     Expected values are 0-999, but other values are allowed:            -1 will result in the last millisecond of the previous second       1000 will result in the first millisecond of the next second            1001 will result in the second millisecond of the next second                    ","required":"yes"}]},"setMinutes":{"desc":"Set the minutes of a date object","params":[{"param":"min","desc":"An integer representing the minutes.     Expected values are 0-59, but other values are allowed:            -1 will result in the last minute of the previous hour       60 will result in the first minute of the next hour               ","required":"yes"},{"param":"sec","desc":"An integer representing the seconds     Expected values are 0-59, but other values are allowed:            -1 will result in the last second of the previous minute       60 will result in the first second of the next minute               ","required":"no"},{"param":"millisec","desc":"An integer representing the milliseconds     Expected values are 0-999, but other values are allowed:            -1 will result in the last millisecond of the previous second       1000 will result in the first millisecond of the next second               ","required":"no"}]},"setMonth":{"desc":"Sets the month of a date object","params":[{"param":"month","desc":"An integer representing the month     Expected values are 0-11, but other values are allowed:            -1 will result in the last month of the previous year       12 will result in the first month of the next year            13 will result in the second month of the next year                    ","required":"yes"},{"param":"day","desc":"An integer representing the day of month     Expected values are 1-31, but other values are allowed:            0 will result in the last day of the previous month       -1 will result in the day before the last day of the previous month       If the month has 31 days:         32 will result in the first day of the next month           If the month has 30 days:         32 will result in the second day of the next month          ","required":"no"}]},"setSeconds":{"desc":"Sets the seconds of a date object","params":[{"param":"sec","desc":"An integer representing the seconds     Expected values are 0-59, but other values are allowed:            -1 will result in the last second of the previous minute       60 will result in the first second of the next minute               ","required":"yes"},{"param":"millisec","desc":"An integer representing the milliseconds     Expected values are 0-999, but other values are allowed:            -1 will result in the last millisecond of the previous second       1000 will result in the first millisecond of the next second               ","required":"no"}]},"setTime":{"desc":"Sets a date to a specified number of milliseconds after/before January 1, 1970","params":[{"param":"millisec","desc":"The number of milliseconds to be added to, or subtracted from, midnight January 1, 1970","required":"yes"}]},"setUTCDate":{"desc":"Sets the day of the month of a date object, according to universal time","params":[{"param":"day","desc":"An integer representing the day of a month.     Expected values are 1-31, but other values are allowed:            0 will result in the last hour of the previous month       -1 will result in the hour before the last hour of the previous month       If the month has 31 days:         32 will result in the first day of the next month           If the month has 30 days:         32 will result in the second day of the next month          ","required":"yes"}]},"setUTCFullYear":{"desc":"Sets the year of a date object, according to universal time","params":[{"param":"year","desc":"A value representing the year, negative values are allowed","required":"yes"},{"param":"month","desc":"An integer representing the month     Expected values are 0-11, but other values are allowed:            -1 will result in the last month of the previous year       12 will result in the first month of the next year            13 will result in the second month of the next year                    ","required":"no"},{"param":"day","desc":"An integer representing the day of month     Expected values are 1-31, but other values are allowed:            0 will result in the last hour of the previous month       -1 will result in the hour before the last hour of the previous month       If the month has 31 days:         32 will result in the first day of the next month           If the month has 30 days:         32 will result in the second day of the next month          ","required":"no"}]},"setUTCHours":{"desc":"Sets the hour of a date object, according to universal time","params":[{"param":"hour","desc":"An integer representing the hour.     Expected values are 0-23, but other values are allowed:            -1 will result in the last hour of the previous day       24 will result in the first hour of the next day               ","required":"yes"},{"param":"min","desc":"An integer representing the minutes.     Expected values are 0-59, but other values are allowed:            -1 will result in the last minute of the previous hour       60 will result in the first minute of the next hour               ","required":"no"},{"param":"sec","desc":"An integer representing the seconds     Expected values are 0-59, but other values are allowed:            -1 will result in the last second of the previous minute       60 will result in the first second of the next minute               ","required":"no"},{"param":"millisec","desc":"An integer representing the milliseconds     Expected values are 0-999, but other values are allowed:            -1 will result in the last millisecond of the previous second       1000 will result in the first millisecond of the next second               ","required":"no"}]},"setUTCMilliseconds":{"desc":"Sets the milliseconds of a date object, according to universal time","params":[{"param":"millisec","desc":"An integer representing the milliseconds     Expected values are 0-999, but other values are allowed:            -1 will result in the last millisecond of the previous second       1000 will result in the first millisecond of the next second            1001 will result in the second millisecond of the next second                    ","required":"yes"}]},"setUTCMinutes":{"desc":"Set the minutes of a date object, according to universal time","params":[{"param":"min","desc":"An integer representing the minutes.     Expected values are 0-59, but other values are allowed:            -1 will result in the last minute of the previous hour       60 will result in the first minute of the next hour               ","required":"yes"},{"param":"sec","desc":"An integer representing the seconds     Expected values are 0-59, but other values are allowed:            -1 will result in the last second of the previous minute       60 will result in the first second of the next minute               ","required":"no"},{"param":"millisec","desc":"An integer representing the milliseconds     Expected values are 0-999, but other values are allowed:            -1 will result in the last millisecond of the previous second       1000 will result in the first millisecond of the next second               ","required":"no"}]},"setUTCMonth":{"desc":"Sets the month of a date object, according to universal time","params":[{"param":"month","desc":"An integer representing the month     Expected values are 0-11, but other values are allowed:            -1 will result in the last month of the previous year       12 will result in the first month of the next year            13 will result in the second month of the next year                    ","required":"yes"},{"param":"day","desc":"An integer representing the day of month     Expected values are 1-31, but other values are allowed:            0 will result in the last hour of the previous month       -1 will result in the hour before the last hour of the previous month       If the month has 31 days:         32 will result in the first day of the next month           If the month has 30 days:         32 will result in the second day of the next month          ","required":"no"}]},"setUTCSeconds":{"desc":"Set the seconds of a date object, according to universal time","params":[{"param":"sec","desc":"An integer representing the seconds     Expected values are 0-59, but other values are allowed:            -1 will result in the last second of the previous minute       60 will result in the first second of the next minute               ","required":"yes"},{"param":"millisec","desc":"An integer representing the milliseconds     Expected values are 0-999, but other values are allowed:            -1 will result in the last millisecond of the previous second       1000 will result in the first millisecond of the next second               ","required":"no"}]},"setYear":{"desc":"Deprecated. Use the setFullYear() method instead","params":[{"param":"year","desc":"A value representing the year, negative values are allowed","required":"yes"},{"param":"month","desc":"An integer representing the month     Expected values are 0-11, but other values are allowed:            -1 will result in the last month of the previous year       12 will result in the first month of the next year            13 will result in the second month of the next year                    ","required":"no"},{"param":"day","desc":"An integer representing the day of month     Expected values are 1-31, but other values are allowed:            0 will result in the last day of the previous month       -1 will result in the day before the last day of the previous month       If the month has 31 days:         32 will result in the first day of the next month           If the month has 30 days:         32 will result in the second day of the next month          ","required":"no"}]},"toDateString":{"desc":"Converts the date portion of a Date object into a readable string","params":[]},"toGMTString":{"desc":"Deprecated. Use the toUTCString() method instead","params":[]},"toISOString":{"desc":"Returns the date as a string, using the ISO standard","params":[]},"toJSON":{"desc":"Returns the date as a string, formatted as a JSON date","params":[]},"toLocaleDateString":{"desc":"Returns the date portion of a Date object as a string, using locale conventions","params":[]},"toLocaleTimeString":{"desc":"Returns the time portion of a Date object as a string, using locale conventions","params":[]},"toLocaleString":{"desc":"Converts a Date object to a string, using locale conventions","params":[]},"toTimeString":{"desc":"Converts the time portion of a Date object to a string","params":[]},"toUTCString":{"desc":"Converts a Date object to a string, according to universal time","params":[]},"UTC":{"desc":"Returns the number of milliseconds in a date since midnight of January 1, 1970, according to UTC time","params":[{"param":"year","desc":"A four-digit value representing the year, negative values are allowed","required":"yes"},{"param":"month","desc":"An integer representing the month     Expected values are 0-11, but other values are allowed:            -1 will result in the last month of the previous year       12 will result in the first month of the next year            13 will result in the second month of the next year                    ","required":"yes"},{"param":"day","desc":"An integer representing the day of month     Expected values are 1-31, but other values are allowed:            0 will result in the last hour of the previous month       -1 will result in the hour before the last hour of the previous month       If the month has 31 days:         32 will result in the first day of the next month           If the month has 30 days:         32 will result in the second day of the next month          ","required":"no"},{"param":"hour","desc":"Default 0. An integer representing the hour.     Expected values are 0-23, but other values are allowed:            -1 will result in the last hour of the previous day       24 will result in the first hour of the next day               ","required":"no"},{"param":"min","desc":"Default 0. An integer representing the minutes.     Expected values are 0-59, but other values are allowed:            -1 will result in the last minute of the previous hour       60 will result in the first minute of the next hour               ","required":"no"},{"param":"sec","desc":"Default 0. An integer representing the seconds     Expected values are 0-59, but other values are allowed:            -1 will result in the last second of the previous minute       60 will result in the first second of the next minute               ","required":"no"},{"param":"millisec","desc":"Default 0. An integer representing the milliseconds     Expected values are 0-999, but other values are allowed:            -1 will result in the last millisecond of the previous second       1000 will result in the first millisecond of the next second               ","required":"no"}]},"copyWithin":{"desc":"Copies array elements within the array, to and from specified positions","params":[{"param":"target","desc":"The index position to copy the elements to","required":"yes"},{"param":"start","desc":"The index position to start copying elements from","required":"yes"},{"param":"endarray","desc":"The index position to stop copying elements from (default is array.length)","required":"no"}]},"every":{"desc":"Checks if every element in an array pass a test","params":[{"param":"function(currentValue, index, arr)currentValueindexarr","desc":"A function to be run for each element in the array.Function arguments:         Argument     Description             currentValue     The value of the current element           index     The array index of the current element             arr     The array object the current element belongs to         ","required":"yes"},{"param":"currentValue","desc":"The value of the current element","required":"yes"},{"param":"index","desc":"The array index of the current element","required":"no"},{"param":"arr","desc":"The array object the current element belongs to","required":"no"},{"param":"thisValue","desc":"A value to be passed to the function to be used as its this value.If this parameter is empty, the value undefined will be passed as its this value","required":"no"}]},"fill":{"desc":"Fill the elements in an array with a static value","params":[{"param":"value","desc":"The value to fill the array with","required":"yes"},{"param":"start","desc":"The index to start filling the array (default is 0)","required":"no"},{"param":"endarray","desc":"The index to stop filling the array (default is array.length)","required":"no"}]},"filter":{"desc":"Creates a new array with every element in an array that pass a test","params":[{"param":"function(currentValue, index,arr)currentValueindexarr","desc":"A function to be run for each element in the array.Function arguments:         Argument     Description             currentValue     The value of the current element           index     The array index of the current element             arr     The array object the current element belongs to         ","required":"yes"},{"param":"currentValue","desc":"The value of the current element","required":"yes"},{"param":"index","desc":"The array index of the current element","required":"no"},{"param":"arr","desc":"The array object the current element belongs to","required":"no"},{"param":"thisValue","desc":"A value to be passed to the function to be used as its this value.If this parameter is empty, the value undefined will be passed as its this value","required":"no"}]},"find":{"desc":"Returns the value of the first element in an array that pass a test","params":[{"param":"function(currentValue, index, arr)currentValueindexarr","desc":"A function to be run for each element in the array.Function arguments:         Argument     Description             currentValue     The value of the current element           index     The array index of the current element             arr     The array object the current element belongs to         ","required":"yes"},{"param":"currentValue","desc":"The value of the current element","required":"yes"},{"param":"index","desc":"The array index of the current element","required":"no"},{"param":"arr","desc":"The array object the current element belongs to","required":"no"},{"param":"thisValue","desc":"A value to be passed to the function to be used as its this value.If this parameter is empty, the value undefined will be passed as its this value","required":"no"}]},"findIndex":{"desc":"Returns the index of the first element in an array that pass a test","params":[{"param":"function(currentValue, index,arr)currentValueindexarr","desc":"A function to be run for each element in the array.Function arguments:         Argument     Description             currentValue     The value of the current element           index     The array index of the current element             arr     The array object the current element belongs to         ","required":"yes"},{"param":"currentValue","desc":"The value of the current element","required":"yes"},{"param":"index","desc":"The array index of the current element","required":"no"},{"param":"arr","desc":"The array object the current element belongs to","required":"no"},{"param":"thisValue","desc":"A value to be passed to the function to be used as its this value.If this parameter is empty, the value undefined will be passed as its this value","required":"no"}]},"forEach":{"desc":"Calls a function for each array element","params":[{"param":"function(currentValue, index, arr)currentValueindexarr","desc":"A function to be run for each element in the array.Function arguments:         Argument     Description             currentValue     The value of the current element           index     The array index of the current element             arr     The array object the current element belongs to         ","required":"yes"},{"param":"currentValue","desc":"The value of the current element","required":"yes"},{"param":"index","desc":"The array index of the current element","required":"no"},{"param":"arr","desc":"The array object the current element belongs to","required":"no"},{"param":"thisValue","desc":"A value to be passed to the function to be used as its this value.If this parameter is empty, the value undefined will be passed as its this value","required":"no"}]},"isArray":{"desc":"Checks whether an object is an array","params":[{"param":"obj","desc":"The object to be tested","required":"yes"}]},"join":{"desc":"Joins all elements of an array into a string","params":[{"param":"separator","desc":"The separator to be used. If omitted, the elements are separated with a comma","required":"no"}]},"map":{"desc":"Creates a new array with the result of calling a function for each array element","params":[{"param":"function(currentValue, index, arr)currentValueindexarr","desc":"A function to be run for each element in the array.Function arguments:         Argument     Description             currentValue     The value of the current element           index     The array index of the current element             arr     The array object the current element belongs to         ","required":"yes"},{"param":"currentValue","desc":"The value of the current element","required":"yes"},{"param":"index","desc":"The array index of the current element","required":"no"},{"param":"arr","desc":"The array object the current element belongs to","required":"no"},{"param":"thisValue","desc":"A value to be passed to the function to be used as its this value.If this parameter is empty, the value undefined will be passed as its this value","required":"no"}]},"pop":{"desc":"Removes the last element of an array, and returns that element","params":[]},"push":{"desc":"Adds new elements to the end of an array, and returns the new length","params":[{"param":"item1item2itemX","desc":"The item(s) to add to the array","required":"yes"}]},"reduce":{"desc":"Reduce the values of an array to a single value (going left-to-right)","params":[{"param":"function(total,currentValue, index,arr)totalinitialValuecurrentValuecurrentIndexarr","desc":"A function to be run for each element in the array.Function arguments:         Argument     Description                total     The initialValue, or the previously returned value of the function              currentValue     The value of the current element           currentIndex     The array index of the current element             arr     The array object the current element belongs to         ","required":"yes"},{"param":"totalinitialValue","desc":"The initialValue, or the previously returned value of the function","required":"yes"},{"param":"currentValue","desc":"The value of the current element","required":"yes"},{"param":"currentIndex","desc":"The array index of the current element","required":"no"},{"param":"arr","desc":"The array object the current element belongs to","required":"no"},{"param":"initialValue","desc":"A value to be passed to the function as the initial value","required":"no"}]},"reduceRight":{"desc":"Reduce the values of an array to a single value (going right-to-left)","params":[{"param":"function(total, currentValue, index, arr)totalinitialValuecurrentValuecurrentIndexarr","desc":"A function to be run for each element in the array.Function arguments:         Argument     Description                total     The initialValue, or the previously returned value of the function              currentValue     The value of the current element           currentIndex     The array index of the current element             arr     The array object the current element belongs to         ","required":"yes"},{"param":"totalinitialValue","desc":"The initialValue, or the previously returned value of the function","required":"yes"},{"param":"currentValue","desc":"The value of the current element","required":"yes"},{"param":"currentIndex","desc":"The array index of the current element","required":"no"},{"param":"arr","desc":"The array object the current element belongs to","required":"no"},{"param":"initialValue","desc":"A value to be passed to the function as the initial value","required":"no"}]},"reverse":{"desc":"Reverses the order of the elements in an array","params":[]},"shift":{"desc":"Removes the first element of an array, and returns that element","params":[]},"some":{"desc":"Checks if any of the elements in an array pass a test","params":[{"param":"function(currentValue, index, arr)currentValueindexarr","desc":"A function to be run for each element in the array.Function arguments:         Argument     Description             currentValue     The value of the current element           index     The array index of the current element             arr     The array object the current element belongs to         ","required":"yes"},{"param":"currentValue","desc":"The value of the current element","required":"yes"},{"param":"index","desc":"The array index of the current element","required":"no"},{"param":"arr","desc":"The array object the current element belongs to","required":"no"},{"param":"thisValue","desc":"A value to be passed to the function to be used as its this value.If this parameter is empty, the value undefined will be passed as its this value","required":"no"}]},"sort":{"desc":"Sorts the elements of an array","params":[{"param":"compareFunction","desc":" A function that defines an alternative sort order. The function should return a negative, zero, or positive value, depending on the  arguments, like:    function(a, b){return a-b}   When the sort() method compares two values, it sends the values to the compare function, and sorts the values according to the returned (negative, zero, positive) value. Example: When comparing 40 and 100, the sort() method calls the compare  function(40,100). The function calculates 40-100, and returns -60 (a negative value). The sort function will sort 40 as a value lower than 100.   ","required":"no"}]},"splice":{"desc":"Adds/Removes elements from an array","params":[{"param":"index","desc":"An integer that specifies at what position to add/remove items, Use negative values to specify the position from the end of the array","required":"yes"},{"param":"howmany","desc":"The number of items to be removed. If set to 0, no items will be removed","required":"no"},{"param":"item1itemX","desc":"The new item(s) to be added to the array","required":"no"}]},"unshift":{"desc":"Adds new elements to the beginning of an array, and returns the new length","params":[{"param":"item1 item2itemX","desc":"The item(s) to add to the beginning of the array","required":"yes"}]},"decodeURI":{"desc":"Decodes a URI","params":[{"param":"uri","desc":"The URI to be decoded","required":"yes"}]},"decodeURIComponent":{"desc":"Decodes a URI component","params":[{"param":"uri","desc":"The URI to be decoded","required":"yes"}]},"encodeURI":{"desc":"Encodes a URI","params":[{"param":"uri","desc":"The URI to be encoded","required":"yes"}]},"encodeURIComponent":{"desc":"Encodes a URI component","params":[{"param":"uri","desc":"The URI to be encoded","required":"yes"}]},"escape":{"desc":"Deprecated in version 1.5. Use encodeURI() or encodeURIComponent() instead","params":[{"param":"string","desc":"The string to be encoded","required":"yes"}]},"eval":{"desc":"Evaluates a string and executes it as if it was script code","params":[{"param":"","desc":"A JavaScript expression, variable, statement, or sequence of statements","required":"no"}]},"Number":{"desc":"Converts an objects value to a number","params":[{"param":"","desc":"A JavaScript object. If no argument is provided, it returns 0.","required":"no"}]},"parseFloat":{"desc":"Parses a string and returns a floating point number","params":[{"param":"string","desc":"The string to be parsed","required":"yes"}]},"parseInt":{"desc":"Parses a string and returns an integer","params":[{"param":"string","desc":"The string to be parsed","required":"yes"},{"param":"radix","desc":"A number (from 2 to 36) that represents the numeral system to be used","required":"no"}]},"String":{"desc":"Converts an objects value to a string","params":[{"param":"object","desc":"A JavaScript object","required":"yes"}]},"unescape":{"desc":"Deprecated in version 1.5. Use decodeURI() or decodeURIComponent() instead","params":[{"param":"string","desc":"The string to be decoded","required":"yes"}]}}');
Object.keys(autocomplete_js).forEach(function(key){ autocomplete_js[key]['type'] = "js" });