var autocomplete_wordpress = jQuery.parseJSON('{"absint":{"desc":"Convert a value to non-negative integer.","params":[{"param":"$maybeint","desc":"Data you wish to have converted to a non-negative integer.","required":"yes"}]},"activate_plugin":{"desc":"Attempts activation of plugin in a “sandbox” and redirects on success.","params":[{"param":"$plugin","desc":"Plugin path to main plugin file with plugin data.","required":"yes"},{"param":"$redirect","desc":" URL to redirect to.","required":"no"},{"param":"$network_wide","desc":" Whether to enable the plugin for all sites in the network or just the current site. Multisite only. ","required":"no"},{"param":"$silent","desc":" Whether to prevent calling activation hooks. ","required":"no"}]},"activate_plugins":{"desc":"Activate multiple plugins.","params":[{"param":"$plugins","desc":"Single plugin or list of plugins to activate.","required":"yes"},{"param":"$redirect","desc":"Redirect to page after successful activation.","required":"no"},{"param":"$network_wide","desc":"Whether to enable the plugin for all sites in the network.","required":"no"},{"param":"$silent","desc":"Prevent calling activation hooks. Default is false.","required":"no"}]},"activate_sitewide_plugin":{"desc":"Deprecated functionality for activating a network-only plugin.","params":[]},"addslashes_gpc":{"desc":"Adds slashes to escape strings.","params":[{"param":"$gpc","desc":"The string returned from HTTP request data.","required":"yes"}]},"add_action":{"desc":"Hooks a function on to a specific action.","params":[{"param":"$tag","desc":"The name of the action to which the $function_to_add is hooked.","required":"yes"},{"param":"$function_to_add","desc":"The name of the function you wish to be called.","required":"yes"},{"param":"$priority","desc":" Used to specify the order in which the functions associated with a particular action are executed. Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action.","required":"no"},{"param":"$accepted_args","desc":" The number of arguments the function accepts. ","required":"no"}]},"add_blog_option":{"desc":"Add a new option for a given blog id.","params":[{"param":"$id","desc":"A blog ID. Can be null to refer to the current blog.","required":"yes"},{"param":"$option","desc":"Name of option to add. Expected to not be SQL-escaped.","required":"yes"},{"param":"$value","desc":" Option value, can be anything. Expected to not be SQL-escaped.","required":"no"}]},"add_clean_index":{"desc":"Adds an index to a specified table.","params":[{"param":"$table","desc":"Database table name.","required":"yes"},{"param":"$index","desc":"Database table index column.","required":"yes"}]},"add_comments_page":{"desc":"Add submenu page to the Comments main menu.","params":[{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"}]},"add_comment_meta":{"desc":"Add meta data field to a comment.","params":[{"param":"$comment_id","desc":"Comment ID.","required":"yes"},{"param":"$meta_key","desc":"Metadata name.","required":"yes"},{"param":"$meta_value","desc":"Metadata value.","required":"yes"},{"param":"$unique","desc":" Whether the same key should not be added.","required":"no"}]},"add_contextual_help":{"desc":"Add contextual help text for a page.","params":[{"param":"$screen","desc":"The handle for the screen to add help to. This is usually the hook name returned by the add_*_page() functions.","required":"yes"},{"param":"$help","desc":"The content of an Overview help tab.","required":"yes"}]},"add_cssclass":{"desc":"","params":[{"param":"$add","desc":"","required":"yes"},{"param":"$class","desc":"","required":"yes"}]},"add_custom_background":{"desc":"Add callbacks for background image display.","params":[{"param":"$wp_head_callback","desc":"Call on the wp_head action.","required":"no"},{"param":"$admin_head_callback","desc":"Call on custom background administration screen.","required":"no"},{"param":"$admin_preview_callback","desc":"Output a custom background image div on the custom background administration screen. Optional.","required":"no"}]},"add_custom_image_header":{"desc":"Add callbacks for image header display.","params":[{"param":"$wp_head_callback","desc":"Call on the wp_head action.","required":"yes"},{"param":"$admin_head_callback","desc":"Call on custom header administration screen.","required":"yes"},{"param":"$admin_preview_callback","desc":"Output a custom header image div on the custom header administration screen. Optional.","required":"no"}]},"add_dashboard_page":{"desc":"Add submenu page to the Dashboard main menu.","params":[{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"}]},"add_editor_style":{"desc":"Add callback for custom TinyMCE editor stylesheets.","params":[{"param":"$stylesheet","desc":" Stylesheet name or array thereof, relative to theme root.   Defaults to editor-style.css","required":"no"}]},"add_existing_user_to_blog":{"desc":"Add a user to a blog based on details from maybe_add_existing_user_to_blog().","params":[{"param":"$details","desc":"","required":"no"}]},"add_feed":{"desc":"Add a new feed type like /atom1/.","params":[{"param":"$feedname","desc":"Feed name.","required":"yes"},{"param":"$function","desc":"Callback to run on feed display.","required":"yes"}]},"add_filter":{"desc":"Hook a function or method to a specific filter action.","params":[{"param":"$tag","desc":"The name of the filter to hook the $function_to_add callback to.","required":"yes"},{"param":"$function_to_add","desc":"The callback to be run when the filter is applied.","required":"yes"},{"param":"$priority","desc":" Used to specify the order in which the functions associated with a particular action are executed. Lower numbers correspond with earlier execution, and functions with the same priority are executed in the order in which they were added to the action.","required":"no"},{"param":"$accepted_args","desc":" The number of arguments the function accepts. ","required":"no"}]},"add_image_size":{"desc":"Register a new image size.","params":[{"param":"$name","desc":"Image size identifier.","required":"yes"},{"param":"$width","desc":"Image width in pixels.","required":"yes"},{"param":"$height","desc":"Image height in pixels.","required":"yes"},{"param":"$crop","desc":" Whether to crop images to specified width and height or resize. An array can specify positioning of the crop area. ","required":"no"}]},"add_link":{"desc":"Add a link to using values provided in $_POST.","params":[]},"add_links_page":{"desc":"Add submenu page to the Links main menu.","params":[{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"}]},"add_magic_quotes":{"desc":"Walks the array while sanitizing the contents.","params":[{"param":"$array","desc":"Array to walk while sanitizing contents.","required":"yes"}]},"add_management_page":{"desc":"Add submenu page to the Tools main menu.","params":[{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"}]},"add_media_page":{"desc":"Add submenu page to the Media main menu.","params":[{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"}]},"add_menu_classes":{"desc":"","params":[{"param":"$menu","desc":"","required":"yes"}]},"add_menu_page":{"desc":"Add a top-level menu page.","params":[{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"},{"param":"$icon_url","desc":"The URL to the icon to be used for this menu. * Pass a base64-encoded SVG using a data URI, which will be colored to match the color scheme. This should begin with data:image/svg+xml;base64,. * Pass the name of a Dashicons helper class to use a font icon, e.g. dashicons-chart-pie. * Pass none to leave div.wp-menu-image empty so an icon can be added via CSS.","required":"no"},{"param":"$position","desc":"The position in the menu order this one should appear.","required":"no"}]},"add_meta":{"desc":"Add post meta data defined in $_POST superglobal for post with given ID.","params":[{"param":"$post_ID","desc":"","required":"yes"}]},"add_metadata":{"desc":"Add metadata for the specified object.","params":[{"param":"$meta_type","desc":"Type of object metadata is for (e.g., comment, post, or user)","required":"yes"},{"param":"$object_id","desc":"ID of the object metadata is for","required":"yes"},{"param":"$meta_key","desc":"Metadata key","required":"yes"},{"param":"$meta_value","desc":"Metadata value. Must be serializable if non-scalar.","required":"yes"},{"param":"$unique","desc":" Whether the specified metadata key should be unique for the object. If true, and the object already has a value for the specified metadata key, no change will be made.","required":"no"}]},"add_meta_box":{"desc":"Adds a meta box to one or more screens.","params":[{"param":"$id","desc":"Meta box ID (used in the id attribute for the meta box).","required":"yes"},{"param":"$title","desc":"Title of the meta box.","required":"yes"},{"param":"$callback","desc":"Function that fills the box with the desired content. The function should echo its output.","required":"yes"},{"param":"$screen","desc":" The screen or screens on which to show the box (such as a post type, link, or comment). Accepts a single screen ID, WP_Screen object, or array of screen IDs. Default is the current screen.","required":"no"},{"param":"$context","desc":" The context within the screen where the boxes should display. Available contexts vary from screen to screen. Post edit screen contexts include normal, side, and advanced. Comments screen contexts include normal and side. Menus meta boxes (accordion sections) all use the side context. Global ","required":"no"},{"param":"$priority","desc":" The priority within the context where the boxes should show (high, low). ","required":"no"},{"param":"$callback_args","desc":" Data that should be set as the $args property of the box array (which is the second parameter passed to your callback). ","required":"no"}]},"add_network_option":{"desc":"Add a new network option.","params":[{"param":"$network_id","desc":"ID of the network. Can be null to default to the current network ID.","required":"yes"},{"param":"$option","desc":"Name of option to add. Expected to not be SQL-escaped.","required":"yes"},{"param":"$value","desc":"Option value, can be anything. Expected to not be SQL-escaped.","required":"yes"}]},"add_new_user_to_blog":{"desc":"Add a newly created user to the appropriate blog","params":[{"param":"$user_id","desc":"","required":"yes"},{"param":"$password","desc":"Ignored.","required":"yes"},{"param":"$meta","desc":"","required":"yes"}]},"add_object_page":{"desc":"Add a top-level menu page in the ‘objects’ section.","params":[{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"},{"param":"$icon_url","desc":"The url to the icon to be used for this menu.","required":"no"}]},"add_option":{"desc":"Add a new option.","params":[{"param":"$option","desc":"Name of option to add. Expected to not be SQL-escaped.","required":"yes"},{"param":"$value","desc":" Option value. Must be serializable if non-scalar. Expected to not be SQL-escaped.","required":"no"},{"param":"$deprecated","desc":" Description. Not used anymore.","required":"no"},{"param":"$autoload","desc":" Whether to load the option when WordPress starts up. Default is enabled. Accepts no to disable for legacy reasons.","required":"no"}]},"add_options_page":{"desc":"Add submenu page to the Settings main menu.","params":[{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"}]},"add_option_update_handler":{"desc":"Register a setting and its sanitization callback","params":[{"param":"$option_group","desc":"A settings group name. Should correspond to a whitelisted option key name.  Default whitelisted option key names include general, discussion, and reading, among others.","required":"yes"},{"param":"$option_name","desc":"The name of an option to sanitize and save.","required":"yes"},{"param":"$sanitize_callback","desc":"A callback function that sanitizes the options value.","required":"no"}]},"add_option_whitelist":{"desc":"Adds an array of options to the options whitelist.","params":[{"param":"$new_options","desc":"","required":"yes"},{"param":"$options","desc":"","required":"no"}]},"add_pages_page":{"desc":"Add submenu page to the Pages main menu.","params":[{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"}]},"add_permastruct":{"desc":"Add permalink structure.","params":[{"param":"$name","desc":"Name for permalink structure.","required":"yes"},{"param":"$struct","desc":"Permalink structure.","required":"yes"},{"param":"$args","desc":" Arguments for building the rules from the permalink structure, see WP_Rewrite::add_permastruct() for full details. ","required":"no"}]},"add_ping":{"desc":"Add a URL to those already pinged.","params":[{"param":"$post_id","desc":"Post object or ID.","required":"yes"},{"param":"$uri","desc":"Ping URI or array of URIs.","required":"yes"}]},"add_plugins_page":{"desc":"Add submenu page to the Plugins main menu.","params":[{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"}]},"add_posts_page":{"desc":"Add submenu page to the Posts main menu.","params":[{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"}]},"add_post_meta":{"desc":"Add meta data field to a post.","params":[{"param":"$post_id","desc":"Post ID.","required":"yes"},{"param":"$meta_key","desc":"Metadata name.","required":"yes"},{"param":"$meta_value","desc":"Metadata value. Must be serializable if non-scalar.","required":"yes"},{"param":"$unique","desc":" Whether the same key should not be added. ","required":"no"}]},"add_post_type_support":{"desc":"Register support of certain features for a post type.","params":[{"param":"$post_type","desc":"The post type for which to add the feature.","required":"yes"},{"param":"$feature","desc":"The feature being added, accepts an array of feature strings or a single string.","required":"yes"}]},"add_query_arg":{"desc":"Retrieves a modified URL query string.","params":[{"param":"$key","desc":"Either a query variable key, or an associative array of query variables.","required":"yes"},{"param":"$value","desc":" Either a query variable value, or a URL to act upon.","required":"no"},{"param":"$url","desc":" A URL to act upon.","required":"no"}]},"add_rewrite_endpoint":{"desc":"Add an endpoint, like /trackback/.","params":[{"param":"$name","desc":"Name of the endpoint.","required":"yes"},{"param":"$places","desc":"Endpoint mask describing the places the endpoint should be added.","required":"yes"},{"param":"$query_var","desc":"Name of the corresponding query variable. Pass false to skip registering a query_var for this endpoint. Defaults to the value of $name.","required":"no"}]},"add_rewrite_rule":{"desc":"Adds a rewrite rule that transforms a URL structure to a set of query vars.","params":[{"param":"$regex","desc":"Regular expression to match request against.","required":"yes"},{"param":"$query","desc":"The corresponding query vars for this rewrite rule.","required":"yes"},{"param":"$after","desc":" Priority of the new rule. Accepts top or bottom. ","required":"no"}]},"add_rewrite_tag":{"desc":"Add a new rewrite tag (like %postname%).","params":[{"param":"$tag","desc":"Name of the new rewrite tag.","required":"yes"},{"param":"$regex","desc":"Regular expression to substitute the tag for in rewrite rules.","required":"yes"},{"param":"$query","desc":" String to append to the rewritten query. Must end in =. ","required":"no"}]},"add_role":{"desc":"Add role, if it does not exist.","params":[{"param":"$role","desc":"Role name.","required":"yes"},{"param":"$display_name","desc":"Display name for role.","required":"yes"},{"param":"$capabilities","desc":"List of capabilities, e.g. array( edit_posts => true, delete_posts => false );","required":"no"}]},"add_screen_option":{"desc":"Register and configure an admin screen option","params":[{"param":"$option","desc":"An option name.","required":"yes"},{"param":"$args","desc":"Option-dependent arguments.","required":"no"}]},"add_settings_error":{"desc":"Register a settings error to be displayed to the user","params":[{"param":"$setting","desc":"Slug title of the setting to which this error applies","required":"yes"},{"param":"$code","desc":"Slug-name to identify the error. Used as part of id attribute in HTML output.","required":"yes"},{"param":"$message","desc":"The formatted message text to display to the user (will be shown inside styled <div> and <p> tags).","required":"yes"},{"param":"$type","desc":" Message type, controls HTML class. Accepts error or updated. ","required":"no"}]},"add_settings_field":{"desc":"Add a new field to a section of a settings page","params":[{"param":"$id","desc":"Slug-name to identify the field. Used in the id attribute of tags.","required":"yes"},{"param":"$title","desc":"Formatted title of the field. Shown as the label for the field during output.","required":"yes"},{"param":"$callback","desc":"Function that fills the field with the desired form inputs. The function should echo its output.","required":"yes"},{"param":"$page","desc":"The slug-name of the settings page on which to show the section (general, reading, writing, ...).","required":"yes"},{"param":"$section","desc":" The slug-name of the section of the settings page in which to show the box. ","required":"no"},{"param":"$args","desc":"Extra arguments used when outputting the field. label_for(string) When supplied, the setting title will be wrapped in a <label> element, its for attribute populated with this value. class(string) CSS Class to be added to the <tr> element when the field is output.  ","required":"no"}]},"add_settings_section":{"desc":"Add a new section to a settings page.","params":[{"param":"$id","desc":"Slug-name to identify the section. Used in the id attribute of tags.","required":"yes"},{"param":"$title","desc":"Formatted title of the section. Shown as the heading for the section.","required":"yes"},{"param":"$callback","desc":"Function that echos out any content at the top of the section (between heading and fields).","required":"yes"},{"param":"$page","desc":"The slug-name of the settings page on which to show the section. Built-in pages include general, reading, writing, discussion, media, etc. Create your own using add_options_page();","required":"yes"}]},"add_shortcode":{"desc":"Add hook for shortcode tag.","params":[{"param":"$tag","desc":"Shortcode tag to be searched in post content.","required":"yes"},{"param":"$func","desc":"Hook to run when shortcode is found.","required":"yes"}]},"add_site_option":{"desc":"Add a new option for the current network.","params":[{"param":"$option","desc":"Name of option to add. Expected to not be SQL-escaped.","required":"yes"},{"param":"$value","desc":"Option value, can be anything. Expected to not be SQL-escaped.","required":"yes"}]},"add_submenu_page":{"desc":"Add a submenu page.","params":[{"param":"$parent_slug","desc":"The slug name for the parent menu (or the file name of a standard WordPress admin page).","required":"yes"},{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"}]},"add_term_meta":{"desc":"Adds metadata to a term.","params":[{"param":"$term_id","desc":"Term ID.","required":"yes"},{"param":"$meta_key","desc":"Metadata name.","required":"yes"},{"param":"$meta_value","desc":"Metadata value.","required":"yes"},{"param":"$unique","desc":" Whether to bail if an entry with the same key is found for the term. ","required":"no"}]},"add_theme_page":{"desc":"Add submenu page to the Appearance main menu.","params":[{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"}]},"add_theme_support":{"desc":"Allows a theme to register its support of a certain feature","params":[{"param":"$feature","desc":"The feature being added. Likely core values include post-formats, post-thumbnails, html5, custom-logo, custom-header-uploads, custom-header, custom-background, title-tag, starter-content, etc.","required":"yes"},{"param":"$args,...","desc":"extra arguments to pass along with certain features.","required":"no"}]},"add_thickbox":{"desc":"Enqueues the default ThickBox js and css.","params":[]},"add_user":{"desc":"Creates a new user from the “Users” form using $_POST information.","params":[]},"add_users_page":{"desc":"Add submenu page to the Users/Profile main menu.","params":[{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"}]},"add_user_meta":{"desc":"Add meta data field to a user.","params":[{"param":"$user_id","desc":"User ID.","required":"yes"},{"param":"$meta_key","desc":"Metadata name.","required":"yes"},{"param":"$meta_value","desc":"Metadata value.","required":"yes"},{"param":"$unique","desc":" Whether the same key should not be added.","required":"no"}]},"add_user_to_blog":{"desc":"Adds a user to a blog.","params":[{"param":"$blog_id","desc":"ID of the blog youre adding the user to.","required":"yes"},{"param":"$user_id","desc":"ID of the user youre adding.","required":"yes"},{"param":"$role","desc":"The role you want the user to have","required":"yes"}]},"add_utility_page":{"desc":"Add a top-level menu page in the ‘utility’ section.","params":[{"param":"$page_title","desc":"The text to be displayed in the title tags of the page when the menu is selected.","required":"yes"},{"param":"$menu_title","desc":"The text to be used for the menu.","required":"yes"},{"param":"$capability","desc":"The capability required for this menu to be displayed to the user.","required":"yes"},{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu).","required":"yes"},{"param":"$function","desc":"The function to be called to output the content for this page.","required":"no"},{"param":"$icon_url","desc":"The url to the icon to be used for this menu.","required":"no"}]},"adjacent_image_link":{"desc":"Displays next or previous image link that has the same post parent.","params":[{"param":"$prev","desc":" Whether to display the next (false) or previous (true) link. ","required":"no"},{"param":"$size","desc":" Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"},{"param":"$text","desc":" Link text. ","required":"no"}]},"adjacent_posts_rel_link":{"desc":"Displays the relational links for the posts adjacent to the current post.","params":[{"param":"$title","desc":" Link title format. ","required":"no"},{"param":"$in_same_term","desc":" Whether link should be in a same taxonomy term. ","required":"no"},{"param":"$excluded_terms","desc":" Array or comma-separated list of excluded term IDs. ","required":"no"},{"param":"$taxonomy","desc":" Taxonomy, if $in_same_term is true. ","required":"no"}]},"adjacent_posts_rel_link_wp_head":{"desc":"Display relational links for the posts adjacent to the current post for single post pages.","params":[]},"adjacent_post_link":{"desc":"Displays the adjacent post link.","params":[{"param":"$format","desc":"Link anchor format.","required":"yes"},{"param":"$link","desc":"Link permalink format.","required":"yes"},{"param":"$in_same_term","desc":" Whether link should be in a same taxonomy term. ","required":"no"},{"param":"$excluded_terms","desc":" Array or comma-separated list of excluded category IDs. ","required":"no"},{"param":"$previous","desc":" Whether to display link to previous or next post. ","required":"no"},{"param":"$taxonomy","desc":" Taxonomy, if $in_same_term is true. ","required":"no"}]},"admin_color_scheme_picker":{"desc":"Display the default admin color scheme picker (Used in user-edit.php)","params":[{"param":"$user_id","desc":"User ID.","required":"yes"}]},"admin_created_user_email":{"desc":"","params":[{"param":"$text","desc":"","required":"yes"}]},"admin_created_user_subject":{"desc":"","params":[]},"admin_url":{"desc":"Retrieve the url to the admin area for the current site.","params":[{"param":"$path","desc":"path relative to the admin URL.","required":"no"},{"param":"$scheme","desc":"The scheme to use. Default is admin, which obeys force_ssl_admin() and is_ssl(). http or https can be passed to force those schemes.","required":"no"}]},"allowed_http_request_hosts":{"desc":"Whitelists allowed redirect hosts for safe HTTP requests as well.","params":[{"param":"$is_external","desc":"","required":"yes"},{"param":"$host","desc":"","required":"yes"}]},"allowed_tags":{"desc":"Display all of the allowed tags in HTML format with attributes.","params":[]},"allow_subdirectory_install":{"desc":"Allow subdirectory install.","params":[]},"allow_subdomain_install":{"desc":"Allow subdomain install","params":[]},"antispambot":{"desc":"Converts email addresses characters to HTML entities to block spam bots.","params":[{"param":"$email_address","desc":"Email address.","required":"yes"},{"param":"$hex_encoding","desc":" Set to 1 to enable hex encoding.","required":"no"}]},"apache_mod_loaded":{"desc":"Does the specified module exist in the Apache config?","params":[{"param":"$mod","desc":"The module, e.g. mod_rewrite.","required":"yes"},{"param":"$default","desc":" The default return value if the module is not found. ","required":"no"}]},"apply_filters":{"desc":"Call the functions added to a filter hook.","params":[{"param":"$tag","desc":"The name of the filter hook.","required":"yes"},{"param":"$value","desc":"The value on which the filters hooked to $tag are applied on.","required":"yes"},{"param":"$var,...","desc":"Additional variables passed to the functions hooked to $tag.","required":"yes"}]},"apply_filters_deprecated":{"desc":"Fires functions attached to a deprecated filter hook.","params":[{"param":"$tag","desc":"The name of the filter hook.","required":"yes"},{"param":"$args","desc":"Array of additional function arguments to be passed to apply_filters().","required":"yes"},{"param":"$version","desc":"The version of WordPress that deprecated the hook.","required":"yes"},{"param":"$replacement","desc":" The hook that should have been used. ","required":"no"},{"param":"$message","desc":" A message regarding the change. ","required":"no"}]},"apply_filters_ref_array":{"desc":"Execute functions hooked on a specific filter hook, specifying arguments in an array.","params":[{"param":"$tag","desc":"The name of the filter hook.","required":"yes"},{"param":"$args","desc":"The arguments supplied to the functions hooked to $tag.","required":"yes"}]},"array_replace_recursive":{"desc":"PHP-agnostic version of {@link array_replace_recursive()}.","params":[{"param":"$base","desc":"Array with keys needing to be replaced.","required":"no"},{"param":"$replacements","desc":"Array with the replaced keys.","required":"no"}]},"atom_enclosure":{"desc":"Display the atom enclosure for the current post.","params":[]},"atom_site_icon":{"desc":"Displays Site Icon in atom feeds.","params":[]},"attachment_id3_data_meta_box":{"desc":"Display fields for ID3 data","params":[{"param":"$post","desc":"A post object.","required":"yes"}]},"attachment_submitbox_metadata":{"desc":"Displays non-editable attachment metadata in the publish meta box.","params":[]},"attachment_submit_meta_box":{"desc":"Display attachment submit form fields.","params":[{"param":"$post","desc":"","required":"yes"}]},"attachment_url_to_postid":{"desc":"Tries to convert an attachment URL into a post ID.","params":[{"param":"$url","desc":"The URL to resolve.","required":"yes"}]},"attribute_escape":{"desc":"Escaping for HTML attributes.","params":[{"param":"$text","desc":"","required":"yes"}]},"author_can":{"desc":"Whether author of supplied post has capability or role.","params":[{"param":"$post","desc":"Post ID or post object.","required":"yes"},{"param":"$capability","desc":"Capability or role name.","required":"yes"}]},"auth_redirect":{"desc":"Checks if a user is logged in, if not it redirects them to the login page.","params":[]},"automatic_feed_links":{"desc":"Enable/disable automatic general feed link outputting.","params":[{"param":"$add","desc":" Add or remove links. Defaults to true.","required":"no"}]},"avoid_blog_page_permalink_collision":{"desc":"Avoids a collision between a site slug and a permalink slug.","params":[{"param":"$data","desc":"An array of post data.","required":"yes"},{"param":"$postarr","desc":"An array of posts. Not currently used.","required":"yes"}]},"background_color":{"desc":"Display background color value.","params":[]},"background_image":{"desc":"Display background image path.","params":[]},"backslashit":{"desc":"Adds backslashes before letters and before a number at the start of a string.","params":[{"param":"$string","desc":"Value to which backslashes will be added.","required":"yes"}]},"balanceTags":{"desc":"Balances tags if forced to, or if the ‘use_balanceTags’ option is set to true.","params":[{"param":"$text","desc":"Text to be balanced","required":"yes"},{"param":"$force","desc":"If true, forces balancing, ignoring the value of the option. ","required":"no"}]},"before_last_bar":{"desc":"Remove last item on a pipe-delimited string.","params":[{"param":"$string","desc":"A pipe-delimited string.","required":"yes"}]},"bloginfo":{"desc":"Displays information about the current site.","params":[{"param":"$show","desc":" Site information to display. ","required":"no"}]},"bloginfo_rss":{"desc":"Display RSS container for the bloginfo function.","params":[{"param":"$show","desc":"See get_bloginfo() for possible values.","required":"no"}]},"body_class":{"desc":"Display the classes for the body element.","params":[{"param":"$class","desc":"One or more classes to add to the class list.","required":"no"}]},"bool_from_yn":{"desc":"Whether input is yes or no.","params":[{"param":"$yn","desc":"Character string containing either y (yes) or n (no).","required":"yes"}]},"build_query":{"desc":"Build URL query based on an associative and, or indexed array.","params":[{"param":"$data","desc":"URL-encode key/value pairs.","required":"yes"}]},"bulk_edit_posts":{"desc":"Process the post data for the bulk editing of posts.","params":[{"param":"$post_data","desc":" the array of post data to process if not provided will use $_POST superglobal.","required":"no"}]},"cache_javascript_headers":{"desc":"Set the headers for caching for 10 days with JavaScript content type.","params":[]},"cache_users":{"desc":"Retrieve info for user lists to prevent multiple queries by get_userdata()","params":[{"param":"$user_ids","desc":"User ID numbers list","required":"yes"}]},"calendar_week_mod":{"desc":"Get number of days since the start of the week.","params":[{"param":"$num","desc":"Number of day.","required":"yes"}]},"cancel_comment_reply_link":{"desc":"Display HTML content for cancel comment reply link.","params":[{"param":"$text","desc":" Text to display for cancel reply link. ","required":"no"}]},"can_edit_network":{"desc":"Whether or not we can edit this network from this page.","params":[{"param":"$site_id","desc":"The network/site ID to check.","required":"yes"}]},"capital_P_dangit":{"desc":"Forever eliminate “Wordpress” from the planet (or at least the little bit we can influence).","params":[{"param":"$text","desc":"The text to be modified.","required":"yes"}]},"category_description":{"desc":"Retrieve category description.","params":[{"param":"$category","desc":" Category ID. Will use global category ID by default.","required":"no"}]},"category_exists":{"desc":"Check whether a category exists.","params":[{"param":"$cat_name","desc":"Category name.","required":"yes"},{"param":"$parent","desc":" ID of parent term.","required":"no"}]},"cat_is_ancestor_of":{"desc":"Check if a category is an ancestor of another category.","params":[{"param":"$cat1","desc":"ID or object to check if this is the parent category.","required":"yes"},{"param":"$cat2","desc":"The child category.","required":"yes"}]},"checked":{"desc":"Outputs the html checked attribute.","params":[{"param":"$checked","desc":"One of the values to compare","required":"yes"},{"param":"$current","desc":"(true) The other value to compare if not just true","required":"no"},{"param":"$echo","desc":"Whether to echo or just return the string","required":"no"}]},"check_admin_referer":{"desc":"Makes sure that a user was referred from another admin page.","params":[{"param":"$action","desc":"Action nonce.","required":"no"},{"param":"$query_arg","desc":" Key to check for nonce in $_REQUEST (since 2.5). ","required":"no"}]},"check_ajax_referer":{"desc":"Verifies the AJAX request to prevent processing requests external of the blog.","params":[{"param":"$action","desc":"Action nonce.","required":"no"},{"param":"$query_arg","desc":" Key to check for the nonce in $_REQUEST (since 2.5). If false, $_REQUEST values will be evaluated for _ajax_nonce, and _wpnonce (in that order). ","required":"no"},{"param":"$die","desc":" Whether to die early when the nonce cannot be verified. ","required":"no"}]},"check_and_publish_future_post":{"desc":"Publish future post and make sure post ID has future post status.","params":[{"param":"$post_id","desc":"Post ID or post object.","required":"yes"}]},"check_column":{"desc":"Check column matches criteria.","params":[{"param":"$table_name","desc":"Table name","required":"yes"},{"param":"$col_name","desc":"Column name","required":"yes"},{"param":"$col_type","desc":"Column type","required":"yes"},{"param":"$is_null","desc":" Check is null.","required":"no"},{"param":"$key","desc":" Key info.","required":"no"},{"param":"$default","desc":" Default value.","required":"no"},{"param":"$extra","desc":" Extra value.","required":"no"}]},"check_comment":{"desc":"Check whether a comment passes internal checks to be allowed to add.","params":[{"param":"$author","desc":"Comment author name.","required":"yes"},{"param":"$email","desc":"Comment author email.","required":"yes"},{"param":"$url","desc":"Comment author URL.","required":"yes"},{"param":"$comment","desc":"Content of the comment.","required":"yes"},{"param":"$user_ip","desc":"Comment author IP address.","required":"yes"},{"param":"$user_agent","desc":"Comment author User-Agent.","required":"yes"},{"param":"$comment_type","desc":"Comment type, either user-submitted comment,   trackback, or pingback.","required":"yes"}]},"check_comment_flood_db":{"desc":"Check whether comment flooding is occurring.","params":[]},"check_import_new_users":{"desc":"Checks if the current user has permissions to import new users.","params":[{"param":"$permission","desc":"A permission to be checked. Currently not used.","required":"yes"}]},"check_password_reset_key":{"desc":"Retrieves a user row based on password reset key and login","params":[{"param":"$key","desc":"Hash to validate sending users password.","required":"yes"},{"param":"$login","desc":"The user login.","required":"yes"}]},"check_theme_switched":{"desc":"Checks if a theme has been changed and runs ‘after_switch_theme’ hook on the next WP load.","params":[]},"check_upload_mimes":{"desc":"Check an array of MIME types against a whitelist.","params":[{"param":"$mimes","desc":"","required":"yes"}]},"check_upload_size":{"desc":"Determine if uploaded file exceeds space quota.","params":[{"param":"$file","desc":"$_FILES array for a given file.","required":"yes"}]},"choose_primary_blog":{"desc":"Handles the display of choosing a user’s primary site.","params":[]},"clean_attachment_cache":{"desc":"Will clean the attachment in the cache.","params":[{"param":"$id","desc":"The attachment ID in the cache to clean.","required":"yes"},{"param":"$clean_terms","desc":" Whether to clean terms cache. ","required":"no"}]},"clean_blog_cache":{"desc":"Clean the blog cache","params":[{"param":"$blog","desc":"The site object to be cleared from cache.","required":"yes"}]},"clean_bookmark_cache":{"desc":"Deletes the bookmark cache.","params":[{"param":"$bookmark_id","desc":"Bookmark ID.","required":"yes"}]},"clean_category_cache":{"desc":"Remove the category cache data based on ID.","params":[{"param":"$id","desc":"Category ID","required":"yes"}]},"clean_comment_cache":{"desc":"Removes a comment from the object cache.","params":[{"param":"$ids","desc":"Comment ID or an array of comment IDs to remove from cache.","required":"yes"}]},"clean_network_cache":{"desc":"Removes a network from the object cache.","params":[{"param":"$ids","desc":"Network ID or an array of network IDs to remove from cache.","required":"yes"}]},"clean_object_term_cache":{"desc":"Removes the taxonomy relationship to terms from the cache.","params":[{"param":"$object_ids","desc":"Single or list of term object ID(s).","required":"yes"},{"param":"$object_type","desc":"The taxonomy object type.","required":"yes"}]},"clean_page_cache":{"desc":"Will clean the page in the cache.","params":[{"param":"$id","desc":"Page ID to clean","required":"yes"}]},"clean_post_cache":{"desc":"Will clean the post in the cache.","params":[{"param":"$post","desc":"Post ID or post object to remove from the cache.","required":"yes"}]},"clean_pre":{"desc":"Accepts matches array from preg_replace_callback in wpautop() or a string.","params":[{"param":"$matches","desc":"The array or string","required":"yes"}]},"clean_term_cache":{"desc":"Will remove all of the term ids from the cache.","params":[{"param":"$ids","desc":"Single or list of Term IDs.","required":"yes"},{"param":"$taxonomy","desc":" Can be empty and will assume tt_ids, else will use for context. ","required":"no"},{"param":"$clean_taxonomy","desc":" Whether to clean taxonomy wide caches (true), or just individual term object caches (false). ","required":"no"}]},"clean_url":{"desc":"Checks and cleans a URL.","params":[{"param":"$url","desc":"The URL to be cleaned.","required":"yes"},{"param":"$protocols","desc":" An array of acceptable protocols.","required":"no"},{"param":"$context","desc":" How the URL will be used. Default is display.","required":"no"}]},"clean_user_cache":{"desc":"Clean all user caches","params":[{"param":"$user","desc":"User object or ID to be cleaned from the cache","required":"yes"}]},"clear_global_post_cache":{"desc":"Deprecated functionality to clear the global post cache.","params":[{"param":"$post_id","desc":"Post ID.","required":"yes"}]},"codepress_footer_js":{"desc":"Adds JavaScript required to make CodePress work on the theme/plugin editors.","params":[]},"codepress_get_lang":{"desc":"Determines the language to use for CodePress syntax highlighting.","params":[{"param":"$filename","desc":"","required":"yes"}]},"comments_link":{"desc":"Display the link to the current post comments.","params":[{"param":"$deprecated","desc":"Not Used.","required":"no"},{"param":"$deprecated_2","desc":"Not Used.","required":"no"}]},"comments_link_feed":{"desc":"Outputs the link to the comments for the current post in an xml safe way","params":[]},"comments_number":{"desc":"Display the language string for the number of comments the current post has.","params":[{"param":"$zero","desc":" Text for no comments. ","required":"no"},{"param":"$one","desc":" Text for one comment. ","required":"no"},{"param":"$more","desc":" Text for more than one comment. ","required":"no"},{"param":"$deprecated","desc":"Not used.","required":"no"}]},"comments_open":{"desc":"Whether the current post is open for comments.","params":[{"param":"$post_id","desc":"Post ID or WP_Post object. Default current post.","required":"no"}]},"comments_popup_link":{"desc":"Displays the link to the comments for the current post ID.","params":[{"param":"$zero","desc":" String to display when no comments. ","required":"no"},{"param":"$one","desc":" String to display when only one comment is available. ","required":"no"},{"param":"$more","desc":" String to display when there are more than one comment. ","required":"no"},{"param":"$css_class","desc":" CSS class to use for comments. ","required":"no"},{"param":"$none","desc":" String to display when comments have been turned off. ","required":"no"}]},"comments_popup_script":{"desc":"Display the JS popup script to show a comment.","params":[]},"comments_rss":{"desc":"Return link to the post RSS feed.","params":[]},"comments_rss_link":{"desc":"Print RSS comment feed link.","params":[{"param":"$link_text","desc":"","required":"no"}]},"comments_template":{"desc":"Load the comment template specified in $file.","params":[{"param":"$file","desc":" The file to load. ","required":"no"},{"param":"$separate_comments","desc":" Whether to separate the comments by comment type. ","required":"no"}]},"comment_author":{"desc":"Displays the author of the current comment.","params":[{"param":"$comment_ID","desc":" WP_Comment or the ID of the comment for which to print the author.          Default current comment.","required":"no"}]},"comment_author_email":{"desc":"Display the email of the author of the current global $comment.","params":[{"param":"$comment_ID","desc":" WP_Comment or the ID of the comment for which to print the authors email.          Default current comment.","required":"no"}]},"comment_author_email_link":{"desc":"Display the html email link to the author of the current comment.","params":[{"param":"$linktext","desc":" Text to display instead of the comment authors email address. ","required":"no"},{"param":"$before","desc":" Text or HTML to display before the email link. ","required":"no"},{"param":"$after","desc":" Text or HTML to display after the email link. ","required":"no"},{"param":"$comment","desc":" Comment ID or WP_Comment object. Default is the current comment.","required":"no"}]},"comment_author_IP":{"desc":"Display the IP address of the author of the current comment.","params":[{"param":"$comment_ID","desc":" WP_Comment or the ID of the comment for which to print the authors IP address.          Default current comment.","required":"no"}]},"comment_author_link":{"desc":"Display the html link to the url of the author of the current comment.","params":[{"param":"$comment_ID","desc":" WP_Comment or the ID of the comment for which to print the authors link.          Default current comment.","required":"no"}]},"comment_author_rss":{"desc":"Display the current comment author in the feed.","params":[]},"comment_author_url":{"desc":"Display the url of the author of the current comment.","params":[{"param":"$comment_ID","desc":" WP_Comment or the ID of the comment for which to print the authors URL.          Default current comment.","required":"no"}]},"comment_author_url_link":{"desc":"Displays the HTML link of the url of the author of the current comment.","params":[{"param":"$linktext","desc":" Text to display instead of the comment authors email address. ","required":"no"},{"param":"$before","desc":" Text or HTML to display before the email link. ","required":"no"},{"param":"$after","desc":" Text or HTML to display after the email link. ","required":"no"},{"param":"$comment","desc":" Comment ID or WP_Comment object. Default is the current comment.","required":"no"}]},"comment_class":{"desc":"Generates semantic classes for each comment element.","params":[{"param":"$class","desc":" One or more classes to add to the class list. ","required":"no"},{"param":"$comment","desc":"Comment ID or WP_Comment object. Default current comment.","required":"no"},{"param":"$post_id","desc":"Post ID or WP_Post object. Default current post.","required":"no"},{"param":"$echo","desc":" Whether to cho or return the output. ","required":"no"}]},"comment_date":{"desc":"Display the comment date of the current comment.","params":[{"param":"$d","desc":" The format of the date. Default users settings.","required":"no"},{"param":"$comment_ID","desc":"WP_Comment or ID of the comment for which to print the date. Default current comment.","required":"no"}]},"comment_excerpt":{"desc":"Display the excerpt of the current comment.","params":[{"param":"$comment_ID","desc":"WP_Comment or ID of the comment for which to print the excerpt. Default current comment.","required":"yes"}]},"comment_exists":{"desc":"Determine if a comment exists based on author and date.","params":[{"param":"$comment_author","desc":"Author of the comment.","required":"yes"},{"param":"$comment_date","desc":"Date of the comment.","required":"yes"},{"param":"$timezone","desc":"Timezone. Accepts blog or gmt. ","required":"no"}]},"comment_footer_die":{"desc":"Display error message at bottom of comments.","params":[{"param":"$msg","desc":"Error Message. Assumed to contain HTML and be sanitized.","required":"yes"}]},"comment_form":{"desc":"Output a complete commenting form for use within a template.","params":[{"param":"$args","desc":"Default arguments and form fields to override. fields(array) Default comment fields, filterable by default via the comment_form_default_fields hook. author(string) Comment author field HTML. email(string) Comment author email field HTML. url(string) Comment author URL field HTML.   comment_field(string) The comment textarea field HTML. must_log_in(string) HTML element for a must be logged in to comment message. logged_in_as(string) HTML element for a logged in as [user] message. comment_notes_before(string) HTML element for a message displayed before the comment fields if the user is not logged in. Default Your email address will not be published.. comment_notes_after(string) HTML element for a message displayed after the textarea field. action(string) The comment form element action attribute. Default /wp-comments-post.php. id_form(string) The comment form element id attribute. Default commentform. id_submit(string) The comment submit element id attribute. Default submit. class_form(string) The comment form element class attribute. Default comment-form. class_submit(string) The comment submit element class attribute. Default submit. name_submit(string) The comment submit element name attribute. Default submit. title_reply(string) The translatable reply button label. Default Leave a Reply. title_reply_to(string) The translatable reply-to button label. Default Leave a Reply to %s, where %s is the author of the comment being replied to. title_reply_before(string) HTML displayed before the comment form title. Default: <h3 id=reply-title class=comment-reply-title>. title_reply_after(string) HTML displayed after the comment form title. Default: </h3>. cancel_reply_before(string) HTML displayed before the cancel reply link. cancel_reply_after(string) HTML displayed after the cancel reply link. cancel_reply_link(string) The translatable cancel reply button label. Default Cancel reply. label_submit(string) The translatable submit button label. Default Post a comment. submit_button(string) HTML format for the Submit button. Default: <input name=%1$s type=submit id=%2$s class=%3$s value=%4$s />. submit_field(string) HTML format for the markup surrounding the Submit button and comment hidden fields. Default: <p class=form-submit>%1$s %2$s</a>, where %1$s is the submit button markup and %2$s is the comment hidden fields. format(string) The comment form format. Default xhtml. Accepts xhtml, html5.  ","required":"no"},{"param":"$post_id","desc":"Post ID or WP_Post object to generate the form for. Default current post.","required":"no"}]},"comment_form_title":{"desc":"Display text based on comment reply status.","params":[{"param":"$noreplytext","desc":" Text to display when not replying to a comment. ","required":"no"},{"param":"$replytext","desc":" Text to display when replying to a comment. Accepts %s for the author of the comment being replied to.","required":"no"},{"param":"$linktoparent","desc":" Boolean to control making the authors name a link to their comment. ","required":"no"}]},"comment_guid":{"desc":"Display the feed GUID for the current comment.","params":[{"param":"$comment_id","desc":"comment object or id. Defaults to global comment object.","required":"no"}]},"comment_ID":{"desc":"Display the comment id of the current comment.","params":[]},"comment_id_fields":{"desc":"Output hidden input HTML for replying to comments.","params":[{"param":"$id","desc":" Post ID. Default current post ID.","required":"no"}]},"comment_link":{"desc":"Display the link to the comments.","params":[{"param":"$comment","desc":" Comment object or id. Defaults to global comment object.","required":"no"}]},"comment_reply_link":{"desc":"Displays the HTML content for reply to comment link.","params":[{"param":"$args","desc":" Override default options.","required":"no"},{"param":"$comment","desc":"Comment being replied to. Default current comment.","required":"no"},{"param":"$post","desc":"Post ID or WP_Post object the comment is going to be displayed on. Default current post.","required":"no"}]},"comment_text":{"desc":"Display the text of the current comment.","params":[{"param":"$comment_ID","desc":"WP_Comment or ID of the comment for which to print the text. Default current comment.","required":"yes"},{"param":"$args","desc":" An array of arguments. ","required":"no"}]},"comment_text_rss":{"desc":"Display the current comment content for use in the feeds.","params":[]},"comment_time":{"desc":"Display the comment time of the current comment.","params":[{"param":"$d","desc":" The format of the time. Default users settings.","required":"no"}]},"comment_type":{"desc":"Display the comment type of the current comment.","params":[{"param":"$commenttxt","desc":" String to display for comment type. ","required":"no"},{"param":"$trackbacktxt","desc":" String to display for trackback type. ","required":"no"},{"param":"$pingbacktxt","desc":" String to display for pingback type. ","required":"no"}]},"compression_test":{"desc":"Test support for compressing JavaScript from PHP","params":[]},"confirm_another_blog_signup":{"desc":"Confirm a new site signup.","params":[{"param":"$domain","desc":"The domain URL.","required":"yes"},{"param":"$path","desc":"The site root path.","required":"yes"},{"param":"$blog_title","desc":"The site title.","required":"yes"},{"param":"$user_name","desc":"The username.","required":"yes"},{"param":"$user_email","desc":"The users email address.","required":"no"},{"param":"$meta","desc":"Any additional meta from the add_signup_meta filter in validate_blog_signup().","required":"no"},{"param":"$blog_id","desc":"The site ID.","required":"yes"}]},"confirm_blog_signup":{"desc":"New site signup confirmation","params":[{"param":"$domain","desc":"The domain URL","required":"yes"},{"param":"$path","desc":"The site root path","required":"yes"},{"param":"$blog_title","desc":"The new site title","required":"yes"},{"param":"$user_name","desc":"The users username","required":"no"},{"param":"$user_email","desc":"The users email address","required":"no"},{"param":"$meta","desc":"Any additional meta from the add_signup_meta filter in validate_blog_signup()","required":"no"}]},"confirm_delete_users":{"desc":"","params":[{"param":"$users","desc":"","required":"yes"}]},"confirm_user_signup":{"desc":"New user signup confirmation","params":[{"param":"$user_name","desc":"The username","required":"yes"},{"param":"$user_email","desc":"The users email address","required":"yes"}]},"content_url":{"desc":"Retrieves the URL to the content directory.","params":[{"param":"$path","desc":" Path relative to the content URL. ","required":"no"}]},"convert_chars":{"desc":"Converts lone & characters into `&` (a.k.a. `&`)","params":[{"param":"$content","desc":"String of characters to be converted.","required":"yes"},{"param":"$deprecated","desc":"Not used.","required":"no"}]},"convert_invalid_entities":{"desc":"Converts invalid Unicode references range to valid range.","params":[{"param":"$content","desc":"String with entities that need converting.","required":"yes"}]},"convert_smilies":{"desc":"Convert text equivalent of smilies to images.","params":[{"param":"$text","desc":"Content to convert smilies from text.","required":"yes"}]},"convert_to_screen":{"desc":"Convert a screen string to a screen object","params":[{"param":"$hook_name","desc":"The hook name (also known as the hook suffix) used to determine the screen.","required":"yes"}]},"copy_dir":{"desc":"Copies a directory from one location to another via the WordPress Filesystem Abstraction.","params":[{"param":"$from","desc":"source directory","required":"yes"},{"param":"$to","desc":"destination directory","required":"yes"},{"param":"$skip_list","desc":"a list of files/folders to skip copying","required":"no"}]},"core_update_footer":{"desc":"","params":[{"param":"$msg","desc":"","required":"no"}]},"core_upgrade_preamble":{"desc":"Display upgrade WordPress for downloading latest or upgrading automatically form.","params":[]},"count_many_users_posts":{"desc":"Number of posts written by a list of users.","params":[{"param":"$users","desc":"Array of user IDs.","required":"yes"},{"param":"$post_type","desc":" Single post type or array of post types to check. Defaults to post.","required":"no"},{"param":"$public_only","desc":" Only return counts for public posts. Defaults to false.","required":"no"}]},"count_users":{"desc":"Count number of users who have each of the user roles.","params":[{"param":"$strategy","desc":"time or memory","required":"no"}]},"count_user_posts":{"desc":"Number of posts user has written.","params":[{"param":"$userid","desc":"User ID.","required":"yes"},{"param":"$post_type","desc":" Single post type or array of post types to count the number of posts for. ","required":"no"},{"param":"$public_only","desc":" Whether to only return counts for public posts. ","required":"no"}]},"create_empty_blog":{"desc":"Create an empty blog.","params":[{"param":"$domain","desc":"The new blogs domain.","required":"yes"},{"param":"$path","desc":"The new blogs path.","required":"yes"},{"param":"$weblog_title","desc":"The new blogs title.","required":"yes"},{"param":"$site_id","desc":" Defaults to 1.","required":"no"}]},"create_initial_post_types":{"desc":"Creates the initial post types when ‘init’ action is fired.","params":[]},"create_initial_rest_routes":{"desc":"Registers default REST API routes.","params":[]},"create_initial_taxonomies":{"desc":"Creates the initial taxonomies.","params":[]},"create_user":{"desc":"An alias of wp_create_user().","params":[{"param":"$username","desc":"The users username.","required":"yes"},{"param":"$password","desc":"The users password.","required":"yes"},{"param":"$email","desc":"The users email.","required":"yes"}]},"current_action":{"desc":"Retrieve the name of the current action.","params":[]},"current_filter":{"desc":"Retrieve the name of the current filter or action.","params":[]},"current_theme_info":{"desc":"Retrieves information on the current active theme.","params":[]},"current_theme_supports":{"desc":"Checks a theme’s support for a given feature","params":[{"param":"$feature","desc":"the feature being checked","required":"yes"}]},"current_time":{"desc":"Retrieve the current time based on specified type.","params":[{"param":"$type","desc":"Type of time to retrieve. Accepts mysql, timestamp, or PHP date format string (e.g. Y-m-d).","required":"yes"},{"param":"$gmt","desc":" Whether to use GMT timezone. Default false.","required":"no"}]},"current_user_can":{"desc":"Whether the current user has a specific capability.","params":[{"param":"$capability","desc":"Capability name.","required":"yes"},{"param":"$object_id","desc":" ID of the specific object to check against if $capability is a meta cap. Meta capabilities, e.g. edit_post, edit_user, etc., are capabilities used by map_meta_cap() to map to other primitive capabilities, e.g. edit_posts, edit_others_posts, etc. Accessed via func_get_args() and passed to WP_User::has_cap(), then map_meta_cap().","required":"no"}]},"current_user_can_for_blog":{"desc":"Whether current user has a capability or role for a given site.","params":[{"param":"$blog_id","desc":"Site ID.","required":"yes"},{"param":"$capability","desc":"Capability or role name.","required":"yes"}]},"customize_themes_print_templates":{"desc":"Print JS templates for the theme-browsing UI in the Customizer.","params":[]},"dashboard_browser_nag_class":{"desc":"","params":[{"param":"$classes","desc":"","required":"yes"}]},"date_i18n":{"desc":"Retrieve the date in localized format, based on timestamp.","params":[{"param":"$dateformatstring","desc":"Format to display the date.","required":"yes"},{"param":"$unixtimestamp","desc":" Unix timestamp. ","required":"no"},{"param":"$gmt","desc":" Whether to use GMT timezone. ","required":"no"}]},"dbDelta":{"desc":"Modifies the database based on specified SQL statements.","params":[{"param":"$queries","desc":" The query to run. Can be multiple queries in an array, or a string of queries separated by semicolons. ","required":"no"},{"param":"$execute","desc":" Whether or not to execute the query right away. ","required":"no"}]},"deactivate_plugins":{"desc":"Deactivate a single plugin or multiple plugins.","params":[{"param":"$plugins","desc":"Single plugin or list of plugins to deactivate.","required":"yes"},{"param":"$silent","desc":"Prevent calling deactivation hooks. Default is false.","required":"no"},{"param":"$network_wide","desc":"Whether to deactivate the plugin for all sites in the network.  A value of null (the default) will deactivate plugins for both the site and the network.","required":"no"}]},"deactivate_sitewide_plugin":{"desc":"Deprecated functionality for deactivating a network-only plugin.","params":[]},"dead_db":{"desc":"Load custom DB error or display WordPress DB error.","params":[]},"debug_fclose":{"desc":"Close the debugging file handle.","params":[{"param":"$fp","desc":"Unused.","required":"yes"}]},"debug_fopen":{"desc":"Open the file handle for debugging.","params":[{"param":"$filename","desc":"File name.","required":"yes"},{"param":"$mode","desc":"Type of access you required to the stream.","required":"yes"}]},"debug_fwrite":{"desc":"Write contents to the file used for debugging.","params":[{"param":"$fp","desc":"Unused.","required":"yes"},{"param":"$string","desc":"Message to log.","required":"yes"}]},"default_password_nag":{"desc":"","params":[]},"default_password_nag_edit_user":{"desc":"","params":[{"param":"$user_ID","desc":"","required":"yes"},{"param":"$old_data","desc":"","required":"yes"}]},"default_password_nag_handler":{"desc":"","params":[{"param":"$errors","desc":"Deprecated.","required":"no"}]},"default_topic_count_scale":{"desc":"Default topic count scaling for tag links","params":[{"param":"$count","desc":"number of posts with that tag","required":"yes"}]},"default_topic_count_text":{"desc":"Old callback for tag link tooltips.","params":[{"param":"$count","desc":"Number of topics.","required":"yes"}]},"delete_all_user_settings":{"desc":"Delete the user settings of the current user.","params":[]},"delete_blog_option":{"desc":"Removes option by name for a given blog id. Prevents removal of protected WordPress options.","params":[{"param":"$id","desc":"A blog ID. Can be null to refer to the current blog.","required":"yes"},{"param":"$option","desc":"Name of option to remove. Expected to not be SQL-escaped.","required":"yes"}]},"delete_comment_meta":{"desc":"Remove metadata matching criteria from a comment.","params":[{"param":"$comment_id","desc":"comment ID","required":"yes"},{"param":"$meta_key","desc":"Metadata name.","required":"yes"},{"param":"$meta_value","desc":" Metadata value.","required":"no"}]},"delete_get_calendar_cache":{"desc":"Purge the cached results of get_calendar.","params":[]},"delete_meta":{"desc":"Delete post meta data by meta ID.","params":[{"param":"$mid","desc":"","required":"yes"}]},"delete_metadata":{"desc":"Delete metadata for the specified object.","params":[{"param":"$meta_type","desc":"Type of object metadata is for (e.g., comment, post, or user)","required":"yes"},{"param":"$object_id","desc":"ID of the object metadata is for","required":"yes"},{"param":"$meta_key","desc":"Metadata key","required":"yes"},{"param":"$meta_value","desc":" Metadata value. Must be serializable if non-scalar. If specified, only delete metadata entries with this value. Otherwise, delete all entries with the specified meta_key. Pass null,false`, or an empty string to skip this check. (For backward compatibility, it is not possible to pass an empty string to delete those entries with an empty string for a value.)","required":"no"},{"param":"$delete_all","desc":" If true, delete matching metadata entries for all objects, ignoring the specified object_id. Otherwise, only delete matching metadata entries for the specified object_id.","required":"no"}]},"delete_metadata_by_mid":{"desc":"Delete meta data by meta ID","params":[{"param":"$meta_type","desc":"Type of object metadata is for (e.g., comment, post, term, or user).","required":"yes"},{"param":"$meta_id","desc":"ID for a specific meta row","required":"yes"}]},"delete_network_option":{"desc":"Removes a network option by name.","params":[{"param":"$network_id","desc":"ID of the network. Can be null to default to the current network ID.","required":"yes"},{"param":"$option","desc":"Name of option to remove. Expected to not be SQL-escaped.","required":"yes"}]},"delete_option":{"desc":"Removes option by name. Prevents removal of protected WordPress options.","params":[{"param":"$option","desc":"Name of option to remove. Expected to not be SQL-escaped.","required":"yes"}]},"delete_plugins":{"desc":"Remove directory and files of a plugin for a list of plugins.","params":[{"param":"$plugins","desc":"List of plugins to delete.","required":"yes"},{"param":"$deprecated","desc":"Deprecated.","required":"no"}]},"delete_post_meta":{"desc":"Remove metadata matching criteria from a post.","params":[{"param":"$post_id","desc":"Post ID.","required":"yes"},{"param":"$meta_key","desc":"Metadata name.","required":"yes"},{"param":"$meta_value","desc":" Metadata value. Must be serializable if non-scalar. ","required":"no"}]},"delete_post_meta_by_key":{"desc":"Delete everything from post meta matching meta key.","params":[{"param":"$post_meta_key","desc":"Key to search for when deleting.","required":"yes"}]},"delete_post_thumbnail":{"desc":"Remove a post thumbnail.","params":[{"param":"$post","desc":"Post ID or post object where thumbnail should be removed from.","required":"yes"}]},"delete_site_option":{"desc":"Removes a option by name for the current network.","params":[{"param":"$option","desc":"Name of option to remove. Expected to not be SQL-escaped.","required":"yes"}]},"delete_site_transient":{"desc":"Delete a site transient.","params":[{"param":"$transient","desc":"Transient name. Expected to not be SQL-escaped.","required":"yes"}]},"delete_term_meta":{"desc":"Removes metadata matching criteria from a term.","params":[{"param":"$term_id","desc":"Term ID.","required":"yes"},{"param":"$meta_key","desc":"Metadata name.","required":"yes"},{"param":"$meta_value","desc":" Metadata value. If provided, rows will only be removed that match the value.","required":"no"}]},"delete_theme":{"desc":"Remove a theme","params":[{"param":"$stylesheet","desc":"Stylesheet of the theme to delete","required":"yes"},{"param":"$redirect","desc":"Redirect to page when complete.","required":"no"}]},"delete_transient":{"desc":"Delete a transient.","params":[{"param":"$transient","desc":"Transient name. Expected to not be SQL-escaped.","required":"yes"}]},"delete_usermeta":{"desc":"Remove user meta data.","params":[{"param":"$user_id","desc":"User ID.","required":"yes"},{"param":"$meta_key","desc":"Metadata key.","required":"yes"},{"param":"$meta_value","desc":"Metadata value.","required":"no"}]},"delete_users_add_js":{"desc":"","params":[]},"delete_user_meta":{"desc":"Remove metadata matching criteria from a user.","params":[{"param":"$user_id","desc":"User ID","required":"yes"},{"param":"$meta_key","desc":"Metadata name.","required":"yes"},{"param":"$meta_value","desc":" Metadata value.","required":"no"}]},"delete_user_option":{"desc":"Delete user option with global blog capability.","params":[{"param":"$user_id","desc":"User ID","required":"yes"},{"param":"$option_name","desc":"User option name.","required":"yes"},{"param":"$global","desc":" Whether option name is global or blog specific. Default false (blog specific).","required":"no"}]},"delete_user_setting":{"desc":"Delete user interface settings.","params":[{"param":"$names","desc":"The name or array of names of the setting to be deleted.","required":"yes"}]},"deslash":{"desc":"Filters for content to remove unnecessary slashes.","params":[{"param":"$content","desc":"The content to modify.","required":"yes"}]},"did_action":{"desc":"Retrieve the number of times an action is fired.","params":[{"param":"$tag","desc":"The name of the action hook.","required":"yes"}]},"disabled":{"desc":"Outputs the html disabled attribute.","params":[{"param":"$disabled","desc":"One of the values to compare","required":"yes"},{"param":"$current","desc":"(true) The other value to compare if not just true","required":"no"},{"param":"$echo","desc":"Whether to echo or just return the string","required":"no"}]},"discover_pingback_server_uri":{"desc":"Finds a pingback server URI based on the given URL.","params":[{"param":"$url","desc":"URL to ping.","required":"yes"},{"param":"$deprecated","desc":"Not Used.","required":"no"}]},"dismissed_updates":{"desc":"","params":[]},"dismiss_core_update":{"desc":"","params":[{"param":"$update","desc":"","required":"yes"}]},"display_header":{"desc":"Display install header.","params":[{"param":"$body_classes","desc":"","required":"no"}]},"display_header_text":{"desc":"Whether to display the header text.","params":[]},"display_plugins_table":{"desc":"Display plugin content based on plugin list.","params":[]},"display_setup_form":{"desc":"Display installer setup form.","params":[{"param":"$error","desc":"","required":"no"}]},"display_space_usage":{"desc":"Displays the amount of disk space used by the current site. Not used in core.","params":[]},"display_theme":{"desc":"Prints a theme on the Install Themes pages.","params":[{"param":"$theme","desc":"","required":"yes"}]},"display_themes":{"desc":"Display theme content based on theme list.","params":[]},"documentation_link":{"desc":"Unused Admin function.","params":[]},"doing_action":{"desc":"Retrieve the name of an action currently being processed.","params":[{"param":"$action","desc":" Action to check. Defaults to null, which checks if any action is currently being run.","required":"no"}]},"doing_filter":{"desc":"Retrieve the name of a filter currently being processed.","params":[{"param":"$filter","desc":" Filter to check. Defaults to null, which checks if any filter is currently being run.","required":"no"}]},"dolly_css":{"desc":"","params":[]},"domain_exists":{"desc":"Check whether a blogname is already taken.","params":[{"param":"$domain","desc":"The domain to be checked.","required":"yes"},{"param":"$path","desc":"The path to be checked.","required":"yes"},{"param":"$site_id","desc":" Relevant only on multi-network installs.","required":"no"}]},"download_url":{"desc":"Downloads a URL to a local temporary file using the WordPress HTTP Class.","params":[{"param":"$url","desc":"the URL of the file to download","required":"yes"},{"param":"$timeout","desc":"The timeout for the request to download the file default 300 seconds","required":"no"}]},"do_accordion_sections":{"desc":"Meta Box Accordion Template Function","params":[{"param":"$screen","desc":"The screen identifier.","required":"yes"},{"param":"$context","desc":"The meta box context.","required":"yes"},{"param":"$object","desc":"gets passed to the section callback function as first parameter.","required":"yes"}]},"do_action":{"desc":"Execute functions hooked on a specific action hook.","params":[{"param":"$tag","desc":"The name of the action to be executed.","required":"yes"},{"param":"$arg,...","desc":" Additional arguments which are passed on to the functions hooked to the action. Default empty.","required":"no"}]},"do_action_deprecated":{"desc":"Fires functions attached to a deprecated action hook.","params":[{"param":"$tag","desc":"The name of the action hook.","required":"yes"},{"param":"$args","desc":"Array of additional function arguments to be passed to do_action().","required":"yes"},{"param":"$version","desc":"The version of WordPress that deprecated the hook.","required":"yes"},{"param":"$replacement","desc":" The hook that should have been used.","required":"no"},{"param":"$message","desc":" A message regarding the change.","required":"no"}]},"do_action_ref_array":{"desc":"Execute functions hooked on a specific action hook, specifying arguments in an array.","params":[{"param":"$tag","desc":"The name of the action to be executed.","required":"yes"},{"param":"$args","desc":"The arguments supplied to the functions hooked to $tag.","required":"yes"}]},"do_activate_header":{"desc":"Adds an action hook specific to this page that fires on wp_head","params":[]},"do_all_pings":{"desc":"Perform all pingbacks, enclosures, trackbacks, and send to pingback services.","params":[]},"do_core_upgrade":{"desc":"Upgrade WordPress core display.","params":[{"param":"$reinstall","desc":"","required":"no"}]},"do_dismiss_core_update":{"desc":"","params":[]},"do_enclose":{"desc":"Check content for video and audio links to add as enclosures.","params":[{"param":"$content","desc":"Post Content.","required":"yes"},{"param":"$post_ID","desc":"Post ID.","required":"yes"}]},"do_feed":{"desc":"Load the feed template from the use of an action hook.","params":[]},"do_feed_atom":{"desc":"Load either Atom comment feed or Atom posts feed.","params":[{"param":"$for_comments","desc":"True for the comment feed, false for normal feed.","required":"yes"}]},"do_feed_rdf":{"desc":"Load the RDF RSS 0.91 Feed template.","params":[]},"do_feed_rss":{"desc":"Load the RSS 1.0 Feed Template.","params":[]},"do_feed_rss2":{"desc":"Load either the RSS2 comment feed or the RSS2 posts feed.","params":[{"param":"$for_comments","desc":"True for the comment feed, false for normal feed.","required":"yes"}]},"do_meta_boxes":{"desc":"Meta-Box template function","params":[{"param":"$screen","desc":"Screen identifier","required":"yes"},{"param":"$context","desc":"box context","required":"yes"},{"param":"$object","desc":"gets passed to the box callback function as first parameter","required":"yes"}]},"do_robots":{"desc":"Display the robots.txt file content.","params":[]},"do_settings_fields":{"desc":"Print out the settings fields for a particular settings section","params":[{"param":"$page","desc":"Slug title of the admin page whos settings fields you want to show.","required":"yes"},{"param":"$section","desc":"Slug title of the settings section whos fields you want to show.","required":"yes"}]},"do_settings_sections":{"desc":"Prints out all settings sections added to a particular settings page","params":[{"param":"$page","desc":"The slug name of the page whose settings sections you want to output","required":"yes"}]},"do_shortcode":{"desc":"Search content for shortcodes and filter shortcodes through their hooks.","params":[{"param":"$content","desc":"Content to search for shortcodes.","required":"yes"},{"param":"$ignore_html","desc":"When true, shortcodes inside HTML elements will be skipped.","required":"no"}]},"do_shortcodes_in_html_tags":{"desc":"Search only inside HTML elements for shortcodes and process them.","params":[{"param":"$content","desc":"Content to search for shortcodes","required":"yes"},{"param":"$ignore_html","desc":"When true, all square braces inside elements will be encoded.","required":"yes"},{"param":"$tagnames","desc":"List of shortcodes to find.","required":"yes"}]},"do_shortcode_tag":{"desc":"Regular Expression callable for do_shortcode() for calling shortcode hook.","params":[{"param":"$m","desc":"Regular expression match array","required":"yes"}]},"do_signup_header":{"desc":"Prints signup_header via wp_head","params":[]},"do_trackbacks":{"desc":"Perform trackbacks.","params":[{"param":"$post_id","desc":"Post object or ID to do trackbacks on.","required":"yes"}]},"do_undismiss_core_update":{"desc":"","params":[]},"dropdown_categories":{"desc":"Legacy function used to generate the categories checklist control.","params":[{"param":"$default","desc":"Unused.","required":"yes"},{"param":"$parent","desc":"Unused.","required":"yes"},{"param":"$popular_ids","desc":"Unused.","required":"no"}]},"dropdown_cats":{"desc":"Deprecated method for generating a drop-down of categories.","params":[{"param":"$optionall","desc":"","required":"no"},{"param":"$all","desc":"","required":"no"},{"param":"$orderby","desc":"","required":"no"},{"param":"$order","desc":"","required":"no"},{"param":"$show_last_update","desc":"","required":"yes"},{"param":"$show_count","desc":"","required":"yes"},{"param":"$hide_empty","desc":"","required":"no"},{"param":"$optionnone","desc":"","required":"no"},{"param":"$selected","desc":"","required":"yes"},{"param":"$exclude","desc":"","required":"yes"}]},"dropdown_link_categories":{"desc":"Legacy function used to generate a link categories checklist control.","params":[{"param":"$default","desc":"Unused.","required":"yes"}]},"drop_index":{"desc":"Drops a specified index from a table.","params":[{"param":"$table","desc":"Database table name.","required":"yes"},{"param":"$index","desc":"Index name to drop.","required":"yes"}]},"dynamic_sidebar":{"desc":"Display dynamic sidebar.","params":[{"param":"$index","desc":" Index, name or ID of dynamic sidebar.","required":"no"}]},"edit_bookmark_link":{"desc":"Display edit bookmark link anchor content.","params":[{"param":"$link","desc":" Anchor text. ","required":"no"},{"param":"$before","desc":" Display before edit link. ","required":"no"},{"param":"$after","desc":" Display after edit link. ","required":"no"},{"param":"$bookmark","desc":" Bookmark ID. Default is the current bookmark.","required":"no"}]},"edit_comment":{"desc":"Update a comment with values provided in $_POST.","params":[]},"edit_comment_link":{"desc":"Displays the edit comment link with formatting.","params":[{"param":"$text","desc":" Anchor text. If null, default is Edit This. ","required":"no"},{"param":"$before","desc":" Display before edit link. ","required":"no"},{"param":"$after","desc":" Display after edit link. ","required":"no"}]},"edit_form_image_editor":{"desc":"Displays the image and editor in the post editor","params":[{"param":"$post","desc":"A post object.","required":"yes"}]},"edit_link":{"desc":"Updates or inserts a link using values provided in $_POST.","params":[{"param":"$link_id","desc":" ID of the link to edit. Default 0.","required":"no"}]},"edit_post":{"desc":"Update an existing post with values provided in $_POST.","params":[{"param":"$post_data","desc":"","required":"no"}]},"edit_post_link":{"desc":"Displays the edit post link for post.","params":[{"param":"$text","desc":" Anchor text. If null, default is Edit This. ","required":"no"},{"param":"$before","desc":" Display before edit link. ","required":"no"},{"param":"$after","desc":" Display after edit link. ","required":"no"},{"param":"$id","desc":" Post ID. Default is the ID of the global $post.","required":"no"},{"param":"$class","desc":" Add custom class to link. ","required":"no"}]},"edit_tag_link":{"desc":"Displays or retrieves the edit link for a tag with formatting.","params":[{"param":"$link","desc":" Anchor text. ","required":"no"},{"param":"$before","desc":" Display before edit link. ","required":"no"},{"param":"$after","desc":" Display after edit link. ","required":"no"},{"param":"$tag","desc":" Term object. If null, the queried object will be inspected. ","required":"no"}]},"edit_term_link":{"desc":"Displays or retrieves the edit term link with formatting.","params":[{"param":"$link","desc":" Anchor text. ","required":"no"},{"param":"$before","desc":" Display before edit link. ","required":"no"},{"param":"$after","desc":" Display after edit link. ","required":"no"},{"param":"$term","desc":" Term object. If null, the queried object will be inspected. ","required":"no"},{"param":"$echo","desc":" Whether or not to echo the return. ","required":"no"}]},"edit_user":{"desc":"Edit user settings based on contents of $_POST","params":[{"param":"$user_id","desc":" User ID.","required":"no"}]},"email_exists":{"desc":"Checks whether the given email exists.","params":[{"param":"$email","desc":"Email.","required":"yes"}]},"endElement":{"desc":"XML callback function that is called at the end of a XML tag.","params":[{"param":"$parser","desc":"XML Parser resource.","required":"yes"},{"param":"$tagName","desc":"XML tag name.","required":"yes"}]},"enqueue_comment_hotkeys_js":{"desc":"","params":[]},"enqueue_embed_scripts":{"desc":"Enqueue embed iframe default CSS and JS & fire do_action(‘enqueue_embed_scripts’)","params":[]},"ent2ncr":{"desc":"Converts named entities into numbered entities.","params":[{"param":"$text","desc":"The text within which entities will be converted.","required":"yes"}]},"esc_attr":{"desc":"Escaping for HTML attributes.","params":[{"param":"$text","desc":"","required":"yes"}]},"esc_attr_e":{"desc":"Display translated text that has been escaped for safe use in an attribute.","params":[{"param":"$text","desc":"Text to translate.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"esc_attr_x":{"desc":"Translate string with gettext context, and escapes it for safe use in an attribute.","params":[{"param":"$text","desc":"Text to translate.","required":"yes"},{"param":"$context","desc":"Context information for the translators.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"esc_attr__":{"desc":"Retrieve the translation of $text and escapes it for safe use in an attribute.","params":[{"param":"$text","desc":"Text to translate.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"esc_html":{"desc":"Escaping for HTML blocks.","params":[{"param":"$text","desc":"","required":"yes"}]},"esc_html_e":{"desc":"Display translated text that has been escaped for safe use in HTML output.","params":[{"param":"$text","desc":"Text to translate.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"esc_html_x":{"desc":"Translate string with gettext context, and escapes it for safe use in HTML output.","params":[{"param":"$text","desc":"Text to translate.","required":"yes"},{"param":"$context","desc":"Context information for the translators.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"esc_html__":{"desc":"Retrieve the translation of $text and escapes it for safe use in HTML output.","params":[{"param":"$text","desc":"Text to translate.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"esc_js":{"desc":"Escape single quotes, htmlspecialchar ” &, and fix line endings.","params":[{"param":"$text","desc":"The text to be escaped.","required":"yes"}]},"esc_sql":{"desc":"Escapes data for use in a MySQL query.","params":[{"param":"$data","desc":"Unescaped data","required":"yes"}]},"esc_textarea":{"desc":"Escaping for textarea values.","params":[{"param":"$text","desc":"","required":"yes"}]},"esc_url":{"desc":"Checks and cleans a URL.","params":[{"param":"$url","desc":"The URL to be cleaned.","required":"yes"},{"param":"$protocols","desc":" An array of acceptable protocols.   Defaults to return value of wp_allowed_protocols()","required":"no"},{"param":"$_context","desc":"Private. Use esc_url_raw() for database usage.","required":"no"}]},"esc_url_raw":{"desc":"Performs esc_url() for database usage.","params":[{"param":"$url","desc":"The URL to be cleaned.","required":"yes"},{"param":"$protocols","desc":"An array of acceptable protocols.","required":"no"}]},"export_add_js":{"desc":"Display JavaScript on the page.","params":[]},"export_date_options":{"desc":"Create the date options fields for exporting a given post type.","params":[{"param":"$post_type","desc":"The post type. ","required":"no"}]},"export_wp":{"desc":"Generates the WXR export file for download.","params":[{"param":"$args","desc":"Arguments for generating the WXR export file for download. content(string) Type of content to export. If set, only the post content of this post type will be exported. Accepts all, post, page, attachment, or a defined custom post. If an invalid custom post type is supplied, every post type for which can_export is enabled will be exported instead. If a valid custom post type is supplied but can_export is disabled, then posts will be exported instead. When all is supplied, only post types with can_export enabled will be exported. Default all. author(string) Author to export content for. Only used when $content is post, page, or attachment. Accepts false (all) or a specific author ID. Default false (all). category(string) Category (slug) to export content for. Used only when $content is post. If set, only post content assigned to `$category will be exported. Accepts false or a specific category slug. Default is false (all categories). start_date(string) Start date to export content from. Expected date format is Y-m-d. Used only when $content is post, page or attachment. Default false (since the beginning of time). end_date(string) End date to export content to. Expected date format is Y-m-d. Used only when $content is post, page or attachment. Default false (latest publish date). status(string) Post status to export posts for. Used only when $content is post or page. Accepts false (all statuses except auto-draft), or a specific status, i.e. publish, pending, draft, auto-draft, future, private, inherit, or trash. Default false (all statuses except auto-draft).  ","required":"no"}]},"extract_from_markers":{"desc":"Extracts strings from between the BEGIN and END markers in the .htaccess file.","params":[{"param":"$filename","desc":"","required":"yes"},{"param":"$marker","desc":"","required":"yes"}]},"favorite_actions":{"desc":"Favorite actions were deprecated in version 3.2. Use the admin bar instead.","params":[]},"feed_content_type":{"desc":"Return the content type for specified feed type.","params":[{"param":"$type","desc":"Type of feed. Possible values include rss, rss2, atom, and rdf.","required":"no"}]},"feed_links":{"desc":"Display the links to the general feeds.","params":[{"param":"$args","desc":"arguments.","required":"no"}]},"feed_links_extra":{"desc":"Display the links to the extra feeds such as category feeds.","params":[{"param":"$args","desc":"arguments.","required":"no"}]},"fetch_feed":{"desc":"Build SimplePie object based on RSS or Atom feed from URL.","params":[{"param":"$url","desc":"URL of feed to retrieve. If an array of URLs, the feeds are merged using SimplePies multifeed feature. See also ​<a href=http://simplepie.org/wiki/faq/typical_multifeed_gotchas>http://simplepie.org/wiki/faq/typical_multifeed_gotchas</a>","required":"yes"}]},"fetch_rss":{"desc":"Build Magpie object based on RSS from URL.","params":[{"param":"$url","desc":"URL to retrieve feed","required":"yes"}]},"file_is_displayable_image":{"desc":"Validate that file is suitable for displaying within a web page.","params":[{"param":"$path","desc":"File path to test.","required":"yes"}]},"file_is_valid_image":{"desc":"Validate that file is an image.","params":[{"param":"$path","desc":"File path to test if valid image.","required":"yes"}]},"filter_default_option":{"desc":"Filter the default value for the option.","params":[{"param":"$default","desc":"Existing default value to return.","required":"yes"},{"param":"$option","desc":"Option name.","required":"yes"},{"param":"$passed_default","desc":"Was get_option() passed a default value?","required":"yes"}]},"filter_SSL":{"desc":"Formats a URL to use https.","params":[{"param":"$url","desc":"URL","required":"yes"}]},"find_core_auto_update":{"desc":"Gets the best available (and enabled) Auto-Update for WordPress Core.","params":[]},"find_core_update":{"desc":"","params":[{"param":"$version","desc":"","required":"yes"},{"param":"$locale","desc":"","required":"yes"}]},"find_posts_div":{"desc":"Outputs the modal window used for attaching media to posts or pages in the media-listing screen.","params":[{"param":"$found_action","desc":"","required":"no"}]},"fix_import_form_size":{"desc":"Get the remaining upload space for this site.","params":[{"param":"$size","desc":"Current max size in bytes","required":"yes"}]},"fix_phpmailer_messageid":{"desc":"Correct From host on outgoing mail to match the site domain","params":[{"param":"$phpmailer","desc":"The PHPMailer instance, passed by reference.","required":"yes"}]},"floated_admin_avatar":{"desc":"Add avatars to relevant places in admin, or try to.","params":[{"param":"$name","desc":"User name.","required":"yes"}]},"flush_rewrite_rules":{"desc":"Remove rewrite rules and then recreate rewrite rules.","params":[{"param":"$hard","desc":"Whether to update .htaccess (hard flush) or just update   rewrite_rules transient (soft flush). Default is true (hard).","required":"no"}]},"force_balance_tags":{"desc":"Balances tags of string using a modified stack.","params":[{"param":"$text","desc":"Text to be balanced.","required":"yes"}]},"force_ssl_admin":{"desc":"Whether to force SSL used for the Administration Screens.","params":[{"param":"$force","desc":" Whether to force SSL in admin screens. ","required":"no"}]},"force_ssl_content":{"desc":"Whether to force SSL on content.","params":[{"param":"$force","desc":"","required":"no"}]},"force_ssl_login":{"desc":"Whether SSL login should be forced.","params":[{"param":"$force","desc":"Whether to force SSL login. ","required":"no"}]},"format_code_lang":{"desc":"Returns the language for a language code.","params":[{"param":"$code","desc":" The two-letter language code. ","required":"no"}]},"format_for_editor":{"desc":"Formats text for the editor.","params":[{"param":"$text","desc":"The text to be formatted.","required":"yes"},{"param":"$default_editor","desc":"The default editor for the current user. It is usually either html or tinymce.","required":"no"}]},"format_to_edit":{"desc":"Acts on text which is about to be edited.","params":[{"param":"$content","desc":"The text about to be edited.","required":"yes"},{"param":"$rich_text","desc":" Whether $content should be considered rich text, in which case it would not be passed through esc_textarea(). ","required":"no"}]},"format_to_post":{"desc":"Formerly used to escape strings before inserting into the DB.","params":[{"param":"$content","desc":"The text to format.","required":"yes"}]},"form_option":{"desc":"Print option value after sanitizing for forms.","params":[{"param":"$option","desc":"Option name.","required":"yes"}]},"funky_javascript_callback":{"desc":"Callback used to change %uXXXX to &#YYY; syntax","params":[{"param":"$matches","desc":"Single Match","required":"yes"}]},"funky_javascript_fix":{"desc":"Fixes JavaScript bugs in browsers.","params":[{"param":"$text","desc":"Text to be made safe.","required":"yes"}]},"gallery_shortcode":{"desc":"Builds the Gallery shortcode output.","params":[{"param":"$attr","desc":"Attributes of the gallery shortcode. order(string) Order of the images in the gallery. Default ASC. Accepts ASC, DESC. orderby(string) The field to use when ordering the images. Default menu_order ID. Accepts any valid SQL ORDERBY statement. id(int) Post ID. itemtag(string) HTML tag to use for each image in the gallery. Default dl, or figure when the theme registers HTML5 gallery support. icontag(string) HTML tag to use for each images icon. Default dt, or div when the theme registers HTML5 gallery support. captiontag(string) HTML tag to use for each images caption. Default dd, or figcaption when the theme registers HTML5 gallery support. columns(int) Number of columns of images to display. Default 3. size(string|array) Size of the images to display. Accepts any valid image size, or an array of width and height values in pixels (in that order). Default thumbnail. ids(string) A comma-separated list of IDs of attachments to display. Default empty. include(string) A comma-separated list of IDs of attachments to include. Default empty. exclude(string) A comma-separated list of IDs of attachments to exclude. Default empty. link(string) What to link each image to. Default empty (links to the attachment page). Accepts file, none.  ","required":"yes"}]},"gd_edit_image_support":{"desc":"Check if the installed version of GD supports particular image type","params":[{"param":"$mime_type","desc":"","required":"yes"}]},"generate_random_password":{"desc":"Generates a random password.","params":[{"param":"$len","desc":" The length of password to generate. ","required":"no"}]},"generic_ping":{"desc":"Sends pings to all of the ping site services.","params":[{"param":"$post_id","desc":"Post ID.","required":"yes"}]},"get_404_template":{"desc":"Retrieve path of 404 template in current or parent template.","params":[]},"get_active_blog_for_user":{"desc":"Get one of a user’s active blogs","params":[{"param":"$user_id","desc":"The unique ID of the user","required":"yes"}]},"get_adjacent_post":{"desc":"Retrieves the adjacent post.","params":[{"param":"$in_same_term","desc":" Whether post should be in a same taxonomy term. ","required":"no"},{"param":"$excluded_terms","desc":" Array or comma-separated list of excluded term IDs. ","required":"no"},{"param":"$previous","desc":" Whether to retrieve previous post. Default true","required":"no"},{"param":"$taxonomy","desc":" Taxonomy, if $in_same_term is true. ","required":"no"}]},"get_adjacent_post_link":{"desc":"Retrieves the adjacent post link.","params":[{"param":"$format","desc":"Link anchor format.","required":"yes"},{"param":"$link","desc":"Link permalink format.","required":"yes"},{"param":"$in_same_term","desc":" Whether link should be in a same taxonomy term. ","required":"no"},{"param":"$excluded_terms","desc":" Array or comma-separated list of excluded terms IDs. ","required":"no"},{"param":"$previous","desc":" Whether to display link to previous or next post. ","required":"no"},{"param":"$taxonomy","desc":" Taxonomy, if $in_same_term is true. ","required":"no"}]},"get_adjacent_post_rel_link":{"desc":"Retrieves the adjacent post relational link.","params":[{"param":"$title","desc":" Link title format. ","required":"no"},{"param":"$in_same_term","desc":" Whether link should be in a same taxonomy term. ","required":"no"},{"param":"$excluded_terms","desc":" Array or comma-separated list of excluded term IDs. ","required":"no"},{"param":"$previous","desc":" Whether to display link to previous or next post. ","required":"no"},{"param":"$taxonomy","desc":" Taxonomy, if $in_same_term is true. ","required":"no"}]},"get_admin_page_parent":{"desc":"","params":[]},"get_admin_page_title":{"desc":"","params":[]},"get_admin_url":{"desc":"Retrieves the URL to the admin area for a given site.","params":[{"param":"$blog_id","desc":" Site ID. Default null (current site).","required":"no"},{"param":"$path","desc":" Path relative to the admin URL. ","required":"no"},{"param":"$scheme","desc":" The scheme to use. Accepts http or https, to force those schemes. Default admin, which obeys force_ssl_admin() and is_ssl().","required":"no"}]},"get_admin_users_for_domain":{"desc":"Get the admin for a domain/path combination.","params":[{"param":"$sitedomain","desc":" Site domain.","required":"no"},{"param":"$path","desc":" Site path.","required":"no"}]},"get_alloptions":{"desc":"Retrieve all autoload options, or all options if no autoloaded ones exist.","params":[]},"get_alloptions_110":{"desc":"Retrieve all options as it was for 1.2.","params":[]},"get_allowed_http_origins":{"desc":"Retrieve list of allowed HTTP origins.","params":[]},"get_allowed_mime_types":{"desc":"Retrieve list of allowed mime types and file extensions.","params":[{"param":"$user","desc":" User to check. Defaults to current user.","required":"no"}]},"get_allowed_themes":{"desc":"Get the allowed themes for the current site.","params":[]},"get_all_category_ids":{"desc":"Retrieves all category IDs.","params":[]},"get_all_page_ids":{"desc":"Get a list of page IDs.","params":[]},"get_all_post_type_supports":{"desc":"Get all the post type features","params":[{"param":"$post_type","desc":"The post type.","required":"yes"}]},"get_all_user_settings":{"desc":"Retrieve all user interface settings.","params":[]},"get_ancestors":{"desc":"Get an array of ancestor IDs for a given object.","params":[{"param":"$object_id","desc":" The ID of the object. Default 0.","required":"no"},{"param":"$object_type","desc":" The type of object for which well be retrieving ancestors. Accepts a post type or a taxonomy name. ","required":"no"},{"param":"$resource_type","desc":" Type of resource $object_type is. Accepts post_type or taxonomy. ","required":"no"}]},"get_approved_comments":{"desc":"Retrieve the approved comments for post $post_id.","params":[{"param":"$post_id","desc":"The ID of the post.","required":"yes"},{"param":"$args","desc":" See WP_Comment_Query::query() for information on accepted arguments.","required":"no"}]},"get_archives":{"desc":"Retrieves a list of archives.","params":[{"param":"$type","desc":"","required":"no"},{"param":"$limit","desc":"","required":"no"},{"param":"$format","desc":"","required":"no"},{"param":"$before","desc":"","required":"no"},{"param":"$after","desc":"","required":"no"},{"param":"$show_post_count","desc":"","required":"no"}]},"get_archives_link":{"desc":"Retrieve archive link content based on predefined or custom code.","params":[{"param":"$url","desc":"URL to archive.","required":"yes"},{"param":"$text","desc":"Archive text description.","required":"yes"},{"param":"$format","desc":" Can be link, option, html, or custom.","required":"no"},{"param":"$before","desc":" Content to prepend to the description. ","required":"no"},{"param":"$after","desc":" Content to append to the description. ","required":"no"}]},"get_archive_template":{"desc":"Retrieve path of archive template in current or parent template.","params":[]},"get_attached_file":{"desc":"Retrieve attached file path based on attachment ID.","params":[{"param":"$attachment_id","desc":"Attachment ID.","required":"yes"},{"param":"$unfiltered","desc":" Whether to apply filters. ","required":"no"}]},"get_attached_media":{"desc":"Retrieves media attached to the passed post.","params":[{"param":"$type","desc":"Mime type.","required":"yes"},{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"get_attachment_fields_to_edit":{"desc":"Retrieves the attachment fields to edit form fields.","params":[{"param":"$post","desc":"","required":"yes"},{"param":"$errors","desc":"","required":"no"}]},"get_attachment_icon":{"desc":"Retrieve HTML content of icon attachment image element.","params":[{"param":"$id","desc":" Post ID.","required":"no"},{"param":"$fullsize","desc":" default to false. Whether to have full size image.","required":"no"},{"param":"$max_dims","desc":" Dimensions of image.","required":"no"}]},"get_attachment_icon_src":{"desc":"Retrieve icon URL and Path.","params":[{"param":"$id","desc":" Post ID.","required":"no"},{"param":"$fullsize","desc":" default to false. Whether to have full image.","required":"no"}]},"get_attachment_innerHTML":{"desc":"Retrieve HTML content of image element.","params":[{"param":"$id","desc":" Post ID.","required":"no"},{"param":"$fullsize","desc":" default to false. Whether to have full size image.","required":"no"},{"param":"$max_dims","desc":" Dimensions of image.","required":"no"}]},"get_attachment_link":{"desc":"Retrieves the permalink for an attachment.","params":[{"param":"$post","desc":" Post ID or object. Default uses the global $post.","required":"no"},{"param":"$leavename","desc":" Whether to keep the page name. ","required":"no"}]},"get_attachment_taxonomies":{"desc":"Retrieves taxonomies attached to given the attachment.","params":[{"param":"$attachment","desc":"Attachment ID, data array, or data object.","required":"yes"},{"param":"$output","desc":"Output type. names to return an array of taxonomy names, or objects to return an array of taxonomy objects. Default is names.","required":"no"}]},"get_attachment_template":{"desc":"Retrieve path of attachment template in current or parent template.","params":[]},"get_author_feed_link":{"desc":"Retrieves the feed link for a given author.","params":[{"param":"$author_id","desc":"Author ID.","required":"yes"},{"param":"$feed","desc":" Feed type. ","required":"no"}]},"get_author_link":{"desc":"Returns or Prints link to the author’s posts.","params":[{"param":"$echo","desc":"","required":"yes"},{"param":"$author_id","desc":"","required":"yes"},{"param":"$author_nicename","desc":"","required":"no"}]},"get_author_name":{"desc":"Retrieve the specified author’s preferred display name.","params":[{"param":"$auth_id","desc":"The ID of the author.","required":"no"}]},"get_author_posts_url":{"desc":"Retrieve the URL to the author page for the user with the ID provided.","params":[{"param":"$author_id","desc":"Author ID.","required":"yes"},{"param":"$author_nicename","desc":" The authors nicename (slug). ","required":"no"}]},"get_author_rss_link":{"desc":"Print/Return link to author RSS feed.","params":[{"param":"$echo","desc":"","required":"no"},{"param":"$author_id","desc":"","required":"no"}]},"get_author_template":{"desc":"Retrieve path of author template in current or parent template.","params":[]},"get_author_user_ids":{"desc":"Get all user IDs.","params":[]},"get_autotoggle":{"desc":"Gets the auto_toggle setting.","params":[{"param":"$id","desc":"The category to get. If no category supplied uses 0","required":"yes"}]},"get_available_languages":{"desc":"Get all available languages based on the presence of *.mo files in a given directory.","params":[{"param":"$dir","desc":"A directory to search for language files. Default WP_LANG_DIR.","required":"no"}]},"get_available_post_mime_types":{"desc":"Get all available post MIME types for a given post type.","params":[{"param":"$type","desc":"","required":"no"}]},"get_available_post_statuses":{"desc":"Get all the possible statuses for a post_type","params":[{"param":"$type","desc":"The post_type you want the statuses for","required":"no"}]},"get_avatar":{"desc":"Retrieve the avatar `` tag for a user, email address, MD5 hash, comment, or post.","params":[{"param":"$id_or_email","desc":"The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash, user email, WP_User object, WP_Post object, or WP_Comment object.","required":"yes"},{"param":"$size","desc":" Height and width of the avatar image file in pixels. ","required":"no"},{"param":"$default","desc":" URL for the default image or a default type. Accepts 404 (return a 404 instead of a default image), retro (8bit), monsterid (monster), wavatar (cartoon face), indenticon (the quilt), mystery, mm, or mysteryman (The Oyster Man), blank (transparent GIF), or gravatar_default (the Gravatar logo). Default is the value of the avatar_default option, with a fallback of mystery.","required":"no"},{"param":"$alt","desc":" Alternative text to use in <img> tag. ","required":"no"},{"param":"$args","desc":"Extra arguments to retrieve the avatar. height(int) Display height of the avatar in pixels. Defaults to $size. width(int) Display width of the avatar in pixels. Defaults to $size. force_default(bool) Whether to always show the default image, never the Gravatar. Default false. rating(string) What rating to display avatars up to. Accepts G, PG, R, X, and are judged in that order. Default is the value of the avatar_rating option. scheme(string) URL scheme to use. See set_url_scheme() for accepted values.  class(array|string) Array or string of additional classes to add to the <img> element.  force_display(bool) Whether to always show the avatar - ignores the show_avatars option. Default false. extra_attr(string) HTML attributes to insert in the IMG element. Is not sanitized. Default empty.  ","required":"no"}]},"get_avatar_data":{"desc":"Retrieves default data about the avatar.","params":[{"param":"$id_or_email","desc":"The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash, user email, WP_User object, WP_Post object, or WP_Comment object.","required":"yes"},{"param":"$args","desc":"Arguments to return instead of the default arguments. size(int) Height and width of the avatar image file in pixels. Default 96. height(int) Display height of the avatar in pixels. Defaults to $size. width(int) Display width of the avatar in pixels. Defaults to $size. default(string) URL for the default image or a default type. Accepts 404 (return a 404 instead of a default image), retro (8bit), monsterid (monster), wavatar (cartoon face), indenticon (the quilt), mystery, mm, or mysteryman (The Oyster Man), blank (transparent GIF), or gravatar_default (the Gravatar logo). Default is the value of the avatar_default option, with a fallback of mystery. force_default(bool) Whether to always show the default image, never the Gravatar. Default false. rating(string) What rating to display avatars up to. Accepts G, PG, R, X, and are judged in that order. Default is the value of the avatar_rating option. scheme(string) URL scheme to use. See set_url_scheme() for accepted values.  processed_args(array) When the function returns, the value will be the processed/sanitized $args plus a found_avatar guess. Pass as a reference.  extra_attr(string) HTML attributes to insert in the IMG element. Is not sanitized. Default empty.  ","required":"no"}]},"get_avatar_url":{"desc":"Retrieve the avatar URL.","params":[{"param":"$id_or_email","desc":"The Gravatar to retrieve a URL for. Accepts a user_id, gravatar md5 hash, user email, WP_User object, WP_Post object, or WP_Comment object.","required":"yes"},{"param":"$args","desc":"Arguments to return instead of the default arguments. size(int) Height and width of the avatar in pixels. Default 96. default(string) URL for the default image or a default type. Accepts 404 (return a 404 instead of a default image), retro (8bit), monsterid (monster), wavatar (cartoon face), indenticon (the quilt), mystery, mm, or mysteryman (The Oyster Man), blank (transparent GIF), or gravatar_default (the Gravatar logo). Default is the value of the avatar_default option, with a fallback of mystery. force_default(bool) Whether to always show the default image, never the Gravatar. Default false. rating(string) What rating to display avatars up to. Accepts G, PG, R, X, and are judged in that order. Default is the value of the avatar_rating option. scheme(string) URL scheme to use. See set_url_scheme() for accepted values.  processed_args(array) When the function returns, the value will be the processed/sanitized $args plus a found_avatar guess. Pass as a reference.   ","required":"no"}]},"get_background_color":{"desc":"Retrieve value for custom background color.","params":[]},"get_background_image":{"desc":"Retrieve background image for custom background.","params":[]},"get_blogaddress_by_domain":{"desc":"Get a full blog URL, given a domain and a path.","params":[{"param":"$domain","desc":"","required":"yes"},{"param":"$path","desc":"","required":"yes"}]},"get_blogaddress_by_id":{"desc":"Get a full blog URL, given a blog id.","params":[{"param":"$blog_id","desc":"Blog ID","required":"yes"}]},"get_blogaddress_by_name":{"desc":"Get a full blog URL, given a blog name.","params":[{"param":"$blogname","desc":"The (subdomain or directory) name","required":"yes"}]},"get_bloginfo":{"desc":"Retrieves information about the blog.","params":[{"param":"$show","desc":" Site info to retrieve. Default empty (site name).","required":"no"},{"param":"$filter","desc":" How to filter what is retrieved. ","required":"no"}]},"get_bloginfo_rss":{"desc":"RSS container for the bloginfo function.","params":[{"param":"$show","desc":"See get_bloginfo() for possible values.","required":"no"}]},"get_blogs_of_user":{"desc":"Get the sites a user belongs to.","params":[{"param":"$user_id","desc":"User ID","required":"yes"},{"param":"$all","desc":"Whether to retrieve all sites, or only sites that are not marked as deleted, archived, or spam.","required":"no"}]},"get_blog_count":{"desc":"The number of active sites on your installation.","params":[{"param":"$network_id","desc":"Deprecated, not supported.","required":"yes"}]},"get_blog_details":{"desc":"Retrieve the details for a blog from the blogs table and blog options.","params":[{"param":"$fields","desc":" A blog ID, a blog slug, or an array of fields to query against. If not specified the current blog ID is used.","required":"no"},{"param":"$get_all","desc":"Whether to retrieve all details or only the details in the blogs table. Default is true.","required":"no"}]},"get_blog_id_from_url":{"desc":"Get a blog’s numeric ID from its URL.","params":[{"param":"$domain","desc":"","required":"yes"},{"param":"$path","desc":" Not required for subdomain installations.","required":"no"}]},"get_blog_list":{"desc":"Deprecated functionality to retrieve a list of all sites.","params":[{"param":"$start","desc":" Offset for retrieving the blog list. Default 0.","required":"no"},{"param":"$num","desc":" Number of blogs to list. ","required":"no"},{"param":"$deprecated","desc":"Unused.","required":"no"}]},"get_blog_option":{"desc":"Retrieve option value for a given blog id based on name of option.","params":[{"param":"$id","desc":"A blog ID. Can be null to refer to the current blog.","required":"yes"},{"param":"$option","desc":"Name of option to retrieve. Expected to not be SQL-escaped.","required":"yes"},{"param":"$default","desc":" Default value to return if the option does not exist.","required":"no"}]},"get_blog_permalink":{"desc":"Get the permalink for a post on another blog.","params":[{"param":"$blog_id","desc":"ID of the source blog.","required":"yes"},{"param":"$post_id","desc":"ID of the desired post.","required":"yes"}]},"get_blog_post":{"desc":"Get a blog post from any site on the network.","params":[{"param":"$blog_id","desc":"ID of the blog.","required":"yes"},{"param":"$post_id","desc":"ID of the post youre looking for.","required":"yes"}]},"get_blog_status":{"desc":"Get a blog details field.","params":[{"param":"$id","desc":"The blog id","required":"yes"},{"param":"$pref","desc":"A field name","required":"yes"}]},"get_body_class":{"desc":"Retrieve the classes for the body element as an array.","params":[{"param":"$class","desc":"One or more classes to add to the class list.","required":"no"}]},"get_bookmark":{"desc":"Retrieve Bookmark data","params":[{"param":"$bookmark","desc":"","required":"yes"},{"param":"$output","desc":" The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to an stdClass object, an associative array, or a numeric array, respectively. ","required":"no"},{"param":"$filter","desc":" ","required":"no"}]},"get_bookmarks":{"desc":"Retrieves the list of bookmarks","params":[{"param":"$args","desc":"String or array of arguments to retrieve bookmarks. orderby(string) How to order the links by. Accepts post fields. Default name. order(string) Whether to order bookmarks in ascending or descending order. Accepts ASC (ascending) or DESC (descending). Default ASC. limit(int) Amount of bookmarks to display. Accepts 1+ or -1 for all. Default -1. category(string) Comma-separated list of category ids to include links from.  category_name(string) Category to retrieve links for by name.  hide_invisible(int|bool) Whether to show or hide links marked as invisible. Accepts 1|true or 0|false. Default 1|true. show_updated(int|bool) Whether to display the time the bookmark was last updated. Accepts 1|true or 0|false. Default 0|false. include(string) Comma-separated list of bookmark IDs to include.  exclude(string) Comma-separated list of bookmark IDs to exclude.   ","required":"no"}]},"get_bookmark_field":{"desc":"Retrieve single bookmark data item or field.","params":[{"param":"$field","desc":"The name of the data field to return","required":"yes"},{"param":"$bookmark","desc":"The bookmark ID to get field","required":"yes"},{"param":"$context","desc":" The context of how the field will be used.","required":"no"}]},"get_boundary_post":{"desc":"Retrieves the boundary post.","params":[{"param":"$in_same_term","desc":" Whether returned post should be in a same taxonomy term. ","required":"no"},{"param":"$excluded_terms","desc":" Array or comma-separated list of excluded term IDs. ","required":"no"},{"param":"$start","desc":" Whether to retrieve first or last post. Default true","required":"no"},{"param":"$taxonomy","desc":" Taxonomy, if $in_same_term is true. ","required":"no"}]},"get_boundary_post_rel_link":{"desc":"Get boundary post relational link.","params":[{"param":"$title","desc":" Link title format.","required":"no"},{"param":"$in_same_cat","desc":" Whether link should be in a same category.","required":"no"},{"param":"$excluded_categories","desc":" Excluded categories IDs.","required":"no"},{"param":"$start","desc":" Whether to display link to first or last post.","required":"no"}]},"get_broken_themes":{"desc":"Retrieves a list of broken themes.","params":[]},"get_calendar":{"desc":"Display calendar with days that have posts as links.","params":[{"param":"$initial","desc":" Use initial calendar names.","required":"no"},{"param":"$echo","desc":" Set to false for return.","required":"no"}]},"get_cancel_comment_reply_link":{"desc":"Retrieve HTML content for cancel comment reply link.","params":[{"param":"$text","desc":" Text to display for cancel reply link. ","required":"no"}]},"get_categories":{"desc":"Retrieve list of category objects.","params":[{"param":"$args","desc":"Arguments to retrieve categories. See get_terms() for additional options. taxonomy(string) Taxonomy to retrieve terms for. In this case, default category.  ","required":"no"}]},"get_category":{"desc":"Retrieves category data given a category ID or category object.","params":[{"param":"$category","desc":"Category ID or Category row object","required":"yes"},{"param":"$output","desc":" The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Term object, an associative array, or a numeric array, respectively. ","required":"no"},{"param":"$filter","desc":" Default is raw or no WordPress defined filter will applied.","required":"no"}]},"get_category_by_path":{"desc":"Retrieve category based on URL containing the category slug.","params":[{"param":"$category_path","desc":"URL containing category slugs.","required":"yes"},{"param":"$full_match","desc":" Whether full path should be matched.","required":"no"},{"param":"$output","desc":" The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Term object, an associative array, or a numeric array, respectively. ","required":"no"}]},"get_category_by_slug":{"desc":"Retrieve category object by category slug.","params":[{"param":"$slug","desc":"The category slug.","required":"yes"}]},"get_category_children":{"desc":"Retrieve category children list separated before and after the term IDs.","params":[{"param":"$id","desc":"Category ID to retrieve children.","required":"yes"},{"param":"$before","desc":" Prepend before category term ID.","required":"no"},{"param":"$after","desc":" Append after category term ID.","required":"no"},{"param":"$visited","desc":" Category Term IDs that have already been added.","required":"no"}]},"get_category_feed_link":{"desc":"Retrieve the feed link for a category.","params":[{"param":"$cat_id","desc":"Category ID.","required":"yes"},{"param":"$feed","desc":" Feed type. ","required":"no"}]},"get_category_link":{"desc":"Retrieve category link URL.","params":[{"param":"$category","desc":"Category ID or object.","required":"yes"}]},"get_category_parents":{"desc":"Retrieve category parents with separator.","params":[{"param":"$id","desc":"Category ID.","required":"yes"},{"param":"$link","desc":" Whether to format with link.","required":"no"},{"param":"$separator","desc":" How to separate categories.","required":"no"},{"param":"$nicename","desc":" Whether to use nice name for display.","required":"no"},{"param":"$visited","desc":" Already linked to categories to prevent duplicates.","required":"no"}]},"get_category_rss_link":{"desc":"Print/Return link to category RSS2 feed.","params":[{"param":"$echo","desc":"","required":"no"},{"param":"$cat_ID","desc":"","required":"no"}]},"get_category_template":{"desc":"Retrieve path of category template in current or parent template.","params":[]},"get_category_to_edit":{"desc":"Get category object for given ID and ‘edit’ filter context.","params":[{"param":"$id","desc":"","required":"yes"}]},"get_catname":{"desc":"Retrieve the category name by the category ID.","params":[{"param":"$cat_ID","desc":"Category ID","required":"yes"}]},"get_cat_ID":{"desc":"Retrieve the ID of a category from its name.","params":[{"param":"$cat_name","desc":"Category name.","required":"yes"}]},"get_cat_name":{"desc":"Retrieve the name of a category from its ID.","params":[{"param":"$cat_id","desc":"Category ID","required":"yes"}]},"get_children":{"desc":"Retrieve all children of the post parent ID.","params":[{"param":"$args","desc":" User defined arguments for replacing the defaults. ","required":"no"},{"param":"$output","desc":" The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Post object, an associative array, or a numeric array, respectively. ","required":"no"}]},"get_clean_basedomain":{"desc":"Get base domain of network.","params":[]},"get_cli_args":{"desc":"Returns value of command line params.","params":[{"param":"$param","desc":"","required":"yes"},{"param":"$required","desc":"","required":"no"}]},"get_column_headers":{"desc":"Get the column headers for a screen","params":[{"param":"$screen","desc":"The screen you want the headers for","required":"yes"}]},"get_comment":{"desc":"Retrieves comment data given a comment ID or comment object.","params":[{"param":"$comment","desc":"Comment to retrieve.","required":"no"},{"param":"$output","desc":" The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Comment object, an associative array, or a numeric array, respectively. ","required":"no"}]},"get_commentdata":{"desc":"Retrieve an array of comment data about comment $comment_ID.","params":[{"param":"$comment_ID","desc":"The ID of the comment","required":"yes"},{"param":"$no_cache","desc":"Whether to use the cache (cast to bool)","required":"yes"},{"param":"$include_unapproved","desc":"Whether to include unapproved comments","required":"no"}]},"get_comments":{"desc":"Retrieve a list of comments.","params":[{"param":"$args","desc":" Array or string of arguments. See WP_Comment_Query::parse_query() for information on accepted arguments. ","required":"no"}]},"get_comments_link":{"desc":"Retrieves the link to the current post comments.","params":[{"param":"$post_id","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"get_comments_number":{"desc":"Retrieve the amount of comments a post has.","params":[{"param":"$post_id","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"get_comments_number_text":{"desc":"Display the language string for the number of comments the current post has.","params":[{"param":"$zero","desc":" Text for no comments. ","required":"no"},{"param":"$one","desc":" Text for one comment. ","required":"no"},{"param":"$more","desc":" Text for more than one comment. ","required":"no"}]},"get_comments_pagenum_link":{"desc":"Retrieves the comments page number link.","params":[{"param":"$pagenum","desc":" Page number. ","required":"no"},{"param":"$max_page","desc":" The maximum number of comment pages. Default 0.","required":"no"}]},"get_comments_popup_template":{"desc":"Retrieve path of comment popup template in current or parent template.","params":[]},"get_comment_author":{"desc":"Retrieve the author of the current comment.","params":[{"param":"$comment_ID","desc":" WP_Comment or the ID of the comment for which to retrieve the author.          Default current comment.","required":"no"}]},"get_comment_author_email":{"desc":"Retrieve the email of the author of the current comment.","params":[{"param":"$comment_ID","desc":" WP_Comment or the ID of the comment for which to get the authors email.          Default current comment.","required":"no"}]},"get_comment_author_email_link":{"desc":"Return the html email link to the author of the current comment.","params":[{"param":"$linktext","desc":" Text to display instead of the comment authors email address. ","required":"no"},{"param":"$before","desc":" Text or HTML to display before the email link. ","required":"no"},{"param":"$after","desc":" Text or HTML to display after the email link. ","required":"no"},{"param":"$comment","desc":" Comment ID or WP_Comment object. Default is the current comment.","required":"no"}]},"get_comment_author_IP":{"desc":"Retrieve the IP address of the author of the current comment.","params":[{"param":"$comment_ID","desc":" WP_Comment or the ID of the comment for which to get the authors IP address.          Default current comment.","required":"no"}]},"get_comment_author_link":{"desc":"Retrieve the HTML link to the URL of the author of the current comment.","params":[{"param":"$comment_ID","desc":" WP_Comment or the ID of the comment for which to get the authors link.          Default current comment.","required":"no"}]},"get_comment_author_rss":{"desc":"Retrieve the current comment author for use in the feeds.","params":[]},"get_comment_author_url":{"desc":"Retrieve the url of the author of the current comment.","params":[{"param":"$comment_ID","desc":" WP_Comment or the ID of the comment for which to get the authors URL.          Default current comment.","required":"no"}]},"get_comment_author_url_link":{"desc":"Retrieves the HTML link of the url of the author of the current comment.","params":[{"param":"$linktext","desc":" The text to display instead of the comment authors email address. ","required":"no"},{"param":"$before","desc":" The text or HTML to display before the email link. ","required":"no"},{"param":"$after","desc":" The text or HTML to display after the email link. ","required":"no"},{"param":"$comment","desc":" Comment ID or WP_Comment object. Default is the current comment.","required":"no"}]},"get_comment_class":{"desc":"Returns the classes for the comment div as an array.","params":[{"param":"$class","desc":" One or more classes to add to the class list. ","required":"no"},{"param":"$comment_id","desc":"Comment ID or WP_Comment object. Default current comment.","required":"no"},{"param":"$post_id","desc":"Post ID or WP_Post object. Default current post.","required":"no"}]},"get_comment_count":{"desc":"The amount of comments in a post or total comments.","params":[{"param":"$post_id","desc":" Comment amount in post if > 0, else total comments blog wide.","required":"no"}]},"get_comment_date":{"desc":"Retrieve the comment date of the current comment.","params":[{"param":"$d","desc":" The format of the date. Default users setting.","required":"no"},{"param":"$comment_ID","desc":"WP_Comment or ID of the comment for which to get the date. Default current comment.","required":"no"}]},"get_comment_excerpt":{"desc":"Retrieve the excerpt of the current comment.","params":[{"param":"$comment_ID","desc":"WP_Comment or ID of the comment for which to get the excerpt. Default current comment.","required":"yes"}]},"get_comment_guid":{"desc":"Retrieve the feed GUID for the current comment.","params":[{"param":"$comment_id","desc":"comment object or id. Defaults to global comment object.","required":"no"}]},"get_comment_ID":{"desc":"Retrieve the comment id of the current comment.","params":[]},"get_comment_id_fields":{"desc":"Retrieve hidden input HTML for replying to comments.","params":[{"param":"$id","desc":" Post ID. Default current post ID.","required":"no"}]},"get_comment_link":{"desc":"Retrieve the link to a given comment.","params":[{"param":"$comment","desc":"Comment to retrieve. Default current comment.","required":"no"},{"param":"$args","desc":"An array of optional arguments to override the defaults. type(string) Passed to get_page_of_comment(). page(int) Current page of comments, for calculating comment pagination. per_page(int) Per-page value for comment pagination. max_depth(int) Passed to get_page_of_comment(). cpage(int|string) Value to use for the comments comment-page or cpage value. If provided, this value overrides any value calculated from $page and $per_page.  ","required":"no"}]},"get_comment_meta":{"desc":"Retrieve comment meta field for a comment.","params":[{"param":"$comment_id","desc":"Comment ID.","required":"yes"},{"param":"$key","desc":" The meta key to retrieve. By default, returns data for all keys.","required":"no"},{"param":"$single","desc":"Whether to return a single value.","required":"no"}]},"get_comment_pages_count":{"desc":"Calculate the total number of comment pages.","params":[{"param":"$comments","desc":"array of WP_Comment objects. Defaults to $wp_query->comments","required":"no"},{"param":"$per_page","desc":"comments per page.","required":"no"},{"param":"$threaded","desc":"control over flat or threaded comments.","required":"no"}]},"get_comment_reply_link":{"desc":"Retrieve HTML content for reply to comment link.","params":[{"param":"$args","desc":"Override default arguments. add_below(string) The first part of the selector used to identify the comment to respond below. The resulting value is passed as the first parameter to addComment.moveForm(), concatenated as $add_below-$comment->comment_ID. Default comment. respond_id(string) The selector identifying the responding comment. Passed as the third parameter to addComment.moveForm(), and appended to the link URL as a hash value. Default respond. reply_text(string) The text of the Reply link. Default Reply. login_text(string) The text of the link to reply if logged out. Default Log in to Reply. max_depth(int) The max depth of the comment tree. Default 0. depth(int) The depth of the new comment. Must be greater than 0 and less than the value of the thread_comments_depth option set in Settings > Discussion. Default 0. before(string) The text or HTML to add before the reply link.  after(string) The text or HTML to add after the reply link.   ","required":"no"},{"param":"$comment","desc":"Comment being replied to. Default current comment.","required":"no"},{"param":"$post","desc":"Post ID or WP_Post object the comment is going to be displayed on. Default current post.","required":"no"}]},"get_comment_statuses":{"desc":"Retrieve all of the WordPress supported comment statuses.","params":[]},"get_comment_text":{"desc":"Retrieve the text of the current comment.","params":[{"param":"$comment_ID","desc":"WP_Comment or ID of the comment for which to get the text. Default current comment.","required":"yes"},{"param":"$args","desc":" An array of arguments. ","required":"no"}]},"get_comment_time":{"desc":"Retrieve the comment time of the current comment.","params":[{"param":"$d","desc":" The format of the time. Default users settings.","required":"no"},{"param":"$gmt","desc":" Whether to use the GMT date. ","required":"no"},{"param":"$translate","desc":" Whether to translate the time (for use in feeds). ","required":"no"}]},"get_comment_to_edit":{"desc":"Returns a WP_Comment object based on comment ID.","params":[{"param":"$id","desc":"ID of comment to retrieve.","required":"yes"}]},"get_comment_type":{"desc":"Retrieve the comment type of the current comment.","params":[{"param":"$comment_ID","desc":" WP_Comment or ID of the comment for which to get the type. Default current comment.","required":"no"}]},"get_compat_media_markup":{"desc":"","params":[{"param":"$attachment_id","desc":"","required":"yes"},{"param":"$args","desc":"","required":"no"}]},"get_core_checksums":{"desc":"Gets and caches the checksums for the given version of WordPress.","params":[{"param":"$version","desc":"Version string to query.","required":"yes"},{"param":"$locale","desc":"Locale to query.","required":"yes"}]},"get_core_updates":{"desc":"Get available core updates.","params":[{"param":"$options","desc":"Set $options[dismissed] to true to show dismissed upgrades too,   set $options[available] to false to skip not-dismissed updates.","required":"no"}]},"get_currentuserinfo":{"desc":"Populate global variables with information about the currently logged in user.","params":[]},"get_current_blog_id":{"desc":"Retrieve the current blog ID.","params":[]},"get_current_network_id":{"desc":"Retrieves the current network ID.","params":[]},"get_current_screen":{"desc":"Get the current screen object","params":[]},"get_current_site":{"desc":"Get the current network.","params":[]},"get_current_site_name":{"desc":"This deprecated function formerly set the site_name property of the $current_site object.","params":[{"param":"$current_site","desc":"","required":"yes"}]},"get_current_theme":{"desc":"Retrieve current theme name.","params":[]},"get_current_user_id":{"desc":"Get the current user’s ID","params":[]},"get_custom_header":{"desc":"Get the header image data.","params":[]},"get_custom_header_markup":{"desc":"Retrieve the markup for a custom header.","params":[]},"get_custom_logo":{"desc":"Returns a custom logo, linked to home.","params":[{"param":"$blog_id","desc":" ID of the blog in question. Default is the ID of the current blog.","required":"no"}]},"get_dashboard_blog":{"desc":"Get the “dashboard blog”, the blog where users without a blog edit their profile data.","params":[]},"get_dashboard_url":{"desc":"Retrieves the URL to the user’s dashboard.","params":[{"param":"$user_id","desc":" User ID. Defaults to current user.","required":"no"},{"param":"$path","desc":"path relative to the dashboard. Use only paths known to both site and user admins. ","required":"no"},{"param":"$scheme","desc":"The scheme to use. Default is admin, which obeys force_ssl_admin() and is_ssl(). http or https can be passed to force those schemes.","required":"no"}]},"get_date_from_gmt":{"desc":"Converts a GMT date into the correct format for the blog.","params":[{"param":"$string","desc":"The date to be converted.","required":"yes"},{"param":"$format","desc":"The format string for the returned date (default is Y-m-d H:i:s)","required":"no"}]},"get_date_template":{"desc":"Retrieve path of date template in current or parent template.","params":[]},"get_day_link":{"desc":"Retrieves the permalink for the day archives with year and month.","params":[{"param":"$year","desc":"False for current year. Integer of year.","required":"yes"},{"param":"$month","desc":"False for current month. Integer of month.","required":"yes"},{"param":"$day","desc":"False for current day. Integer of day.","required":"yes"}]},"get_default_comment_status":{"desc":"Gets the default comment status for a post type.","params":[{"param":"$post_type","desc":" Post type. ","required":"no"},{"param":"$comment_type","desc":" Comment type. ","required":"no"}]},"get_default_feed":{"desc":"Retrieve the default feed.","params":[]},"get_default_link_to_edit":{"desc":"Retrieves the default link for editing.","params":[]},"get_default_page_to_edit":{"desc":"Gets the default page information to use.","params":[]},"get_default_post_to_edit":{"desc":"Default post information to use when populating the “Write Post” form.","params":[{"param":"$post_type","desc":" A post type string. ","required":"no"},{"param":"$create_in_db","desc":" Whether to insert the post into database. ","required":"no"}]},"get_delete_post_link":{"desc":"Retrieves the delete posts link for post.","params":[{"param":"$id","desc":" Post ID. Default is the ID of the global $post.","required":"no"},{"param":"$deprecated","desc":"Not used.","required":"no"},{"param":"$force_delete","desc":" Whether to bypass trash and force deletion. ","required":"no"}]},"get_dirsize":{"desc":"Get the size of a directory.","params":[{"param":"$directory","desc":"Full path of a directory.","required":"yes"}]},"get_dropins":{"desc":"Check the wp-content directory and retrieve all drop-ins with any plugin data.","params":[]},"get_editable_authors":{"desc":"Gets author users who can edit posts.","params":[{"param":"$user_id","desc":"User ID.","required":"yes"}]},"get_editable_roles":{"desc":"Fetch a filtered list of user roles that the current user is allowed to edit.","params":[]},"get_editable_user_ids":{"desc":"Gets the IDs of any users who can edit posts.","params":[{"param":"$user_id","desc":"User ID.","required":"yes"},{"param":"$exclude_zeros","desc":" Whether to exclude zeroes. ","required":"no"}]},"get_editor_stylesheets":{"desc":"Retrieve any registered editor stylesheets","params":[]},"get_edit_bookmark_link":{"desc":"Displays the edit bookmark link.","params":[{"param":"$link","desc":" Bookmark ID. Default is the id of the current bookmark.","required":"no"}]},"get_edit_comment_link":{"desc":"Retrieves the edit comment link.","params":[{"param":"$comment_id","desc":" Comment ID or WP_Comment object.","required":"no"}]},"get_edit_post_link":{"desc":"Retrieves the edit post link for post.","params":[{"param":"$id","desc":" Post ID. Default is the ID of the global $post.","required":"no"},{"param":"$context","desc":" How to output the & character. Default &.","required":"no"}]},"get_edit_profile_url":{"desc":"Retrieves the URL to the user’s profile editor.","params":[{"param":"$user_id","desc":" User ID. Defaults to current user.","required":"no"},{"param":"$scheme","desc":" The scheme to use. Default is admin, which obeys force_ssl_admin() and is_ssl(). http or https can be passed to force those schemes.","required":"no"}]},"get_edit_tag_link":{"desc":"Retrieves the edit link for a tag.","params":[{"param":"$tag_id","desc":"Tag ID.","required":"yes"},{"param":"$taxonomy","desc":" Taxonomy slug. ","required":"no"}]},"get_edit_term_link":{"desc":"Retrieves the URL for editing a given term.","params":[{"param":"$term_id","desc":"Term ID.","required":"yes"},{"param":"$taxonomy","desc":" Taxonomy. Defaults to the taxonomy of the term identified by $term_id.","required":"no"},{"param":"$object_type","desc":" The object type. Used to highlight the proper post type menu on the linked page. Defaults to the first object_type associated with the taxonomy.","required":"no"}]},"get_edit_user_link":{"desc":"Retrieve edit user link","params":[{"param":"$user_id","desc":" User ID. Defaults to the current user.","required":"no"}]},"get_embed_template":{"desc":"Retrieves an embed template path in the current or parent template.","params":[]},"get_enclosed":{"desc":"Retrieve enclosures already enclosed for a post.","params":[{"param":"$post_id","desc":"Post ID.","required":"yes"}]},"get_extended":{"desc":"Get extended entry info ().","params":[{"param":"$post","desc":"Post content.","required":"yes"}]},"get_feed_link":{"desc":"Retrieves the permalink for the feed type.","params":[{"param":"$feed","desc":" Feed type. ","required":"no"}]},"get_file":{"desc":"","params":[]},"get_filesystem_method":{"desc":"Determines which method to use for reading, writing, modifying, or deleting files on the filesystem.","params":[{"param":"$args","desc":" Connection details. ","required":"no"},{"param":"$context","desc":" Full path to the directory that is tested for being writable. ","required":"no"},{"param":"$allow_relaxed_file_ownership","desc":" Whether to allow Group/World writable. ","required":"no"}]},"get_file_data":{"desc":"Retrieve metadata from a file.","params":[{"param":"$file","desc":"Path to the file.","required":"yes"},{"param":"$default_headers","desc":"List of headers, in the format array(HeaderKey => Header Name).","required":"yes"},{"param":"$context","desc":" If specified adds filter hook extra_$context_headers. ","required":"no"}]},"get_file_description":{"desc":"Get the description for standard WordPress theme files and other various standard WordPress files","params":[{"param":"$file","desc":"Filesystem path or filename","required":"yes"}]},"get_footer":{"desc":"Load footer template.","params":[{"param":"$name","desc":"The name of the specialised footer.","required":"no"}]},"get_front_page_template":{"desc":"Retrieve path of front page template in current or parent template.","params":[]},"get_gmt_from_date":{"desc":"Returns a date in the GMT equivalent.","params":[{"param":"$string","desc":"The date to be converted.","required":"yes"},{"param":"$format","desc":"The format string for the returned date (default is Y-m-d H:i:s)","required":"no"}]},"get_header":{"desc":"Load header template.","params":[{"param":"$name","desc":"The name of the specialised header.","required":"no"}]},"get_header_image":{"desc":"Retrieve header image for custom header.","params":[]},"get_header_image_tag":{"desc":"Create image tag markup for a custom header image.","params":[{"param":"$attr","desc":" Additional attributes for the image tag. Can be used to override the default attributes. ","required":"no"}]},"get_header_textcolor":{"desc":"Retrieves the custom header text color in HEX format.","params":[]},"get_header_video_settings":{"desc":"Retrieve header video settings.","params":[]},"get_header_video_url":{"desc":"","params":[]},"get_hidden_columns":{"desc":"Get a list of hidden columns.","params":[{"param":"$screen","desc":"The screen you want the hidden columns for","required":"yes"}]},"get_hidden_meta_boxes":{"desc":"Get Hidden Meta Boxes","params":[{"param":"$screen","desc":"Screen identifier","required":"yes"}]},"get_home_path":{"desc":"Get the absolute filesystem path to the root of the WordPress installation","params":[]},"get_home_template":{"desc":"Retrieve path of home template in current or parent template.","params":[]},"get_home_url":{"desc":"Retrieve the home url for a given site.","params":[{"param":"$blog_id","desc":" Site ID. Default null (current site).","required":"no"},{"param":"$path","desc":" Path relative to the home URL. ","required":"no"},{"param":"$scheme","desc":" Scheme to give the home URL context. Accepts http, https, relative, rest, or null. ","required":"no"}]},"get_html_split_regex":{"desc":"Retrieve the regular expression for an HTML element.","params":[]},"get_http_origin":{"desc":"Get the HTTP Origin of the current request.","params":[]},"get_id_from_blogname":{"desc":"Retrieves a sites ID given its (subdomain or directory) slug.","params":[{"param":"$slug","desc":"A sites slug.","required":"yes"}]},"get_images_from_uri":{"desc":"Retrieve all image URLs from given URI.","params":[{"param":"$uri","desc":"","required":"yes"}]},"get_image_send_to_editor":{"desc":"Retrieves the image HTML to send to the editor.","params":[{"param":"$id","desc":"Image attachment id.","required":"yes"},{"param":"$caption","desc":"Image caption.","required":"yes"},{"param":"$title","desc":"Image title attribute.","required":"yes"},{"param":"$align","desc":"Image CSS alignment property.","required":"yes"},{"param":"$url","desc":" Image src URL. ","required":"no"},{"param":"$rel","desc":" Value for rel attribute or whether to add a default value. ","required":"no"},{"param":"$size","desc":" Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"},{"param":"$alt","desc":" Image alt attribute. ","required":"no"}]},"get_image_tag":{"desc":"Gets an img tag for an image attachment, scaling it down if requested.","params":[{"param":"$id","desc":"Attachment ID.","required":"yes"},{"param":"$alt","desc":"Image Description for the alt attribute.","required":"yes"},{"param":"$title","desc":"Image Description for the title attribute.","required":"yes"},{"param":"$align","desc":"Part of the class name for aligning the image.","required":"yes"},{"param":"$size","desc":" Registered image size to retrieve a tag for. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"}]},"get_importers":{"desc":"Retrieve list of importers.","params":[]},"get_index_rel_link":{"desc":"Get site index relational link.","params":[]},"get_index_template":{"desc":"Retrieve path of index template in current or parent template.","params":[]},"get_inline_data":{"desc":"Adds hidden fields with the data for use in the inline editor for posts and pages.","params":[{"param":"$post","desc":"Post object.","required":"yes"}]},"get_intermediate_image_sizes":{"desc":"Gets the available intermediate image sizes.","params":[]},"get_language_attributes":{"desc":"Gets the language attributes for the html tag.","params":[{"param":"$doctype","desc":" The type of html document. Accepts xhtml or html. ","required":"no"}]},"get_lastcommentmodified":{"desc":"The date the last comment was modified.","params":[{"param":"$timezone","desc":"Which timezone to use in reference to gmt, blog, or server locations.","required":"no"}]},"get_lastpostdate":{"desc":"Retrieve the date that the last post was published.","params":[{"param":"$timezone","desc":" The timezone for the timestamp. Accepts server, blog, or gmt. server uses the servers internal timezone. blog uses the post_modified field, which proxies to the timezone set for the site. gmt uses the post_modified_gmt field. ","required":"no"},{"param":"$post_type","desc":" The post type to check. ","required":"no"}]},"get_lastpostmodified":{"desc":"Get the timestamp of the last time any post was modified.","params":[{"param":"$timezone","desc":" The timezone for the timestamp. See get_lastpostdate() for information on accepted values. ","required":"no"},{"param":"$post_type","desc":" The post type to check. ","required":"no"}]},"get_last_updated":{"desc":"Get a list of most recently updated blogs.","params":[{"param":"$deprecated","desc":"Not used","required":"no"},{"param":"$start","desc":"The offset","required":"yes"},{"param":"$quantity","desc":"The maximum number of blogs to retrieve. Default is 40.","required":"no"}]},"get_link":{"desc":"Retrieve bookmark data based on ID.","params":[{"param":"$bookmark_id","desc":"ID of link","required":"yes"},{"param":"$output","desc":" Type of output. Accepts OBJECT, ARRAY_N, or ARRAY_A. ","required":"no"},{"param":"$filter","desc":" How to filter the link for output. Accepts raw, edit, attribute, js, db, or display. ","required":"no"}]},"get_linkcatname":{"desc":"Gets the name of category by id.","params":[{"param":"$id","desc":"The category to get. If no category supplied uses 0","required":"yes"}]},"get_linkobjects":{"desc":"Gets an array of link objects associated with category n.","params":[{"param":"$category","desc":"The category to use. If no category supplied uses all","required":"yes"},{"param":"$orderby","desc":"the order to output the links. E.g. id, name, url,  description, or rating. Or maybe owner. If you start the name with an  underscore the order will be reversed. You can also specify rand as the  order which will return links in a random order.","required":"no"},{"param":"$limit","desc":"Limit to X entries. If not specified, all entries are shown.","required":"yes"}]},"get_linkobjectsbyname":{"desc":"Gets an array of link objects associated with category $cat_name.","params":[{"param":"$cat_name","desc":"The category name to use. If no match is found uses all.","required":"no"},{"param":"$orderby","desc":"The order to output the links. E.g. id, name, url, description, or rating.  Or maybe owner. If you start the name with an underscore the order will be reversed. You can also  specify rand as the order which will return links in a random order.","required":"no"},{"param":"$limit","desc":"Limit to X entries. If not specified, all entries are shown.","required":"no"}]},"get_linkrating":{"desc":"","params":[{"param":"$link","desc":"Link object.","required":"yes"}]},"get_links":{"desc":"Gets the links associated with category by id.","params":[{"param":"$category","desc":"The category to use. If no category supplied uses all","required":"no"},{"param":"$before","desc":"the html to output before the link","required":"no"},{"param":"$after","desc":"the html to output after the link","required":"no"},{"param":"$between","desc":"the html to output between the link/image and its description.  Not used if no image or show_images == true","required":"no"},{"param":"$show_images","desc":"whether to show images (if defined).","required":"no"},{"param":"$orderby","desc":"the order to output the links. E.g. id, name, url,  description, or rating. Or maybe owner. If you start the name with an  underscore the order will be reversed. You can also specify rand as the order  which will return links in a random order.","required":"no"},{"param":"$show_description","desc":"whether to show the description if show_images=false/not defined.","required":"no"},{"param":"$show_rating","desc":"show rating stars/chars","required":"no"},{"param":"$limit","desc":"Limit to X entries. If not specified, all entries are shown.","required":"no"},{"param":"$show_updated","desc":"whether to show last updated timestamp","required":"no"},{"param":"$echo","desc":"whether to echo the results, or return them instead","required":"no"}]},"get_linksbyname":{"desc":"Gets the links associated with category $cat_name.","params":[{"param":"$cat_name","desc":" The category name to use. If no match is found uses all.","required":"no"},{"param":"$before","desc":" The html to output before the link.","required":"no"},{"param":"$after","desc":" The html to output after the link.","required":"no"},{"param":"$between","desc":" The html to output between the link/image and its description. Not used if no image or $show_images is true.","required":"no"},{"param":"$show_images","desc":" Whether to show images (if defined).","required":"no"},{"param":"$orderby","desc":" The order to output the links. E.g. id, name, url, description or rating. Or maybe owner.  If you start the name with an underscore the order will be reversed. You can also specify rand as the order which will return links in a  random order.","required":"no"},{"param":"$show_description","desc":" Whether to show the description if show_images=false/not defined.","required":"no"},{"param":"$show_rating","desc":" Show rating stars/chars.","required":"no"},{"param":"$limit","desc":" Limit to X entries. If not specified, all entries are shown.","required":"no"},{"param":"$show_updated","desc":" Whether to show last updated timestamp","required":"no"}]},"get_linksbyname_withrating":{"desc":"Gets the links associated with category ‘cat_name’ and display rating stars/chars.","params":[{"param":"$cat_name","desc":"The category name to use. If no match is found uses all","required":"no"},{"param":"$before","desc":"The html to output before the link","required":"no"},{"param":"$after","desc":"The html to output after the link","required":"no"},{"param":"$between","desc":"The html to output between the link/image and its description. Not used if no image or show_images is true","required":"no"},{"param":"$show_images","desc":"Whether to show images (if defined).","required":"no"},{"param":"$orderby","desc":"the order to output the links. E.g. id, name, url,  description, or rating. Or maybe owner. If you start the name with an  underscore the order will be reversed. You can also specify rand as the  order which will return links in a random order.","required":"no"},{"param":"$show_description","desc":"Whether to show the description if show_images=false/not defined","required":"no"},{"param":"$limit","desc":"Limit to X entries. If not specified, all entries are shown.","required":"no"},{"param":"$show_updated","desc":"Whether to show last updated timestamp","required":"yes"}]},"get_links_list":{"desc":"Output entire list of links by category.","params":[{"param":"$order","desc":"Sort link categories by name or id","required":"no"}]},"get_links_withrating":{"desc":"Gets the links associated with category n and display rating stars/chars.","params":[{"param":"$category","desc":"The category to use. If no category supplied uses all","required":"no"},{"param":"$before","desc":"The html to output before the link","required":"no"},{"param":"$after","desc":"The html to output after the link","required":"no"},{"param":"$between","desc":"The html to output between the link/image and its description. Not used if no image or show_images == true","required":"no"},{"param":"$show_images","desc":"Whether to show images (if defined).","required":"no"},{"param":"$orderby","desc":"The order to output the links. E.g. id, name, url,  description, or rating. Or maybe owner. If you start the name with an  underscore the order will be reversed. You can also specify rand as the  order which will return links in a random order.","required":"no"},{"param":"$show_description","desc":"Whether to show the description if show_images=false/not defined.","required":"no"},{"param":"$limit","desc":"Limit to X entries. If not specified, all entries are shown.","required":"no"},{"param":"$show_updated","desc":"Whether to show last updated timestamp","required":"yes"}]},"get_link_to_edit":{"desc":"Retrieves link data based on its ID.","params":[{"param":"$link","desc":"Link ID or object to retrieve.","required":"yes"}]},"get_locale":{"desc":"Retrieves the current locale.","params":[]},"get_locale_stylesheet_uri":{"desc":"Retrieves the localized stylesheet URI.","params":[]},"get_main_network_id":{"desc":"Get the main network ID.","params":[]},"get_media_embedded_in_content":{"desc":"Check the content blob for an audio, video, object, embed, or iframe tags.","params":[{"param":"$content","desc":"A string which might contain media data.","required":"yes"},{"param":"$types","desc":"An array of media types: audio, video, object, embed, or iframe.","required":"no"}]},"get_media_item":{"desc":"Retrieve HTML form for modifying the image attachment.","params":[{"param":"$attachment_id","desc":"Attachment ID for modification.","required":"yes"},{"param":"$args","desc":" Override defaults.","required":"no"}]},"get_media_items":{"desc":"Retrieve HTML for media items of post gallery.","params":[{"param":"$post_id","desc":" Post ID.","required":"no"},{"param":"$errors","desc":"Errors for attachment, if any.","required":"no"}]},"get_metadata":{"desc":"Retrieve metadata for the specified object.","params":[{"param":"$meta_type","desc":"Type of object metadata is for (e.g., comment, post, or user)","required":"yes"},{"param":"$object_id","desc":"ID of the object metadata is for","required":"yes"},{"param":"$meta_key","desc":" Metadata key. If not specified, retrieve all metadata for    the specified object.","required":"no"},{"param":"$single","desc":" If true, return only the first value of the specified meta_key. This parameter has no effect if meta_key is not specified.","required":"no"}]},"get_metadata_by_mid":{"desc":"Get meta data by meta ID","params":[{"param":"$meta_type","desc":"Type of object metadata is for (e.g., comment, post, term, or user).","required":"yes"},{"param":"$meta_id","desc":"ID for a specific meta row","required":"yes"}]},"get_meta_keys":{"desc":"Get a list of previously defined keys.","params":[]},"get_meta_sql":{"desc":"Given a meta query, generates SQL clauses to be appended to a main query.","params":[{"param":"$meta_query","desc":"A meta query.","required":"yes"},{"param":"$type","desc":"Type of meta.","required":"yes"},{"param":"$primary_table","desc":"Primary database table name.","required":"yes"},{"param":"$primary_id_column","desc":"Primary ID column name.","required":"yes"},{"param":"$context","desc":" The main query object","required":"no"}]},"get_month_link":{"desc":"Retrieve the permalink for the month archives with year.","params":[{"param":"$year","desc":"False for current year. Integer of year.","required":"yes"},{"param":"$month","desc":"False for current month. Integer of month.","required":"yes"}]},"get_most_active_blogs":{"desc":"Deprecated functionality to retrieve a list of the most active sites.","params":[{"param":"$num","desc":" Number of activate blogs to retrieve. ","required":"no"},{"param":"$display","desc":" Whether or not to display the most active blogs list. ","required":"no"}]},"get_most_recent_post_of_user":{"desc":"Get a user’s most recent post.","params":[{"param":"$user_id","desc":"","required":"yes"}]},"get_mu_plugins":{"desc":"Check the mu-plugins directory and retrieve all mu-plugin files with any plugin data.","params":[]},"get_nav_menu_locations":{"desc":"Returns an array with the registered navigation menu locations and the menu assigned to it","params":[]},"get_network":{"desc":"Retrieves network data given a network ID or network object.","params":[{"param":"$network","desc":" Network to retrieve. Default is the current network.","required":"no"}]},"get_networks":{"desc":"Retrieves a list of networks.","params":[{"param":"$args","desc":" Array or string of arguments. See WP_Network_Query::parse_query() for information on accepted arguments. ","required":"no"}]},"get_network_by_path":{"desc":"Retrieve the closest matching network for a domain and path.","params":[{"param":"$domain","desc":"Domain to check.","required":"yes"},{"param":"$path","desc":"Path to check.","required":"yes"},{"param":"$segments","desc":"Path segments to use. Defaults to null, or the full path.","required":"no"}]},"get_network_option":{"desc":"Retrieve a network’s option value based on the option name.","params":[{"param":"$network_id","desc":"ID of the network. Can be null to default to the current network ID.","required":"yes"},{"param":"$option","desc":"Name of option to retrieve. Expected to not be SQL-escaped.","required":"yes"},{"param":"$default","desc":" Value to return if the option doesnt exist. ","required":"no"}]},"get_next_comments_link":{"desc":"Retrieves the link to the next comments page.","params":[{"param":"$label","desc":" Label for link text. ","required":"no"},{"param":"$max_page","desc":" Max page. Default 0.","required":"no"}]},"get_next_post":{"desc":"Retrieve next post that is adjacent to current post.","params":[{"param":"$in_same_term","desc":" Whether post should be in a same taxonomy term. ","required":"no"},{"param":"$excluded_terms","desc":" Array or comma-separated list of excluded term IDs. ","required":"no"},{"param":"$taxonomy","desc":" Taxonomy, if $in_same_term is true. ","required":"no"}]},"get_next_posts_link":{"desc":"Return the next posts page link.","params":[{"param":"$label","desc":"Content for link text.","required":"no"},{"param":"$max_page","desc":" Max pages. Default 0.","required":"no"}]},"get_next_posts_page_link":{"desc":"Retrieves the next posts page link.","params":[{"param":"$max_page","desc":" Max pages. Default 0.","required":"no"}]},"get_next_post_link":{"desc":"Get next post link that is adjacent to the current post.","params":[{"param":"$format","desc":" Link anchor format. Default « %link.","required":"no"},{"param":"$link","desc":" Link permalink format. ","required":"no"},{"param":"$in_same_term","desc":" Whether link should be in a same taxonomy term. ","required":"no"},{"param":"$excluded_terms","desc":" Array or comma-separated list of excluded term IDs. ","required":"no"},{"param":"$taxonomy","desc":" Taxonomy, if $in_same_term is true. ","required":"no"}]},"get_nonauthor_user_ids":{"desc":"Gets all users who are not authors.","params":[]},"get_num_queries":{"desc":"Retrieve the number of database queries during the WordPress execution.","params":[]},"get_objects_in_term":{"desc":"Retrieve object_ids of valid taxonomy and term.","params":[{"param":"$term_ids","desc":"Term id or array of term ids of terms that will be used.","required":"yes"},{"param":"$taxonomies","desc":"String of taxonomy name or Array of string values of taxonomy names.","required":"yes"},{"param":"$args","desc":"Change the order of the object_ids, either ASC or DESC.","required":"no"}]},"get_object_taxonomies":{"desc":"Return the names or objects of the taxonomies which are registered for the requested object or object type, such as a post object or post type name.","params":[{"param":"$object","desc":"Name of the type of taxonomy object, or an object (row from posts)","required":"yes"},{"param":"$output","desc":" The type of output to return in the array. Accepts either taxonomy names or objects. ","required":"no"}]},"get_object_term_cache":{"desc":"Retrieves the taxonomy relationship to the term object id.","params":[{"param":"$id","desc":"Term object ID.","required":"yes"},{"param":"$taxonomy","desc":"Taxonomy name.","required":"yes"}]},"get_oembed_endpoint_url":{"desc":"Retrieves the oEmbed endpoint URL for a given permalink.","params":[{"param":"$permalink","desc":" The permalink used for the url query arg. ","required":"no"},{"param":"$format","desc":" The requested response format. ","required":"no"}]},"get_oembed_response_data":{"desc":"Retrieves the oEmbed response data for a given post.","params":[{"param":"$post","desc":"Post object or ID.","required":"yes"},{"param":"$width","desc":"The requested width.","required":"yes"}]},"get_oembed_response_data_rich":{"desc":"Filters the oEmbed response data to return an iframe embed code.","params":[{"param":"$data","desc":"The response data.","required":"yes"},{"param":"$post","desc":"The post object.","required":"yes"},{"param":"$width","desc":"The requested width.","required":"yes"},{"param":"$height","desc":"The calculated height.","required":"yes"}]},"get_option":{"desc":"Retrieves an option value based on an option name.","params":[{"param":"$option","desc":"Name of option to retrieve. Expected to not be SQL-escaped.","required":"yes"},{"param":"$default","desc":" Default value to return if the option does not exist.","required":"no"}]},"get_others_drafts":{"desc":"Retrieve drafts from other users.","params":[{"param":"$user_id","desc":"User ID.","required":"yes"}]},"get_others_pending":{"desc":"Retrieve pending review posts from other users.","params":[{"param":"$user_id","desc":"User ID.","required":"yes"}]},"get_others_unpublished_posts":{"desc":"Retrieves editable posts from other users.","params":[{"param":"$user_id","desc":"User ID to not retrieve posts from.","required":"yes"},{"param":"$type","desc":" Post type to retrieve. Accepts draft, pending or any (all). ","required":"no"}]},"get_page":{"desc":"Retrieves page data given a page ID or page object.","params":[{"param":"$page","desc":"Page object or page ID. Passed by reference.","required":"yes"},{"param":"$output","desc":" The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Post object, an associative array, or a numeric array, respectively. ","required":"no"},{"param":"$filter","desc":" How the return value should be filtered. Accepts raw, edit, db, display. ","required":"no"}]},"get_paged_template":{"desc":"Retrieve path of paged template in current or parent template.","params":[]},"get_pagenum_link":{"desc":"Retrieves the link for a page number.","params":[{"param":"$pagenum","desc":" Page ID. ","required":"no"},{"param":"$escape","desc":" Whether to escape the URL for display, with esc_url(). Defaults to true.   Otherwise, prepares the URL with esc_url_raw().","required":"no"}]},"get_pages":{"desc":"Retrieve a list of pages.","params":[{"param":"$args","desc":"Array or string of arguments to retrieve pages. child_of(int) Page ID to return child and grandchild pages of. Note: The value of $hierarchical has no bearing on whether $child_of returns hierarchical results. Default 0, or no restriction. sort_order(string) How to sort retrieved pages. Accepts ASC, DESC. Default ASC. sort_column(string) What columns to sort pages by, comma-separated. Accepts post_author, post_date, post_title, post_name, post_modified, menu_order, post_modified_gmt, post_parent, ID, rand, comment*count. post* can be omitted for any values that start with it. Default post_title. hierarchical(bool) Whether to return pages hierarchically. If false in conjunction with $child_of also being false, both arguments will be disregarded. Default true. exclude(array) Array of page IDs to exclude.  include(array) Array of page IDs to include. Cannot be used with $child_of, $parent, $exclude, $meta_key, $meta_value, or $hierarchical.  meta_key(string) Only include pages with this meta key.  meta_value(string) Only include pages with this meta value. Requires $meta_key.  authors(string) A comma-separated list of author IDs.  parent(int) Page ID to return direct children of. Default -1, or no restriction. exclude_tree(string|array) Comma-separated string or array of page IDs to exclude.  number(int) The number of pages to return. Default 0, or all pages. offset(int) The number of pages to skip before returning. Requires $number. Default 0. post_type(string) The post type to query. Default page. post_status(string|array) A comma-separated list or array of post statuses to include. Default publish.  ","required":"no"}]},"get_page_by_path":{"desc":"Retrieves a page given its path.","params":[{"param":"$page_path","desc":"Page path.","required":"yes"},{"param":"$output","desc":" The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Post object, an associative array, or a numeric array, respectively. ","required":"no"},{"param":"$post_type","desc":" Post type or array of post types. ","required":"no"}]},"get_page_by_title":{"desc":"Retrieve a page given its title.","params":[{"param":"$page_title","desc":"Page title","required":"yes"},{"param":"$output","desc":" The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Post object, an associative array, or a numeric array, respectively. ","required":"no"},{"param":"$post_type","desc":" Post type or array of post types. ","required":"no"}]},"get_page_children":{"desc":"Identify descendants of a given page ID in a list of page objects.","params":[{"param":"$page_id","desc":"Page ID.","required":"yes"},{"param":"$pages","desc":"List of page objects from which descendants should be identified.","required":"yes"}]},"get_page_hierarchy":{"desc":"Order the pages with children under parents in a flat list.","params":[{"param":"$pages","desc":"Posts array, passed by reference.","required":"yes"},{"param":"$page_id","desc":" Parent page ID. Default 0.","required":"no"}]},"get_page_link":{"desc":"Retrieves the permalink for the current page or page ID.","params":[{"param":"$post","desc":" Post ID or object. Default uses the global $post.","required":"no"},{"param":"$leavename","desc":" Whether to keep the page name. ","required":"no"},{"param":"$sample","desc":" Whether it should be treated as a sample permalink. ","required":"no"}]},"get_page_of_comment":{"desc":"Calculate what page number a comment will appear on for comment paging.","params":[{"param":"$comment_ID","desc":"Comment ID.","required":"yes"},{"param":"$args","desc":"Array of optional arguments. type(string) Limit paginated comments to those matching a given type. Accepts comment, trackback, pingback, pings (trackbacks and pingbacks), or all. Default is all. per_page(int) Per-page count to use when calculating pagination. Defaults to the value of the comments_per_page option. max_depth(int|string) If greater than 1, comment page will be determined for the top-level parent of $comment_ID. Defaults to the value of the thread_comments_depth option.    ","required":"no"}]},"get_page_statuses":{"desc":"Retrieve all of the WordPress support page statuses.","params":[]},"get_page_template":{"desc":"Retrieve path of page template in current or parent template.","params":[]},"get_page_templates":{"desc":"Get the Page Templates available in this theme","params":[{"param":"$post","desc":" The post being edited, provided for context.","required":"no"},{"param":"$post_type","desc":" Post type to get the templates for. ","required":"no"}]},"get_page_template_slug":{"desc":"Get the specific template name for a page.","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"get_page_uri":{"desc":"Build the URI path for a page.","params":[{"param":"$page","desc":" Page ID or WP_Post object. Default is global $post.","required":"no"}]},"get_parent_post_rel_link":{"desc":"Get parent post relational link.","params":[{"param":"$title","desc":" Link title format. ","required":"no"}]},"get_parent_theme_file_path":{"desc":"Retrieves the path of a file in the parent theme.","params":[{"param":"$file","desc":" File to return the path for in the template directory.","required":"no"}]},"get_parent_theme_file_uri":{"desc":"Retrieves the URL of a file in the parent theme.","params":[{"param":"$file","desc":" File to return the URL for in the template directory.","required":"no"}]},"get_password_reset_key":{"desc":"Creates, stores, then returns a password reset key for user.","params":[{"param":"$user","desc":"User to retrieve password reset key for.","required":"yes"}]},"get_pending_comments_num":{"desc":"Get the number of pending comments on a post or posts","params":[{"param":"$post_id","desc":"Either a single Post ID or an array of Post IDs","required":"yes"}]},"get_permalink":{"desc":"Retrieves the full permalink for the current post or post ID.","params":[{"param":"$post","desc":" Post ID or post object. Default is the global $post.","required":"no"},{"param":"$leavename","desc":" Whether to keep post name or page name. ","required":"no"}]},"get_plugins":{"desc":"Check the plugins directory and retrieve all plugin files with plugin data.","params":[{"param":"$plugin_folder","desc":" Relative path to single plugin folder.","required":"no"}]},"get_plugin_data":{"desc":"Parses the plugin contents to retrieve plugin’s metadata.","params":[{"param":"$plugin_file","desc":"Path to the plugin file","required":"yes"},{"param":"$markup","desc":" If the returned data should have HTML markup applied. ","required":"no"},{"param":"$translate","desc":" If the returned data should be translated. ","required":"no"}]},"get_plugin_files":{"desc":"Get a list of a plugin’s files.","params":[{"param":"$plugin","desc":"Plugin ID","required":"yes"}]},"get_plugin_page_hook":{"desc":"","params":[{"param":"$plugin_page","desc":"","required":"yes"},{"param":"$parent_page","desc":"","required":"yes"}]},"get_plugin_page_hookname":{"desc":"","params":[{"param":"$plugin_page","desc":"","required":"yes"},{"param":"$parent_page","desc":"","required":"yes"}]},"get_plugin_updates":{"desc":"","params":[]},"get_post":{"desc":"Retrieves post data given a post ID or post object.","params":[{"param":"$post","desc":" Post ID or post object. Defaults to global $post.","required":"no"},{"param":"$output","desc":" The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Post object, an associative array, or a numeric array, respectively. ","required":"no"},{"param":"$filter","desc":" Type of filter to apply. Accepts raw, edit, db, or display. ","required":"no"}]},"get_postdata":{"desc":"Entire Post data.","params":[{"param":"$postid","desc":"Post ID.","required":"yes"}]},"get_posts":{"desc":"Retrieve list of latest posts or posts matching criteria.","params":[{"param":"$args","desc":"Arguments to retrieve posts. See WP_Query::parse_query() for all available arguments. numberposts(int) Total number of posts to retrieve. Is an alias of $posts_per_page in WP_Query. Accepts -1 for all. Default 5. category(int|string) Category ID or comma-separated list of IDs (this or any children). Is an alias of $cat in WP_Query. Default 0. include(array) An array of post IDs to retrieve, sticky posts will be included. Is an alias of $post__in in WP_Query. Default empty array. exclude(array) An array of post IDs not to retrieve. Default empty array. suppress_filters(bool) Whether to suppress filters. Default true.  ","required":"no"}]},"get_posts_by_author_sql":{"desc":"Retrieve the post SQL based on capability, author, and type.","params":[{"param":"$post_type","desc":"Single post type or an array of post types.","required":"yes"},{"param":"$full","desc":" Returns a full WHERE statement instead of just an andalso term. ","required":"no"},{"param":"$post_author","desc":" Query posts having a single author ID. ","required":"no"},{"param":"$public_only","desc":" Only return public posts. Skips cap checks for $current_user. ","required":"no"}]},"get_posts_nav_link":{"desc":"Return post pages link navigation for previous and next pages.","params":[{"param":"$args","desc":"Arguments to build the post pages link navigation. sep(string) Separator character. Default —. prelabel(string) Link text to display for the previous page link. Default « Previous Page. nxtlabel(string) Link text to display for the next page link. Default Next Page ».  ","required":"no"}]},"get_post_ancestors":{"desc":"Retrieve ancestors of a post.","params":[{"param":"$post","desc":"Post ID or post object.","required":"yes"}]},"get_post_class":{"desc":"Retrieve the classes for the post div as an array.","params":[{"param":"$class","desc":"One or more classes to add to the class list.","required":"no"},{"param":"$post_id","desc":" Post ID or post object.","required":"no"}]},"get_post_comments_feed_link":{"desc":"Retrieves the permalink for the post comments feed.","params":[{"param":"$post_id","desc":" Post ID. Default is the ID of the global $post.","required":"no"},{"param":"$feed","desc":" Feed type. ","required":"no"}]},"get_post_custom":{"desc":"Retrieve post meta fields, based on post ID.","params":[{"param":"$post_id","desc":" Post ID. Default is ID of the global $post.","required":"no"}]},"get_post_custom_keys":{"desc":"Retrieve meta field names for a post.","params":[{"param":"$post_id","desc":" Post ID. Default is ID of the global $post.","required":"no"}]},"get_post_custom_values":{"desc":"Retrieve values for a custom post field.","params":[{"param":"$key","desc":" Meta field key. ","required":"no"},{"param":"$post_id","desc":" Post ID. Default is ID of the global $post.","required":"no"}]},"get_post_embed_html":{"desc":"Retrieves the embed code for a specific post.","params":[{"param":"$width","desc":"The width for the response.","required":"yes"},{"param":"$height","desc":"The height for the response.","required":"yes"},{"param":"$post","desc":" Post ID or object. Default is global $post.","required":"no"}]},"get_post_embed_url":{"desc":"Retrieves the URL to embed a specific post in an iframe.","params":[{"param":"$post","desc":" Post ID or object. Defaults to the current post.","required":"no"}]},"get_post_field":{"desc":"Retrieve data from a post field based on Post ID.","params":[{"param":"$field","desc":"Post field name.","required":"yes"},{"param":"$post","desc":" Post ID or post object. Defaults to current post.","required":"no"},{"param":"$context","desc":" How to filter the field. Accepts raw, edit, db, or display. ","required":"no"}]},"get_post_format":{"desc":"Retrieve the format slug for a post","params":[{"param":"$post","desc":"Post ID or post object. Optional, default is the current post from the loop.","required":"no"}]},"get_post_format_link":{"desc":"Returns a link to a post format index.","params":[{"param":"$format","desc":"The post format slug.","required":"yes"}]},"get_post_format_slugs":{"desc":"Retrieves an array of post format slugs.","params":[]},"get_post_format_string":{"desc":"Returns a pretty, translated version of a post format slug","params":[{"param":"$slug","desc":"A post format slug.","required":"yes"}]},"get_post_format_strings":{"desc":"Returns an array of post format slugs to their translated and pretty display versions","params":[]},"get_post_galleries":{"desc":"Retrieves galleries from the passed post’s content.","params":[{"param":"$post","desc":"Post ID or object.","required":"yes"},{"param":"$html","desc":" Whether to return HTML or data in the array. ","required":"no"}]},"get_post_galleries_images":{"desc":"Retrieve the image srcs from galleries from a post’s content, if present","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"get_post_gallery":{"desc":"Check a specified post’s content for gallery and, if present, return the first","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"},{"param":"$html","desc":" Whether to return HTML or data. Default is true.","required":"no"}]},"get_post_gallery_images":{"desc":"Checks a post’s content for galleries and return the image srcs for the first found gallery","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"get_post_meta":{"desc":"Retrieve post meta field for a post.","params":[{"param":"$post_id","desc":"Post ID.","required":"yes"},{"param":"$key","desc":" The meta key to retrieve. By default, returns data for all keys. ","required":"no"},{"param":"$single","desc":" Whether to return a single value. ","required":"no"}]},"get_post_meta_by_id":{"desc":"Get post meta data by meta ID.","params":[{"param":"$mid","desc":"","required":"yes"}]},"get_post_mime_type":{"desc":"Retrieve the mime type of an attachment based on the ID.","params":[{"param":"$ID","desc":" Post ID or post object. ","required":"no"}]},"get_post_mime_types":{"desc":"Get default post mime types.","params":[]},"get_post_modified_time":{"desc":"Retrieve the time at which the post was last modified.","params":[{"param":"$d","desc":" Format to use for retrieving the time the post was modified. Either G, U, or php date format. ","required":"no"},{"param":"$gmt","desc":" Whether to retrieve the GMT time. ","required":"no"},{"param":"$post","desc":"WP_Post object or ID. Default is global $post object.","required":"no"},{"param":"$translate","desc":"Whether to translate the time string. ","required":"no"}]},"get_post_permalink":{"desc":"Retrieve the permalink for a post with a custom post type.","params":[{"param":"$id","desc":" Post ID. Default uses the global $post.","required":"no"},{"param":"$leavename","desc":" defaults to false. Whether to keep post name. ","required":"no"},{"param":"$sample","desc":" defaults to false. Is it a sample permalink. ","required":"no"}]},"get_post_reply_link":{"desc":"Retrieve HTML content for reply to post link.","params":[{"param":"$args","desc":"Override default arguments. add_below(string) The first part of the selector used to identify the comment to respond below. The resulting value is passed as the first parameter to addComment.moveForm(), concatenated as $add_below-$comment->comment_ID. Default is post. respond_id(string) The selector identifying the responding comment. Passed as the third parameter to addComment.moveForm(), and appended to the link URL as a hash value. Default respond. reply_text(string) Text of the Reply link. Default is Leave a Comment. login_text(string) Text of the link to reply if logged out. Default is Log in to leave a Comment. before(string) Text or HTML to add before the reply link.  after(string) Text or HTML to add after the reply link.   ","required":"no"},{"param":"$post","desc":" Post ID or WP_Post object the comment is going to be displayed on. Default current post.","required":"no"}]},"get_post_stati":{"desc":"Get a list of post statuses.","params":[{"param":"$args","desc":" Array or string of post status arguments to compare against properties of the global $wp_post_statuses objects. ","required":"no"},{"param":"$output","desc":" The type of output to return, either names or objects. ","required":"no"},{"param":"$operator","desc":" The logical operation to perform. or means only one element from the array needs to match; and means all elements must match. ","required":"no"}]},"get_post_status":{"desc":"Retrieve the post status based on the Post ID.","params":[{"param":"$ID","desc":" Post ID or post object. ","required":"no"}]},"get_post_statuses":{"desc":"Retrieve all of the WordPress supported post statuses.","params":[]},"get_post_status_object":{"desc":"Retrieve a post status object by name.","params":[{"param":"$post_status","desc":"The name of a registered post status.","required":"yes"}]},"get_post_taxonomies":{"desc":"Retrieve all taxonomies of a post with just the names.","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"get_post_thumbnail_id":{"desc":"Retrieve post thumbnail ID.","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"get_post_time":{"desc":"Retrieve the time at which the post was written.","params":[{"param":"$d","desc":" Format to use for retrieving the time the post was written. Either G, U, or php date format. ","required":"no"},{"param":"$gmt","desc":" Whether to retrieve the GMT time. ","required":"no"},{"param":"$post","desc":"WP_Post object or ID. Default is global $post object.","required":"no"},{"param":"$translate","desc":"Whether to translate the time string. ","required":"no"}]},"get_post_to_edit":{"desc":"Gets an existing post and format it for editing.","params":[{"param":"$id","desc":"","required":"yes"}]},"get_post_type":{"desc":"Retrieves the post type of the current post or of a given post.","params":[{"param":"$post","desc":" Post ID or post object. Default is global $post.","required":"no"}]},"get_post_types":{"desc":"Get a list of all registered post type objects.","params":[{"param":"$args","desc":" An array of key => value arguments to match against the post type objects. ","required":"no"},{"param":"$output","desc":" The type of output to return. Accepts post type names or objects. ","required":"no"},{"param":"$operator","desc":" The logical operation to perform. or means only one element from the array needs to match; and means all elements must match; not means no elements may match. ","required":"no"}]},"get_post_types_by_support":{"desc":"Retrieves a list of post type names that support a specific feature.","params":[{"param":"$feature","desc":"Single feature or an array of features the post types should support.","required":"yes"},{"param":"$operator","desc":" The logical operation to perform. or means only one element from the array needs to match; and means all elements must match; not means no elements may match. ","required":"no"}]},"get_post_type_archive_feed_link":{"desc":"Retrieves the permalink for a post type archive feed.","params":[{"param":"$post_type","desc":"Post type","required":"yes"},{"param":"$feed","desc":" Feed type. ","required":"no"}]},"get_post_type_archive_link":{"desc":"Retrieves the permalink for a post type archive.","params":[{"param":"$post_type","desc":"Post type.","required":"yes"}]},"get_post_type_archive_template":{"desc":"Retrieve path of post type archive template in current or parent template.","params":[]},"get_post_type_capabilities":{"desc":"Build an object with all post type capabilities out of a post type object","params":[{"param":"$args","desc":"Post type registration arguments.","required":"yes"}]},"get_post_type_labels":{"desc":"Build an object with all post type labels out of a post type object","params":[{"param":"$post_type_object","desc":"Post type object.","required":"yes"}]},"get_post_type_object":{"desc":"Retrieves a post type object by name.","params":[{"param":"$post_type","desc":"The name of a registered post type.","required":"yes"}]},"get_preferred_from_update_core":{"desc":"Selects the first update version from the update_core option.","params":[]},"get_preview_post_link":{"desc":"Retrieves the URL used for the post preview.","params":[{"param":"$post","desc":" Post ID or WP_Post object. Defaults to global $post.","required":"no"},{"param":"$query_args","desc":" Array of additional query args to be appended to the link. ","required":"no"},{"param":"$preview_link","desc":" Base preview link to be used if it should differ from the post permalink. ","required":"no"}]},"get_previous_comments_link":{"desc":"Retrieves the link to the previous comments page.","params":[{"param":"$label","desc":" Label for comments link text. ","required":"no"}]},"get_previous_post":{"desc":"Retrieves the previous post that is adjacent to the current post.","params":[{"param":"$in_same_term","desc":" Whether post should be in a same taxonomy term. ","required":"no"},{"param":"$excluded_terms","desc":" Array or comma-separated list of excluded term IDs. ","required":"no"},{"param":"$taxonomy","desc":" Taxonomy, if $in_same_term is true. ","required":"no"}]},"get_previous_posts_link":{"desc":"Return the previous posts page link.","params":[{"param":"$label","desc":" Previous page link text.","required":"no"}]},"get_previous_posts_page_link":{"desc":"Retrieves the previous posts page link.","params":[]},"get_previous_post_link":{"desc":"Retrieves the previous post link that is adjacent to the current post.","params":[{"param":"$format","desc":" Link anchor format. Default « %link.","required":"no"},{"param":"$link","desc":" Link permalink format. Default %title%.","required":"no"},{"param":"$in_same_term","desc":" Whether link should be in a same taxonomy term. ","required":"no"},{"param":"$excluded_terms","desc":" Array or comma-separated list of excluded term IDs. ","required":"no"},{"param":"$taxonomy","desc":" Taxonomy, if $in_same_term is true. ","required":"no"}]},"get_private_posts_cap_sql":{"desc":"Retrieve the private post SQL based on capability.","params":[{"param":"$post_type","desc":"Single post type or an array of post types. Currently only supports post or page.","required":"yes"}]},"get_profile":{"desc":"Retrieve user data based on field.","params":[{"param":"$field","desc":"User meta field.","required":"yes"},{"param":"$user","desc":" User ID to retrieve the field for. Default false (current user).","required":"no"}]},"get_pung":{"desc":"Retrieve URLs already pinged for a post.","params":[{"param":"$post_id","desc":"Post ID or object.","required":"yes"}]},"get_queried_object":{"desc":"Retrieve the currently-queried object.","params":[]},"get_queried_object_id":{"desc":"Retrieve ID of the current queried object.","params":[]},"get_query_template":{"desc":"Retrieve path to a template","params":[{"param":"$type","desc":"Filename without extension.","required":"yes"},{"param":"$templates","desc":"An optional list of template candidates","required":"no"}]},"get_query_var":{"desc":"Retrieve variable in the WP_Query class.","params":[{"param":"$var","desc":"The variable key to retrieve.","required":"yes"},{"param":"$default","desc":" Value to return if the query variable is not set. ","required":"no"}]},"get_random_header_image":{"desc":"Get random header image url from registered images in theme.","params":[]},"get_raw_theme_root":{"desc":"Get the raw theme root relative to the content directory with no filters applied.","params":[{"param":"$stylesheet_or_template","desc":"The stylesheet or template name of the theme","required":"yes"},{"param":"$skip_cache","desc":" Whether to skip the cache. Defaults to false, meaning the cache is used.","required":"no"}]},"get_real_file_to_edit":{"desc":"Get the real filesystem path to a file to edit within the admin.","params":[{"param":"$file","desc":"Filesystem path relative to the wp-content directory.","required":"yes"}]},"get_registered_metadata":{"desc":"Retrieves registered metadata for a specified object.","params":[{"param":"$object_type","desc":"Type of object to request metadata for. (e.g. comment, post, term, user)","required":"yes"},{"param":"$object_id","desc":"ID of the object the metadata is for.","required":"yes"},{"param":"$meta_key","desc":" Registered metadata key. If not specified, retrieve all registered metadata for the specified object.","required":"no"}]},"get_registered_meta_keys":{"desc":"Retrieves a list of registered meta keys for an object type.","params":[{"param":"$object_type","desc":"The type of object. Post, comment, user, term.","required":"yes"}]},"get_registered_nav_menus":{"desc":"Retrieves all registered navigation menu locations in a theme.","params":[]},"get_registered_settings":{"desc":"Retrieves an array of registered settings.","params":[]},"get_rest_url":{"desc":"Retrieves the URL to a REST endpoint on a site.","params":[{"param":"$blog_id","desc":" Blog ID. Default of null returns URL for current blog.","required":"no"},{"param":"$path","desc":" REST route. ","required":"no"},{"param":"$scheme","desc":" Sanitization scheme. ","required":"no"}]},"get_role":{"desc":"Retrieve role object.","params":[{"param":"$role","desc":"Role name.","required":"yes"}]},"get_rss":{"desc":"Display RSS items in HTML list items.","params":[{"param":"$url","desc":"URL of feed to display. Will not auto sense feed URL.","required":"yes"},{"param":"$num_items","desc":" Number of items to display, default is all.","required":"no"}]},"get_sample_permalink":{"desc":"Get a sample permalink based off of the post name.","params":[{"param":"$id","desc":"Post ID or post object.","required":"yes"},{"param":"$title","desc":" Title to override the posts current title when generating the post name. ","required":"no"},{"param":"$name","desc":" Name to override the post name. ","required":"no"}]},"get_sample_permalink_html":{"desc":"Returns the HTML of the sample permalink slug editor.","params":[{"param":"$id","desc":"Post ID or post object.","required":"yes"},{"param":"$new_title","desc":" New title. ","required":"no"},{"param":"$new_slug","desc":" New slug. ","required":"no"}]},"get_screen_icon":{"desc":"Retrieves the screen icon (no longer used in 3.8+).","params":[]},"get_search_comments_feed_link":{"desc":"Retrieves the permalink for the search results comments feed.","params":[{"param":"$search_query","desc":" Search query. ","required":"no"},{"param":"$feed","desc":" Feed type. ","required":"no"}]},"get_search_feed_link":{"desc":"Retrieve the permalink for the feed of the search results.","params":[{"param":"$search_query","desc":" Search query. ","required":"no"},{"param":"$feed","desc":" Feed type. ","required":"no"}]},"get_search_form":{"desc":"Display search form.","params":[{"param":"$echo","desc":"Default to echo and not return the form.","required":"no"}]},"get_search_link":{"desc":"Retrieves the permalink for a search.","params":[{"param":"$query","desc":" The query string to use. If empty the current query is used. ","required":"no"}]},"get_search_query":{"desc":"Retrieve the contents of the search WordPress query variable.","params":[{"param":"$escaped","desc":"Whether the result is escaped.   Only use when you are later escaping it. Do not use unescaped.","required":"no"}]},"get_search_template":{"desc":"Retrieve path of search template in current or parent template.","params":[]},"get_settings":{"desc":"Get value based on option.","params":[{"param":"$option","desc":"","required":"yes"}]},"get_settings_errors":{"desc":"Fetch settings errors registered by add_settings_error()","params":[{"param":"$setting","desc":"slug title of a specific setting whos errors you want.","required":"no"},{"param":"$sanitize","desc":"Whether to re-sanitize the setting value before returning errors.","required":"no"}]},"get_shortcode_atts_regex":{"desc":"Retrieve the shortcode attributes regex.","params":[]},"get_shortcode_regex":{"desc":"Retrieve the shortcode regular expression for searching.","params":[{"param":"$tagnames","desc":" List of shortcodes to find. Defaults to all registered shortcodes.","required":"no"}]},"get_shortcut_link":{"desc":"Retrieves the Press This bookmarklet link.","params":[]},"get_sidebar":{"desc":"Load sidebar template.","params":[{"param":"$name","desc":"The name of the specialised sidebar.","required":"no"}]},"get_single_template":{"desc":"Retrieve path of single template in current or parent template. Applies to single Posts, single Attachments, and single custom post types.","params":[]},"get_singular_template":{"desc":"Retrieves the path of the singular template in current or parent template.","params":[]},"get_site":{"desc":"Retrieves site data given a site ID or site object.","params":[{"param":"$site","desc":" Site to retrieve. Default is the current site.","required":"no"}]},"get_sites":{"desc":"Retrieves a list of sites matching requested arguments.","params":[{"param":"$args","desc":"Array or query string of site query parameters. site__in(array) Array of site IDs to include.  site__not_in(array) Array of site IDs to exclude.  count(bool) Whether to return a site count (true) or array of site objects. Default false. date_query(array) Date query clauses to limit sites by. See WP_Date_Query. Default null. fields(string) Site fields to return. Accepts ids (returns an array of site IDs) or empty (returns an array of complete site objects).  ID(int) A site ID to only return that site.  number(int) Maximum number of sites to retrieve. Default 100. offset(int) Number of sites to offset the query. Used to build LIMIT clause. Default 0. no_found_rows(bool) Whether to disable the SQL_CALC_FOUND_ROWS query. Default true. orderby(string|array) Site status or array of statuses. Accepts id, domain, path, network_id, last_updated, registered, domain_length, path_length, site__in and network__in. Also accepts false, an empty array, or none to disable ORDER BY clause. Default id. order(string) How to order retrieved sites. Accepts ASC, DESC. Default ASC. network_id(int) Limit results to those affiliated with a given network ID. If 0, include all networks. Default 0. network__in(array) Array of network IDs to include affiliated sites for.  network__not_in(array) Array of network IDs to exclude affiliated sites for.  domain(string) Limit results to those affiliated with a given domain.  domain__in(array) Array of domains to include affiliated sites for.  domain__not_in(array) Array of domains to exclude affiliated sites for.  path(string) Limit results to those affiliated with a given path.  path__in(array) Array of paths to include affiliated sites for.  path__not_in(array) Array of paths to exclude affiliated sites for.  public(int) Limit results to public sites. Accepts 1 or 0.  archived(int) Limit results to archived sites. Accepts 1 or 0.  mature(int) Limit results to mature sites. Accepts 1 or 0.  spam(int) Limit results to spam sites. Accepts 1 or 0.  deleted(int) Limit results to deleted sites. Accepts 1 or 0.  search(string) Search term(s) to retrieve matching sites for.  search_columns(array) Array of column names to be searched. Accepts domain and path.  update_site_cache(bool) Whether to prime the cache for found sites. Default false.  ","required":"no"}]},"get_sitestats":{"desc":"Gets the network’s site and user counts.","params":[]},"get_site_allowed_themes":{"desc":"Deprecated functionality for getting themes network-enabled themes.","params":[]},"get_site_by_path":{"desc":"Retrieves the closest matching site object by its domain and path.","params":[{"param":"$domain","desc":"Domain to check.","required":"yes"},{"param":"$path","desc":"Path to check.","required":"yes"},{"param":"$segments","desc":"Path segments to use. Defaults to null, or the full path.","required":"no"}]},"get_site_icon_url":{"desc":"Returns the Site Icon URL.","params":[{"param":"$size","desc":" Size of the site icon. Default 512 (pixels).","required":"no"},{"param":"$url","desc":" Fallback url if no site icon is found. ","required":"no"},{"param":"$blog_id","desc":" ID of the blog to get the site icon for. Default current blog.","required":"no"}]},"get_site_option":{"desc":"Retrieve an option value for the current network based on name of option.","params":[{"param":"$option","desc":"Name of option to retrieve. Expected to not be SQL-escaped.","required":"yes"},{"param":"$default","desc":"value to return if option doesnt exist. ","required":"no"},{"param":"$deprecated","desc":"Whether to use cache. Multisite only. Always set to true.","required":"no"}]},"get_site_transient":{"desc":"Get the value of a site transient.","params":[{"param":"$transient","desc":"Transient name. Expected to not be SQL-escaped.","required":"yes"}]},"get_site_url":{"desc":"Retrieve the site url for a given site.","params":[{"param":"$blog_id","desc":" Site ID. Default null (current site).","required":"no"},{"param":"$path","desc":" Path relative to the site URL. ","required":"no"},{"param":"$scheme","desc":" Scheme to give the site URL context. Accepts http, https, login, login_post, admin, or relative. ","required":"no"}]},"get_space_allowed":{"desc":"Returns the upload quota for the current blog.","params":[]},"get_space_used":{"desc":"Returns the space used by the current blog.","params":[]},"get_status_header_desc":{"desc":"Retrieve the description for the HTTP status.","params":[{"param":"$code","desc":"HTTP status code.","required":"yes"}]},"get_stylesheet":{"desc":"Retrieve name of the current stylesheet.","params":[]},"get_stylesheet_directory":{"desc":"Retrieve stylesheet directory path for current theme.","params":[]},"get_stylesheet_directory_uri":{"desc":"Retrieve stylesheet directory URI.","params":[]},"get_stylesheet_uri":{"desc":"Retrieve URI of current theme stylesheet.","params":[]},"get_subdirectory_reserved_names":{"desc":"Retrieves a list of reserved site on a sub-directory Multisite install.","params":[]},"get_submit_button":{"desc":"Returns a submit button, with provided text and appropriate class","params":[{"param":"$text","desc":" The text of the button. Default Save Changes.","required":"no"},{"param":"$type","desc":" The type of button. Accepts primary, secondary, or delete. ","required":"no"},{"param":"$name","desc":" The HTML name of the submit button. Defaults to submit. If no id attribute is given in $other_attributes below, $name will be used as the buttons id. ","required":"no"},{"param":"$wrap","desc":" True if the output button should be wrapped in a paragraph tag, false otherwise. ","required":"no"},{"param":"$other_attributes","desc":" Other attributes that should be output with the button, mapping attributes to their values, such as array( tabindex => 1 ). These attributes will be output as attribute=value, such as tabindex=1. Other attributes can also be provided as a string such as tabindex=1, though the array format is typically cleaner. ","required":"no"}]},"get_super_admins":{"desc":"Retrieve a list of super admins.","params":[]},"get_tag":{"desc":"Retrieve post tag by tag ID or tag object.","params":[{"param":"$tag","desc":"A tag ID or object.","required":"yes"},{"param":"$output","desc":" The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Term object, an associative array, or a numeric array, respectively. ","required":"no"},{"param":"$filter","desc":" Default is raw or no WordPress defined filter will applied.","required":"no"}]},"get_tags":{"desc":"Retrieves all post tags.","params":[{"param":"$args","desc":"Tag arguments to use when retrieving tags.","required":"no"}]},"get_tags_to_edit":{"desc":"Get comma-separated list of tags available to edit.","params":[{"param":"$post_id","desc":"","required":"yes"},{"param":"$taxonomy","desc":" The taxonomy for which to retrieve terms. ","required":"no"}]},"get_tag_feed_link":{"desc":"Retrieves the permalink for a tag feed.","params":[{"param":"$tag_id","desc":"Tag ID.","required":"yes"},{"param":"$feed","desc":" Feed type. ","required":"no"}]},"get_tag_link":{"desc":"Retrieve the link to the tag.","params":[{"param":"$tag","desc":"Tag ID or object.","required":"yes"}]},"get_tag_regex":{"desc":"Return RegEx body to liberally match an opening HTML tag.","params":[{"param":"$tag","desc":"An HTML tag name. Example: video.","required":"yes"}]},"get_tag_template":{"desc":"Retrieve path of tag template in current or parent template.","params":[]},"get_taxonomies":{"desc":"Retrieves a list of registered taxonomy names or objects.","params":[{"param":"$args","desc":" An array of key => value arguments to match against the taxonomy objects. ","required":"no"},{"param":"$output","desc":" The type of output to return in the array. Accepts either taxonomy names or objects. ","required":"no"},{"param":"$operator","desc":" The logical operation to perform. Accepts and or or. or means only one element from the array needs to match; and means all elements must match. ","required":"no"}]},"get_taxonomies_for_attachments":{"desc":"Retrieves all of the taxonomy names that are registered for attachments.","params":[{"param":"$output","desc":" The type of taxonomy output to return. Accepts names or objects. ","required":"no"}]},"get_taxonomy":{"desc":"Retrieves the taxonomy object of $taxonomy.","params":[{"param":"$taxonomy","desc":"Name of taxonomy object to return.","required":"yes"}]},"get_taxonomy_labels":{"desc":"Builds an object with all taxonomy labels out of a taxonomy object","params":[{"param":"$tax","desc":"Taxonomy object.","required":"yes"}]},"get_taxonomy_template":{"desc":"Retrieve path of custom taxonomy term template in current or parent template.","params":[]},"get_tax_sql":{"desc":"Given a taxonomy query, generates SQL to be appended to a main query.","params":[{"param":"$tax_query","desc":"A compact tax query","required":"yes"},{"param":"$primary_table","desc":"","required":"yes"},{"param":"$primary_id_column","desc":"","required":"yes"}]},"get_template":{"desc":"Retrieve name of the current theme.","params":[]},"get_template_directory":{"desc":"Retrieve current theme directory.","params":[]},"get_template_directory_uri":{"desc":"Retrieve theme directory URI.","params":[]},"get_template_part":{"desc":"Load a template part into a template","params":[{"param":"$slug","desc":"The slug name for the generic template.","required":"yes"},{"param":"$name","desc":"The name of the specialised template.","required":"no"}]},"get_temp_dir":{"desc":"Determine a writable directory for temporary files.","params":[]},"get_term":{"desc":"Get all Term data from database by Term ID.","params":[{"param":"$term","desc":"If integer, term data will be fetched from the database, or from the cache if available. If stdClass object (as in the results of a database query), will apply filters and return a WP_Term object corresponding to the $term data. If WP_Term, will return $term.","required":"yes"},{"param":"$taxonomy","desc":" Taxonomy name that $term is part of.","required":"no"},{"param":"$output","desc":" The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Term object, an associative array, or a numeric array, respectively. ","required":"no"},{"param":"$filter","desc":" default is raw or no WordPress defined filter will applied.","required":"no"}]},"get_terms":{"desc":"Retrieve the terms in a given taxonomy or list of taxonomies.","params":[{"param":"$args","desc":"Array or string of arguments to get terms. taxonomy(string|array) Taxonomy name, or array of taxonomies, to which results should be limited. orderby(string) Field(s) to order terms by. Accepts term fields (name, slug, term_group, term_id, id, description), count for term taxonomy count, include to match the order of the $include param, meta_value, meta_value_num, the value of $meta_key, the array keys of $meta_query, or none to omit the ORDER BY clause. Defaults to name. order(string) Whether to order terms in ascending or descending order. Accepts ASC (ascending) or DESC (descending). Default ASC. hide_empty(bool|int) Whether to hide terms not assigned to any posts. Accepts 1|true or 0|false. Default 1|true. include(array|string) Array or comma/space-separated string of term ids to include.  exclude(array|string) Array or comma/space-separated string of term ids to exclude. If $include is non-empty, $exclude is ignored.  exclude_tree(array|string) Array or comma/space-separated string of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored.  number(int|string) Maximum number of terms to return. Accepts |0 (all) or any positive number. Default |0 (all). offset(int) The number by which to offset the terms query.  fields(string) Term fields to query for. Accepts all (returns an array of complete term objects), ids (returns an array of ids), id=>parent (returns an associative array with ids as keys, parent term IDs as values), names (returns an array of term names), count (returns the number of matching terms), id=>name (returns an associative array with ids as keys, term names as values), or id=>slug (returns an associative array with ids as keys, term slugs as values). Default all. name(string|array) Optional. Name or array of names to return term(s) for.  slug(string|array) Optional. Slug or array of slugs to return term(s) for.  hierarchical(bool) Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. search(string) Search criteria to match terms. Will be SQL-formatted with wildcards before and after.  name__like(string) Retrieve terms with criteria by which a term is LIKE $name__like.  description__like(string) Retrieve terms where the description is LIKE $description__like.  pad_counts(bool) Whether to pad the quantity of a terms children in the quantity of each terms count object variable. Default false. get(string) Whether to return terms regardless of ancestry or whether the terms are empty. Accepts all or empty (disabled).  child_of(int) Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. parent(int|string) Parent term ID to retrieve direct-child terms of.  childless(bool) True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. cache_domain(string) Unique cache key to be produced when this query is stored in an object cache. Default is core. update_term_meta_cache(bool) Whether to prime meta caches for matched terms. Default true. meta_query(array) Meta query clauses to limit retrieved terms by. See WP_Meta_Query.  meta_key(string) Limit terms to those matching a specific metadata key. Can be used in conjunction with $meta_value. meta_value(string) Limit terms to those matching a specific metadata value. Usually used in conjunction with $meta_key.  ","required":"no"},{"param":"$deprecated","desc":"Argument array, when using the legacy function parameter format. If present, this parameter will be interpreted as $args, and the first function parameter will be parsed as a taxonomy or array of taxonomies.","required":"no"}]},"get_terms_to_edit":{"desc":"Get comma-separated list of terms available to edit for the given post ID.","params":[{"param":"$post_id","desc":"","required":"yes"},{"param":"$taxonomy","desc":" The taxonomy for which to retrieve terms. ","required":"no"}]},"get_term_by":{"desc":"Get all Term data from database by Term field and data.","params":[{"param":"$field","desc":"Either slug, name, id (term_id), or term_taxonomy_id","required":"yes"},{"param":"$value","desc":"Search for this term value","required":"yes"},{"param":"$taxonomy","desc":"Taxonomy name. Optional, if $field is term_taxonomy_id.","required":"no"},{"param":"$output","desc":" The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Term object, an associative array, or a numeric array, respectively. ","required":"no"},{"param":"$filter","desc":" default is raw or no WordPress defined filter will applied.","required":"no"}]},"get_term_children":{"desc":"Merge all term children into a single array of their IDs.","params":[{"param":"$term_id","desc":"ID of Term to get children.","required":"yes"},{"param":"$taxonomy","desc":"Taxonomy Name.","required":"yes"}]},"get_term_feed_link":{"desc":"Retrieve the feed link for a term.","params":[{"param":"$term_id","desc":"Term ID.","required":"yes"},{"param":"$taxonomy","desc":" Taxonomy of $term_id. ","required":"no"},{"param":"$feed","desc":" Feed type. ","required":"no"}]},"get_term_field":{"desc":"Get sanitized Term field.","params":[{"param":"$field","desc":"Term field to fetch.","required":"yes"},{"param":"$term","desc":"Term ID or object.","required":"yes"},{"param":"$taxonomy","desc":" Taxonomy Name. ","required":"no"},{"param":"$context","desc":" default is display. Look at sanitize_term_field() for available options.","required":"no"}]},"get_term_link":{"desc":"Generate a permalink for a taxonomy term archive.","params":[{"param":"$term","desc":"The term object, ID, or slug whose link will be retrieved.","required":"yes"},{"param":"$taxonomy","desc":" Taxonomy. ","required":"no"}]},"get_term_meta":{"desc":"Retrieves metadata for a term.","params":[{"param":"$term_id","desc":"Term ID.","required":"yes"},{"param":"$key","desc":" The meta key to retrieve. If no key is provided, fetches all metadata for the term.","required":"no"},{"param":"$single","desc":"Whether to return a single value. If false, an array of all values matching the $term_id/$key pair will be returned. Default: false.","required":"no"}]},"get_term_to_edit":{"desc":"Sanitizes Term for editing.","params":[{"param":"$id","desc":"Term ID or object.","required":"yes"},{"param":"$taxonomy","desc":"Taxonomy name.","required":"yes"}]},"get_theme":{"desc":"Retrieve theme data.","params":[{"param":"$theme","desc":"Theme name.","required":"yes"}]},"get_themes":{"desc":"Retrieve list of themes with theme data in theme directory.","params":[]},"get_theme_data":{"desc":"Retrieve theme data from parsed theme file.","params":[{"param":"$theme_file","desc":"Theme file path.","required":"yes"}]},"get_theme_feature_list":{"desc":"Retrieve list of WordPress theme features (aka theme tags)","params":[{"param":"$api","desc":" Whether try to fetch tags from the WordPress.org API. Defaults to true.","required":"no"}]},"get_theme_file_path":{"desc":"Retrieves the path of a file in the theme.","params":[{"param":"$file","desc":" File to search for in the stylesheet directory.","required":"no"}]},"get_theme_file_uri":{"desc":"Retrieves the URL of a file in the theme.","params":[{"param":"$file","desc":" File to search for in the stylesheet directory.","required":"no"}]},"get_theme_mod":{"desc":"Retrieve theme modification value for the current theme.","params":[{"param":"$name","desc":"Theme modification name.","required":"yes"},{"param":"$default","desc":"","required":"no"}]},"get_theme_mods":{"desc":"Retrieve all theme modifications.","params":[]},"get_theme_root":{"desc":"Retrieve path to themes directory.","params":[{"param":"$stylesheet_or_template","desc":"The stylesheet or template name of the theme","required":"no"}]},"get_theme_roots":{"desc":"Retrieve theme roots.","params":[]},"get_theme_root_uri":{"desc":"Retrieve URI for themes directory.","params":[{"param":"$stylesheet_or_template","desc":" The stylesheet or template name of the theme.   Default is to leverage the main theme root.","required":"no"},{"param":"$theme_root","desc":" The theme root for which calculations will be based, preventing   the need for a get_raw_theme_root() call.","required":"no"}]},"get_theme_starter_content":{"desc":"Expand a theme’s starter content configuration using core-provided data.","params":[]},"get_theme_support":{"desc":"Gets the theme support arguments passed when registering that support","params":[{"param":"$feature","desc":"the feature to check","required":"yes"}]},"get_theme_updates":{"desc":"","params":[]},"get_theme_update_available":{"desc":"Retrieve the update link if there is a theme update available.","params":[{"param":"$theme","desc":"WP_Theme object.","required":"yes"}]},"get_the_archive_description":{"desc":"Retrieve category, tag, or term description.","params":[]},"get_the_archive_title":{"desc":"Retrieve the archive title based on the queried object.","params":[]},"get_the_attachment_link":{"desc":"Retrieve HTML content of attachment image with link.","params":[{"param":"$id","desc":" Post ID.","required":"no"},{"param":"$fullsize","desc":" Whether to use full size image.","required":"no"},{"param":"$max_dims","desc":" Max image dimensions.","required":"no"},{"param":"$permalink","desc":" Whether to include permalink to image.","required":"no"}]},"get_the_author":{"desc":"Retrieve the author of the current post.","params":[{"param":"$deprecated","desc":"Deprecated.","required":"no"}]},"get_the_author_aim":{"desc":"Retrieve the AIM address of the author of the current post.","params":[]},"get_the_author_description":{"desc":"Retrieve the description of the author of the current post.","params":[]},"get_the_author_email":{"desc":"Retrieve the email of the author of the current post.","params":[]},"get_the_author_firstname":{"desc":"Retrieve the first name of the author of the current post.","params":[]},"get_the_author_icq":{"desc":"Retrieve the ICQ number of the author of the current post.","params":[]},"get_the_author_ID":{"desc":"Retrieve the ID of the author of the current post.","params":[]},"get_the_author_lastname":{"desc":"Retrieve the last name of the author of the current post.","params":[]},"get_the_author_link":{"desc":"Retrieve either author’s link or author’s name.","params":[]},"get_the_author_login":{"desc":"Retrieve the login name of the author of the current post.","params":[]},"get_the_author_meta":{"desc":"Retrieve the requested data of the author of the current post.","params":[{"param":"$field","desc":"selects the field of the users record.","required":"no"},{"param":"$user_id","desc":" User ID.","required":"no"}]},"get_the_author_msn":{"desc":"Retrieve the MSN address of the author of the current post.","params":[]},"get_the_author_nickname":{"desc":"Retrieve the nickname of the author of the current post.","params":[]},"get_the_author_posts":{"desc":"Retrieve the number of posts by the author of the current post.","params":[]},"get_the_author_posts_link":{"desc":"Retrieves an HTML link to the author page of the current post’s author.","params":[]},"get_the_author_url":{"desc":"Retrieve the URL to the home page of the author of the current post.","params":[]},"get_the_author_yim":{"desc":"Retrieve the Yahoo! IM name of the author of the current post.","params":[]},"get_the_category":{"desc":"Retrieve post categories.","params":[{"param":"$id","desc":" default to current post ID. The post ID.","required":"no"}]},"get_the_category_by_ID":{"desc":"Retrieve category name based on category ID.","params":[{"param":"$cat_ID","desc":"Category ID.","required":"yes"}]},"get_the_category_list":{"desc":"Retrieve category list in either HTML list or custom format.","params":[{"param":"$separator","desc":" Separator for between the categories.","required":"no"},{"param":"$parents","desc":" How to display the parents.","required":"no"},{"param":"$post_id","desc":" Post ID to retrieve categories.","required":"no"}]},"get_the_category_rss":{"desc":"Retrieve all of the post categories, formatted for use in feeds.","params":[{"param":"$type","desc":" default is the type returned by get_default_feed().","required":"no"}]},"get_the_comments_navigation":{"desc":"Retrieves navigation to next/previous set of comments, when applicable.","params":[{"param":"$args","desc":"Default comments navigation arguments. prev_text(string) Anchor text to display in the previous comments link. Default Older comments. next_text(string) Anchor text to display in the next comments link. Default Newer comments. screen_reader_text(string) Screen reader text for nav element. Default Comments navigation.  ","required":"no"}]},"get_the_comments_pagination":{"desc":"Retrieves a paginated navigation to next/previous set of comments, when applicable.","params":[{"param":"$args","desc":"Default pagination arguments. screen_reader_text(string) Screen reader text for nav element. Default Comments navigation.  ","required":"no"}]},"get_the_content":{"desc":"Retrieve the post content.","params":[{"param":"$more_link_text","desc":" Content for when there is more text.","required":"no"},{"param":"$strip_teaser","desc":" Strip teaser content before the more text. Default is false.","required":"no"}]},"get_the_content_feed":{"desc":"Retrieve the post content for feeds.","params":[{"param":"$feed_type","desc":"The type of feed. rss2 | atom | rss | rdf","required":"no"}]},"get_the_date":{"desc":"Retrieve the date on which the post was written.","params":[{"param":"$d","desc":" PHP date format defaults to the date_format option if not specified.","required":"no"},{"param":"$post","desc":" Post ID or WP_Post object. Default current post.","required":"no"}]},"get_the_excerpt":{"desc":"Retrieves the post excerpt.","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"get_the_generator":{"desc":"Creates the generator XML or Comment for RSS, ATOM, etc.","params":[{"param":"$type","desc":"The type of generator to return - (html|xhtml|atom|rss2|rdf|comment|export).","required":"no"}]},"get_the_guid":{"desc":"Retrieve the Post Global Unique Identifier (guid).","params":[{"param":"$post","desc":" Post ID or post object. Default is global $post.","required":"no"}]},"get_the_ID":{"desc":"Retrieve the ID of the current item in the WordPress Loop.","params":[]},"get_the_modified_author":{"desc":"Retrieve the author who last edited the current post.","params":[]},"get_the_modified_date":{"desc":"Retrieve the date on which the post was last modified.","params":[{"param":"$d","desc":" PHP date format defaults to the date_format option if not specified.","required":"no"},{"param":"$post","desc":" Post ID or WP_Post object. Default current post.","required":"no"}]},"get_the_modified_time":{"desc":"Retrieve the time at which the post was last modified.","params":[{"param":"$d","desc":" Format to use for retrieving the time the post was modified. Either G, U, or php date format defaults to the value specified in the time_format option. ","required":"no"},{"param":"$post","desc":" Post ID or WP_Post object. Default current post.","required":"no"}]},"get_the_password_form":{"desc":"Retrieve protected post password form content.","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"get_the_permalink":{"desc":"Retrieve full permalink for current post or post ID.","params":[{"param":"$post","desc":" Post ID or post object. Default is the global $post.","required":"no"},{"param":"$leavename","desc":" Whether to keep post name or page name. ","required":"no"}]},"get_the_posts_navigation":{"desc":"Return navigation to next/previous set of posts when applicable.","params":[{"param":"$args","desc":"Default posts navigation arguments. prev_text(string) Anchor text to display in the previous posts link. Default Older posts. next_text(string) Anchor text to display in the next posts link. Default Newer posts. screen_reader_text(string) Screen reader text for nav element. Default Posts navigation.  ","required":"no"}]},"get_the_posts_pagination":{"desc":"Return a paginated navigation to next/previous set of posts, when applicable.","params":[{"param":"$args","desc":"Default pagination arguments, see paginate_links(). screen_reader_text(string) Screen reader text for navigation element. Default Posts navigation.  ","required":"no"}]},"get_the_post_navigation":{"desc":"Return navigation to next/previous post when applicable.","params":[{"param":"$args","desc":"Default post navigation arguments. prev_text(string) Anchor text to display in the previous post link. Default %title. next_text(string) Anchor text to display in the next post link. Default %title. in_same_term(bool) Whether link should be in a same taxonomy term. Default false. excluded_terms(array|string) Array or comma-separated list of excluded term IDs.  taxonomy(string) Taxonomy, if $in_same_term is true. Default category. screen_reader_text(string) Screen reader text for nav element. Default Post navigation.  ","required":"no"}]},"get_the_post_thumbnail":{"desc":"Retrieve the post thumbnail.","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"},{"param":"$size","desc":" Image size to use. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"},{"param":"$attr","desc":" Query string or array of attributes. ","required":"no"}]},"get_the_post_thumbnail_caption":{"desc":"Returns the post thumbnail caption.","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"get_the_post_thumbnail_url":{"desc":"Return the post thumbnail URL.","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"},{"param":"$size","desc":" Registered image size to retrieve the source for or a flat array of height and width dimensions. ","required":"no"}]},"get_the_tags":{"desc":"Retrieve the tags for a post.","params":[{"param":"$id","desc":"Post ID.","required":"yes"}]},"get_the_tag_list":{"desc":"Retrieve the tags for a post formatted as a string.","params":[{"param":"$before","desc":" Before tags.","required":"no"},{"param":"$sep","desc":" Between tags.","required":"no"},{"param":"$after","desc":" After tags.","required":"no"},{"param":"$id","desc":" Post ID. Defaults to the current post.","required":"no"}]},"get_the_taxonomies":{"desc":"Retrieve all taxonomies associated with a post.","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"},{"param":"$args","desc":"Arguments about how to format the list of taxonomies. template(string) Template for displaying a taxonomy label and list of terms. Default is Label: Terms. term_template(string) Template for displaying a single term in the list. Default is the term name linked to its archive.  ","required":"no"}]},"get_the_terms":{"desc":"Retrieve the terms of the taxonomy that are attached to the post.","params":[{"param":"$post","desc":"Post ID or object.","required":"yes"},{"param":"$taxonomy","desc":"Taxonomy name.","required":"yes"}]},"get_the_term_list":{"desc":"Retrieve a post’s terms as a list with specified format.","params":[{"param":"$id","desc":"Post ID.","required":"yes"},{"param":"$taxonomy","desc":"Taxonomy name.","required":"yes"},{"param":"$before","desc":" Before list.","required":"no"},{"param":"$sep","desc":" Separate items using this.","required":"no"},{"param":"$after","desc":" After list.","required":"no"}]},"get_the_time":{"desc":"Retrieve the time at which the post was written.","params":[{"param":"$d","desc":" Format to use for retrieving the time the post was written. Either G, U, or php date format defaults to the value specified in the time_format option. ","required":"no"},{"param":"$post","desc":"WP_Post object or ID. Default is global $post object.","required":"no"}]},"get_the_title":{"desc":"Retrieve post title.","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"get_the_title_rss":{"desc":"Retrieve the current post title for the feed.","params":[]},"get_to_ping":{"desc":"Retrieve URLs that need to be pinged.","params":[{"param":"$post_id","desc":"Post Object or ID","required":"yes"}]},"get_trackback_url":{"desc":"Retrieve The current post’s trackback URL.","params":[]},"get_transient":{"desc":"Get the value of a transient.","params":[{"param":"$transient","desc":"Transient name. Expected to not be SQL-escaped.","required":"yes"}]},"get_translations_for_domain":{"desc":"Return the Translations instance for a text domain.","params":[{"param":"$domain","desc":"Text domain. Unique identifier for retrieving translated strings.","required":"yes"}]},"get_udims":{"desc":"Calculated the new dimensions for a downsampled image.","params":[{"param":"$width","desc":"Current width of the image","required":"yes"},{"param":"$height","desc":"Current height of the image","required":"yes"}]},"get_uploaded_header_images":{"desc":"Get the header images uploaded for the current theme.","params":[]},"get_upload_iframe_src":{"desc":"","params":[{"param":"$type","desc":"","required":"no"},{"param":"$post_id","desc":"","required":"no"},{"param":"$tab","desc":"","required":"no"}]},"get_upload_space_available":{"desc":"Determines if there is any upload space left in the current blog’s quota.","params":[]},"get_url_in_content":{"desc":"Extract and return the first URL from passed content.","params":[{"param":"$content","desc":"A string which might contain a URL.","required":"yes"}]},"get_userdata":{"desc":"Retrieve user info by user ID.","params":[{"param":"$user_id","desc":"User ID","required":"yes"}]},"get_userdatabylogin":{"desc":"Retrieve user info by login name.","params":[{"param":"$user_login","desc":"Users username","required":"yes"}]},"get_usermeta":{"desc":"Retrieve user metadata.","params":[{"param":"$user_id","desc":"User ID","required":"yes"},{"param":"$meta_key","desc":" Metadata key.","required":"no"}]},"get_usernumposts":{"desc":"Retrieves the number of posts a user has written.","params":[{"param":"$userid","desc":"User to count posts for.","required":"yes"}]},"get_users":{"desc":"Retrieve list of users matching criteria.","params":[{"param":"$args","desc":" Arguments to retrieve users. See WP_User_Query::prepare_query(). for more information on accepted arguments.","required":"no"}]},"get_users_drafts":{"desc":"Retrieve the user’s drafts.","params":[{"param":"$user_id","desc":"User ID.","required":"yes"}]},"get_users_of_blog":{"desc":"Get users for the site.","params":[{"param":"$id","desc":"Site ID.","required":"no"}]},"get_user_by":{"desc":"Retrieve user info by a given field","params":[{"param":"$field","desc":"The field to retrieve the user with. id | ID | slug | email | login.","required":"yes"},{"param":"$value","desc":"A value for $field. A user ID, slug, email address, or login name.","required":"yes"}]},"get_user_by_email":{"desc":"Retrieve user info by email.","params":[{"param":"$email","desc":"Users email address","required":"yes"}]},"get_user_count":{"desc":"The number of active users in your installation.","params":[]},"get_user_details":{"desc":"Deprecated functionality to retrieve user information.","params":[{"param":"$username","desc":"Username.","required":"yes"}]},"get_user_id_from_string":{"desc":"Get a numeric user ID from either an email address or a login.","params":[{"param":"$string","desc":"Either an email address or a login.","required":"yes"}]},"get_user_locale":{"desc":"Retrieves the locale of a user.","params":[{"param":"$user_id","desc":"Users ID or a WP_User object. Defaults to current user.","required":"yes"}]},"get_user_meta":{"desc":"Retrieve user meta field for a user.","params":[{"param":"$user_id","desc":"User ID.","required":"yes"},{"param":"$key","desc":" The meta key to retrieve. By default, returns data for all keys.","required":"no"},{"param":"$single","desc":"Whether to return a single value.","required":"no"}]},"get_user_metavalues":{"desc":"Perform the query to get the $metavalues array(s) needed by _fill_user and _fill_many_users","params":[{"param":"$ids","desc":"User ID numbers list.","required":"yes"}]},"get_user_option":{"desc":"Retrieve user option that can be either per Site or per Network.","params":[{"param":"$option","desc":"User option name.","required":"yes"},{"param":"$user","desc":" User ID.","required":"no"},{"param":"$deprecated","desc":"Use get_option() to check for an option in the options table.","required":"no"}]},"get_user_setting":{"desc":"Retrieve user interface setting value based on setting name.","params":[{"param":"$name","desc":"The name of the setting.","required":"yes"},{"param":"$default","desc":"default value to return when $name is not set.","required":"no"}]},"get_user_to_edit":{"desc":"Retrieve user data and filter it.","params":[{"param":"$user_id","desc":"User ID.","required":"yes"}]},"get_weekstartend":{"desc":"Get the week start and end from the datetime or date string from MySQL.","params":[{"param":"$mysqlstring","desc":"Date or datetime field type from MySQL.","required":"yes"},{"param":"$start_of_week","desc":" Start of the week as an integer. ","required":"no"}]},"get_wp_title_rss":{"desc":"Retrieve the blog title for the feed title.","params":[{"param":"$deprecated","desc":"Unused..","required":"no"}]},"get_year_link":{"desc":"Retrieve the permalink for the year archives.","params":[{"param":"$year","desc":"False for current year or year for permalink.","required":"yes"}]},"global_terms":{"desc":"Maintains a canonical list of terms by syncing terms created for each blog with the global terms table.","params":[{"param":"$term_id","desc":"An ID for a term on the current blog.","required":"yes"},{"param":"$deprecated","desc":"Not used.","required":"no"}]},"global_terms_enabled":{"desc":"Determine whether global terms are enabled.","params":[]},"got_mod_rewrite":{"desc":"Returns whether the server is running Apache with the mod_rewrite module loaded.","params":[]},"got_url_rewrite":{"desc":"Returns whether the server supports URL rewriting.","params":[]},"graceful_fail":{"desc":"Deprecated functionality to gracefully fail.","params":[]},"grant_super_admin":{"desc":"Grants Super Admin privileges.","params":[{"param":"$user_id","desc":"ID of the user to be granted Super Admin privileges.","required":"yes"}]},"gzip_compression":{"desc":"Unused function.","params":[]},"hash_equals":{"desc":"Timing attack safe string comparison","params":[{"param":"$a","desc":"Expected string.","required":"yes"},{"param":"$b","desc":"Actual, user supplied, string.","required":"yes"}]},"hash_hmac":{"desc":"","params":[]},"has_action":{"desc":"Check if any action has been registered for a hook.","params":[{"param":"$tag","desc":"The name of the action hook.","required":"yes"},{"param":"$function_to_check","desc":" The callback to check for. ","required":"no"}]},"has_category":{"desc":"Check if the current post has any of given category.","params":[{"param":"$category","desc":" The category name/term_id/slug or array of them to check for.","required":"no"},{"param":"$post","desc":" Post to check instead of the current post.","required":"no"}]},"has_custom_header":{"desc":"Check whether a custom header is set or not.","params":[]},"has_custom_logo":{"desc":"Determines whether the site has a custom logo.","params":[{"param":"$blog_id","desc":" ID of the blog in question. Default is the ID of the current blog.","required":"no"}]},"has_excerpt":{"desc":"Whether post has excerpt.","params":[{"param":"$id","desc":" Post ID or post object.","required":"no"}]},"has_filter":{"desc":"Check if any filter has been registered for a hook.","params":[{"param":"$tag","desc":"The name of the filter hook.","required":"yes"},{"param":"$function_to_check","desc":" The callback to check for. ","required":"no"}]},"has_header_image":{"desc":"Check whether a header image is set or not.","params":[]},"has_header_video":{"desc":"Check whether a header video is set or not.","params":[]},"has_image_size":{"desc":"Check if an image size exists.","params":[{"param":"$name","desc":"The image size to check.","required":"yes"}]},"has_meta":{"desc":"Get meta data for the given post ID.","params":[{"param":"$postid","desc":"","required":"yes"}]},"has_nav_menu":{"desc":"Whether a registered nav menu location has a menu assigned to it.","params":[{"param":"$location","desc":"Menu location identifier.","required":"yes"}]},"has_post_format":{"desc":"Check if a post has any of the given formats, or any format.","params":[{"param":"$format","desc":" The format or formats to check.","required":"no"},{"param":"$post","desc":" The post to check. If not supplied, defaults to the current post if used in the loop.","required":"no"}]},"has_post_thumbnail":{"desc":"Check if post has an image attached.","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"has_shortcode":{"desc":"Whether the passed content contains the specified shortcode","params":[{"param":"$content","desc":"Content to search for shortcodes.","required":"yes"},{"param":"$tag","desc":"Shortcode tag to check.","required":"yes"}]},"has_site_icon":{"desc":"Whether the site has a Site Icon.","params":[{"param":"$blog_id","desc":" ID of the blog in question. Default current blog.","required":"no"}]},"has_tag":{"desc":"Check if the current post has any of given tags.","params":[{"param":"$tag","desc":" The tag name/term_id/slug or array of them to check for.","required":"no"},{"param":"$post","desc":" Post to check instead of the current post. (since 2.7.0)","required":"no"}]},"has_term":{"desc":"Check if the current post has any of given terms.","params":[{"param":"$term","desc":" The term name/term_id/slug or array of them to check for.","required":"no"},{"param":"$taxonomy","desc":"Taxonomy name","required":"no"},{"param":"$post","desc":" Post to check instead of the current post.","required":"no"}]},"have_comments":{"desc":"Whether there are comments to loop over.","params":[]},"have_posts":{"desc":"Whether current WordPress query has results to loop over.","params":[]},"header_image":{"desc":"Display header image URL.","params":[]},"header_textcolor":{"desc":"Displays the custom header text color in HEX format (minus the hash symbol).","params":[]},"heartbeat_autosave":{"desc":"Autosave with heartbeat","params":[{"param":"$response","desc":"The Heartbeat response.","required":"yes"},{"param":"$data","desc":"The $_POST data sent.","required":"yes"}]},"hello_dolly":{"desc":"","params":[]},"hello_dolly_get_lyric":{"desc":"","params":[]},"home_url":{"desc":"Retrieve the home url for the current site.","params":[{"param":"$path","desc":" Path relative to the home URL. ","required":"no"},{"param":"$scheme","desc":" Scheme to give the home URL context. Accepts http, https, relative, rest, or null. ","required":"no"}]},"htmlentities2":{"desc":"Convert entities, while preserving already-encoded entities.","params":[{"param":"$myHTML","desc":"The text to be converted.","required":"yes"}]},"html_type_rss":{"desc":"Display the HTML type based on the blog setting.","params":[]},"human_time_diff":{"desc":"Determines the difference between two timestamps.","params":[{"param":"$from","desc":"Unix timestamp from which the difference begins.","required":"yes"},{"param":"$to","desc":" Unix timestamp to end the time difference. Default becomes time() if not set.","required":"no"}]},"iframe_footer":{"desc":"Generic Iframe footer for use with Thickbox","params":[]},"iframe_header":{"desc":"Generic Iframe header for use with Thickbox","params":[{"param":"$title","desc":" Title of the Iframe page. ","required":"no"},{"param":"$deprecated","desc":"Not used.","required":"no"}]},"iis7_add_rewrite_rule":{"desc":"Add WordPress rewrite rule to the IIS 7+ configuration file.","params":[{"param":"$filename","desc":"The file path to the configuration file","required":"yes"},{"param":"$rewrite_rule","desc":"The XML fragment with URL Rewrite rule","required":"yes"}]},"iis7_delete_rewrite_rule":{"desc":"Delete WordPress rewrite rule from web.config file if it exists there","params":[{"param":"$filename","desc":"Name of the configuration file","required":"yes"}]},"iis7_rewrite_rule_exists":{"desc":"Check if rewrite rule for WordPress already exists in the IIS 7+ configuration file","params":[{"param":"$filename","desc":"The file path to the configuration file","required":"yes"}]},"iis7_save_url_rewrite_rules":{"desc":"Updates the IIS web.config file with the current rules if it is writable.","params":[]},"iis7_supports_permalinks":{"desc":"Check if IIS 7+ supports pretty permalinks.","params":[]},"image_add_caption":{"desc":"Adds image shortcode with caption to editor","params":[{"param":"$html","desc":"","required":"yes"},{"param":"$id","desc":"","required":"yes"},{"param":"$caption","desc":"image caption","required":"yes"},{"param":"$title","desc":"image title attribute","required":"yes"},{"param":"$align","desc":"image css alignment property","required":"yes"},{"param":"$url","desc":"image src url","required":"yes"},{"param":"$size","desc":"image size (thumbnail, medium, large, full or added with add_image_size() )","required":"yes"},{"param":"$alt","desc":"image alt attribute","required":"no"}]},"image_align_input_fields":{"desc":"Retrieve HTML for the image alignment radio buttons with the specified one checked.","params":[{"param":"$post","desc":"","required":"yes"},{"param":"$checked","desc":"","required":"no"}]},"image_attachment_fields_to_edit":{"desc":"Retrieves the image attachment fields to edit form fields.","params":[{"param":"$form_fields","desc":"","required":"yes"},{"param":"$post","desc":"","required":"yes"}]},"image_attachment_fields_to_save":{"desc":"Filters input from media_upload_form_handler() and assigns a default post_title from the file name if none supplied.","params":[{"param":"$post","desc":"The WP_Post attachment object converted to an array.","required":"yes"},{"param":"$attachment","desc":"An array of attachment metadata.","required":"yes"}]},"image_constrain_size_for_editor":{"desc":"Scale down the default size of an image.","params":[{"param":"$width","desc":"Width of the image in pixels.","required":"yes"},{"param":"$height","desc":"Height of the image in pixels.","required":"yes"},{"param":"$size","desc":" Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"},{"param":"$context","desc":" Could be display (like in a theme) or edit (like inserting into an editor). ","required":"no"}]},"image_downsize":{"desc":"Scale an image to fit a particular size (such as ‘thumb’ or ‘medium’).","params":[{"param":"$id","desc":"Attachment ID for image.","required":"yes"},{"param":"$size","desc":" Image size to scale to. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"}]},"image_edit_apply_changes":{"desc":"Performs group of changes on Editor specified.","params":[{"param":"$image","desc":"WP_Image_Editor instance.","required":"yes"},{"param":"$changes","desc":"Array of change operations.","required":"yes"}]},"image_get_intermediate_size":{"desc":"Retrieves the image’s intermediate size (resized) path, width, and height.","params":[{"param":"$post_id","desc":"Attachment ID.","required":"yes"},{"param":"$size","desc":" Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"}]},"image_hwstring":{"desc":"Retrieve width and height attributes using given width and height values.","params":[{"param":"$width","desc":"Image width in pixels.","required":"yes"},{"param":"$height","desc":"Image height in pixels.","required":"yes"}]},"image_link_input_fields":{"desc":"Retrieve HTML for the Link URL buttons with the default link type as specified.","params":[{"param":"$post","desc":"","required":"yes"},{"param":"$url_type","desc":"","required":"no"}]},"image_make_intermediate_size":{"desc":"Resizes an image to make a thumbnail or intermediate size.","params":[{"param":"$file","desc":"File path.","required":"yes"},{"param":"$width","desc":"Image width.","required":"yes"},{"param":"$height","desc":"Image height.","required":"yes"},{"param":"$crop","desc":" Whether to crop image to specified width and height or resize. ","required":"no"}]},"image_media_send_to_editor":{"desc":"Retrieves the media element HTML to send to the editor.","params":[{"param":"$html","desc":"","required":"yes"},{"param":"$attachment_id","desc":"","required":"yes"},{"param":"$attachment","desc":"","required":"yes"}]},"image_resize":{"desc":"Scale down an image to fit a particular size and save a new copy of the image.","params":[{"param":"$file","desc":"Image file path.","required":"yes"},{"param":"$max_w","desc":"Maximum width to resize to.","required":"yes"},{"param":"$max_h","desc":"Maximum height to resize to.","required":"yes"},{"param":"$crop","desc":" Whether to crop image or resize.","required":"no"},{"param":"$suffix","desc":" File suffix.","required":"no"},{"param":"$dest_path","desc":" New image file path.","required":"no"},{"param":"$jpeg_quality","desc":" Image quality percentage.","required":"no"}]},"image_resize_dimensions":{"desc":"Retrieves calculated resize dimensions for use in WP_Image_Editor.","params":[{"param":"$orig_w","desc":"Original width in pixels.","required":"yes"},{"param":"$orig_h","desc":"Original height in pixels.","required":"yes"},{"param":"$dest_w","desc":"New width in pixels.","required":"yes"},{"param":"$dest_h","desc":"New height in pixels.","required":"yes"},{"param":"$crop","desc":" Whether to crop image to specified width and height or resize. An array can specify positioning of the crop area. ","required":"no"}]},"image_size_input_fields":{"desc":"Retrieve HTML for the size radio buttons with the specified one checked.","params":[{"param":"$post","desc":"","required":"yes"},{"param":"$check","desc":"","required":"no"}]},"img_caption_shortcode":{"desc":"Builds the Caption shortcode output.","params":[{"param":"$attr","desc":"Attributes of the caption shortcode. id(string) ID of the div element for the caption. align(string) Class name that aligns the caption. Default alignnone. Accepts alignleft, aligncenter, alignright, alignnone. width(int) The width of the caption, in pixels. caption(string) The caption text. class(string) Additional class name(s) added to the caption container.  ","required":"yes"},{"param":"$content","desc":"Shortcode content.","required":"no"}]},"includes_url":{"desc":"Retrieves the URL to the includes directory.","params":[{"param":"$path","desc":" Path relative to the includes URL. ","required":"no"},{"param":"$scheme","desc":" Scheme to give the includes URL context. Accepts http, https, or relative. ","required":"no"}]},"index_rel_link":{"desc":"Display relational link for the site index.","params":[]},"init":{"desc":"Set up constants with default values, unless user overrides.","params":[]},"insert_blog":{"desc":"Store basic site info in the blogs table.","params":[{"param":"$domain","desc":"The domain of the new site.","required":"yes"},{"param":"$path","desc":"The path of the new site.","required":"yes"},{"param":"$site_id","desc":"Unless youre running a multi-network install, be sure to set this value to 1.","required":"yes"}]},"insert_with_markers":{"desc":"Inserts an array of strings into a file (.htaccess ), placing it between BEGIN and END markers.","params":[{"param":"$filename","desc":"Filename to alter.","required":"yes"},{"param":"$marker","desc":"The marker to alter.","required":"yes"},{"param":"$insertion","desc":"The new content to insert.","required":"yes"}]},"install_blog":{"desc":"Install an empty blog.","params":[{"param":"$blog_id","desc":"The value returned by insert_blog().","required":"yes"},{"param":"$blog_title","desc":"The title of the new site.","required":"no"}]},"install_blog_defaults":{"desc":"Set blog defaults.","params":[{"param":"$blog_id","desc":"Ignored in this function.","required":"yes"},{"param":"$user_id","desc":"","required":"yes"}]},"install_dashboard":{"desc":"","params":[]},"install_global_terms":{"desc":"","params":[]},"install_network":{"desc":"","params":[]},"install_plugins_favorites_form":{"desc":"Show a username form for the favorites page","params":[]},"install_plugins_upload":{"desc":"Upload from zip","params":[]},"install_plugin_information":{"desc":"Display plugin information in dialog box form.","params":[]},"install_plugin_install_status":{"desc":"Determine the status we can perform on a plugin.","params":[{"param":"$api","desc":"Data about the plugin retrieved from the API.","required":"yes"},{"param":"$loop","desc":" Disable further loops. ","required":"no"}]},"install_popular_tags":{"desc":"Retrieve popular WordPress plugin tags.","params":[{"param":"$args","desc":"","required":"no"}]},"install_search_form":{"desc":"Displays a search form for searching plugins.","params":[{"param":"$deprecated","desc":"Not used.","required":"no"}]},"install_themes_dashboard":{"desc":"Display tags filter for themes.","params":[]},"install_themes_feature_list":{"desc":"Retrieve list of WordPress theme features (aka theme tags)","params":[]},"install_themes_upload":{"desc":"","params":[]},"install_theme_information":{"desc":"Display theme information in dialog box form.","params":[]},"install_theme_search_form":{"desc":"Display search form for searching themes.","params":[{"param":"$type_selector","desc":"","required":"no"}]},"in_category":{"desc":"Check if the current post in within any of the given categories.","params":[{"param":"$category","desc":"Category ID, name or slug, or array of said.","required":"yes"},{"param":"$post","desc":" Post to check instead of the current post. (since 2.7.0)","required":"no"}]},"in_the_loop":{"desc":"Whether the caller is in the Loop.","params":[]},"iso8601_timezone_to_offset":{"desc":"Computes an offset in seconds from an iso8601 timezone.","params":[{"param":"$timezone","desc":"Either Z for 0 offset or ±hhmm.","required":"yes"}]},"iso8601_to_datetime":{"desc":"Converts an iso8601 date to MySQL DateTime format used by post_date[_gmt].","params":[{"param":"$date_string","desc":"Date and time in ISO 8601 format https://en.wikipedia.org/wiki/ISO_8601.","required":"yes"},{"param":"$timezone","desc":" If set to GMT returns the time minus gmt_offset. Default is user.","required":"no"}]},"is_404":{"desc":"Is the query a 404 (returns no results)?","params":[]},"is_active_sidebar":{"desc":"Whether a sidebar is in use.","params":[{"param":"$index","desc":"Sidebar name, id or number to check.","required":"yes"}]},"is_active_widget":{"desc":"Whether widget is displayed on the front-end.","params":[{"param":"$callback","desc":" Widget callback to check. ","required":"no"},{"param":"$widget_id","desc":" Widget ID. Optional, but needed for checking. ","required":"no"},{"param":"$id_base","desc":" The base ID of a widget created by extending WP_Widget. ","required":"no"},{"param":"$skip_inactive","desc":" Whether to check in wp_inactive_widgets. ","required":"no"}]},"is_admin":{"desc":"Whether the current request is for an administrative interface page.","params":[]},"is_admin_bar_showing":{"desc":"Determine whether the admin bar should be showing.","params":[]},"is_allowed_http_origin":{"desc":"Determines if the HTTP origin is an authorized one.","params":[{"param":"$origin","desc":"Origin URL. If not provided, the value of get_http_origin() is used.","required":"no"}]},"is_archive":{"desc":"Is the query for an existing archive page?","params":[]},"is_archived":{"desc":"Check if a particular blog is archived.","params":[{"param":"$id","desc":"The blog id","required":"yes"}]},"is_attachment":{"desc":"Is the query for an existing attachment page?","params":[{"param":"$attachment","desc":"Attachment ID, title, slug, or array of such.","required":"no"}]},"is_author":{"desc":"Is the query for an existing author archive page?","params":[{"param":"$author","desc":" User ID, nickname, nicename, or array of User IDs, nicknames, and nicenames","required":"no"}]},"is_blog_admin":{"desc":"Whether the current request is for a site’s admininstrative interface.","params":[]},"is_blog_installed":{"desc":"Test whether blog is already installed.","params":[]},"is_blog_user":{"desc":"Checks if the current user belong to a given site.","params":[{"param":"$blog_id","desc":"Site ID","required":"yes"}]},"is_category":{"desc":"Is the query for an existing category archive page?","params":[{"param":"$category","desc":" Category ID, name, slug, or array of Category IDs, names, and slugs.","required":"no"}]},"is_child_theme":{"desc":"Whether a child theme is in use.","params":[]},"is_client_error":{"desc":"","params":[]},"is_comments_popup":{"desc":"Whether the current URL is within the comments popup window.","params":[]},"is_comment_feed":{"desc":"Is the query for a comments feed?","params":[]},"is_customize_preview":{"desc":"Whether the site is being previewed in the Customizer.","params":[]},"is_date":{"desc":"Is the query for an existing date archive?","params":[]},"is_day":{"desc":"Is the query for an existing day archive?","params":[]},"is_dynamic_sidebar":{"desc":"Whether the dynamic sidebar is enabled and used by theme.","params":[]},"is_email":{"desc":"Verifies that an email is valid.","params":[{"param":"$email","desc":"Email address to verify.","required":"yes"},{"param":"$deprecated","desc":"Deprecated.","required":"no"}]},"is_email_address_unsafe":{"desc":"Checks an email address against a list of banned domains.","params":[{"param":"$user_email","desc":"The email provided by the user at registration.","required":"yes"}]},"is_embed":{"desc":"Is the query for an embedded post?","params":[]},"is_error":{"desc":"","params":[]},"is_feed":{"desc":"Is the query for a feed?","params":[{"param":"$feeds","desc":"feed types to check.","required":"no"}]},"is_front_page":{"desc":"Is the query for the front page of the site?","params":[]},"is_header_video_active":{"desc":"Checks whether the custom header video is eligible to show on the current page.","params":[]},"is_home":{"desc":"Is the query for the blog homepage?","params":[]},"is_info":{"desc":"","params":[]},"is_lighttpd_before_150":{"desc":"Is the server running earlier than 1.5.0 version of lighttpd?","params":[]},"is_locale_switched":{"desc":"Whether switch_to_locale() is in effect.","params":[]},"is_local_attachment":{"desc":"Check if the attachment URI is local one and is really an attachment.","params":[{"param":"$url","desc":"URL to check","required":"yes"}]},"is_main_blog":{"desc":"Deprecated functionality to determin if the current site is the main site.","params":[]},"is_main_network":{"desc":"Determine whether a network is the main network of the Multisite install.","params":[{"param":"$network_id","desc":" Network ID to test. Defaults to current network.","required":"no"}]},"is_main_query":{"desc":"Is the query the main query?","params":[]},"is_main_site":{"desc":"Determine whether a site is the main site of the current network.","params":[{"param":"$site_id","desc":" Site ID to test. Defaults to current site.","required":"no"}]},"is_month":{"desc":"Is the query for an existing month archive?","params":[]},"is_multisite":{"desc":"If Multisite is enabled.","params":[]},"is_multi_author":{"desc":"Does this site have more than one author","params":[]},"is_nav_menu":{"desc":"Check if the given ID is a navigation menu.","params":[{"param":"$menu","desc":"The menu to check (ID, slug, or name).","required":"yes"}]},"is_nav_menu_item":{"desc":"Determines whether the given ID is a nav menu item.","params":[{"param":"$menu_item_id","desc":"The ID of the potential nav menu item.","required":"yes"}]},"is_network_admin":{"desc":"Whether the current request is for the network administrative interface.","params":[]},"is_network_only_plugin":{"desc":"Checks for “Network: true” in the plugin header to see if this should be activated only as a network wide plugin. The plugin would also work when Multisite is not enabled.","params":[{"param":"$plugin","desc":"Plugin to check","required":"yes"}]},"is_new_day":{"desc":"Whether the publish date of the current post in the loop is different from the publish date of the previous post in the loop.","params":[]},"is_object_in_taxonomy":{"desc":"Determine if the given object type is associated with the given taxonomy.","params":[{"param":"$object_type","desc":"Object type string.","required":"yes"},{"param":"$taxonomy","desc":"Single taxonomy name.","required":"yes"}]},"is_object_in_term":{"desc":"Determine if the given object is associated with any of the given terms.","params":[{"param":"$object_id","desc":"ID of the object (post ID, link ID, ...).","required":"yes"},{"param":"$taxonomy","desc":"Single taxonomy name.","required":"yes"},{"param":"$terms","desc":" Term term_id, name, slug or array of said. ","required":"no"}]},"is_page":{"desc":"Is the query for an existing single page?","params":[{"param":"$page","desc":" Page ID, title, slug, or array of such. ","required":"no"}]},"is_paged":{"desc":"Is the query for paged result and not for the first page?","params":[]},"is_page_template":{"desc":"Whether currently in a page template.","params":[{"param":"$template","desc":"The specific template name or array of templates to match.","required":"no"}]},"is_plugin_active":{"desc":"Check whether the plugin is active by checking the active_plugins list.","params":[{"param":"$plugin","desc":"Base plugin path from plugins directory.","required":"yes"}]},"is_plugin_active_for_network":{"desc":"Check whether the plugin is active for the entire network.","params":[{"param":"$plugin","desc":"Base plugin path from plugins directory.","required":"yes"}]},"is_plugin_inactive":{"desc":"Check whether the plugin is inactive.","params":[{"param":"$plugin","desc":"Base plugin path from plugins directory.","required":"yes"}]},"is_plugin_page":{"desc":"Is the current admin page generated by a plugin?","params":[]},"is_post_type_archive":{"desc":"Is the query for an existing post type archive page?","params":[{"param":"$post_types","desc":" Post type or array of posts types to check against.","required":"no"}]},"is_post_type_hierarchical":{"desc":"Whether the post type is hierarchical.","params":[{"param":"$post_type","desc":"Post type name","required":"yes"}]},"is_post_type_viewable":{"desc":"Determines whether a post type is considered “viewable”.","params":[{"param":"$post_type","desc":"Post type name or object.","required":"yes"}]},"is_preview":{"desc":"Is the query for a post or page preview?","params":[]},"is_protected_meta":{"desc":"Determine whether a meta key is protected.","params":[{"param":"$meta_key","desc":"Meta key","required":"yes"},{"param":"$meta_type","desc":"","required":"no"}]},"is_random_header_image":{"desc":"Check if random header image is in use.","params":[{"param":"$type","desc":"The random pool to use. any|default|uploaded","required":"no"}]},"is_redirect":{"desc":"","params":[]},"is_registered_sidebar":{"desc":"Checks if a sidebar is registered.","params":[{"param":"$sidebar_id","desc":"The ID of the sidebar when it was registered.","required":"yes"}]},"is_robots":{"desc":"Is the query for the robots file?","params":[]},"is_rtl":{"desc":"Checks if current locale is RTL.","params":[]},"is_search":{"desc":"Is the query for a search?","params":[]},"is_serialized":{"desc":"Check value to find if it was serialized.","params":[{"param":"$data","desc":"Value to check to see if was serialized.","required":"yes"},{"param":"$strict","desc":" Whether to be strict about the end of the string. ","required":"no"}]},"is_serialized_string":{"desc":"Check whether serialized data is of string type.","params":[{"param":"$data","desc":"Serialized data.","required":"yes"}]},"is_server_error":{"desc":"","params":[]},"is_single":{"desc":"Is the query for an existing single post?","params":[{"param":"$post","desc":" Post ID, title, slug, or array of such. ","required":"no"}]},"is_singular":{"desc":"Is the query for an existing single post of any post type (post, attachment, page, .","params":[{"param":"$post_types","desc":" Post type or array of post types. ","required":"no"}]},"is_site_admin":{"desc":"Determine if user is a site admin.","params":[{"param":"$user_login","desc":" Username for the user to check. ","required":"no"}]},"is_ssl":{"desc":"Determine if SSL is used.","params":[]},"is_sticky":{"desc":"Check if post is sticky.","params":[{"param":"$post_id","desc":" Post ID. Default is ID of the global $post.","required":"no"}]},"is_subdomain_install":{"desc":"Whether a subdomain configuration is enabled.","params":[]},"is_success":{"desc":"","params":[]},"is_super_admin":{"desc":"Determine if user is a site admin.","params":[{"param":"$user_id","desc":"(Optional) The ID of a user. Defaults to the current user.","required":"no"}]},"is_tag":{"desc":"Is the query for an existing tag archive page?","params":[{"param":"$tag","desc":" Tag ID, name, slug, or array of Tag IDs, names, and slugs.","required":"no"}]},"is_tax":{"desc":"Is the query for an existing taxonomy archive page?","params":[{"param":"$taxonomy","desc":" Taxonomy slug or slugs.","required":"no"},{"param":"$term","desc":" Term ID, name, slug or array of Term IDs, names, and slugs.","required":"no"}]},"is_taxonomy":{"desc":"Checks that the taxonomy name exists.","params":[{"param":"$taxonomy","desc":"Name of taxonomy object","required":"yes"}]},"is_taxonomy_hierarchical":{"desc":"Whether the taxonomy object is hierarchical.","params":[{"param":"$taxonomy","desc":"Name of taxonomy object.","required":"yes"}]},"is_term":{"desc":"Check if Term exists.","params":[{"param":"$term","desc":"The term to check","required":"yes"},{"param":"$taxonomy","desc":"The taxonomy name to use","required":"no"},{"param":"$parent","desc":"ID of parent term under which to confine the exists search.","required":"yes"}]},"is_textdomain_loaded":{"desc":"Whether there are translations for the text domain.","params":[{"param":"$domain","desc":"Text domain. Unique identifier for retrieving translated strings.","required":"yes"}]},"is_time":{"desc":"Is the query for a specific time?","params":[]},"is_trackback":{"desc":"Is the query for a trackback endpoint call?","params":[]},"is_uninstallable_plugin":{"desc":"Whether the plugin can be uninstalled.","params":[{"param":"$plugin","desc":"Plugin path to check.","required":"yes"}]},"is_upload_space_available":{"desc":"Determines if there is any upload space left in the current blog’s quota.","params":[]},"is_user_admin":{"desc":"Whether the current request is for a user admin screen.","params":[]},"is_user_logged_in":{"desc":"Checks if the current visitor is a logged in user.","params":[]},"is_user_member_of_blog":{"desc":"Find out whether a user is a member of a given blog.","params":[{"param":"$user_id","desc":" The unique ID of the user. Defaults to the current user.","required":"no"},{"param":"$blog_id","desc":" ID of the blog to check. Defaults to the current site.","required":"no"}]},"is_user_option_local":{"desc":"Check whether a usermeta key has to do with the current blog.","params":[{"param":"$key","desc":"","required":"yes"},{"param":"$user_id","desc":" Defaults to current user.","required":"no"},{"param":"$blog_id","desc":" Defaults to current blog.","required":"no"}]},"is_user_spammy":{"desc":"Check to see whether a user is marked as a spammer, based on user login.","params":[{"param":"$user","desc":" Defaults to current user. WP_User object,   or user login name as a string.","required":"no"}]},"is_wpmu_sitewide_plugin":{"desc":"Deprecated functionality for determining if the current plugin is network-only.","params":[]},"is_wp_error":{"desc":"Check whether variable is a WordPress Error.","params":[{"param":"$thing","desc":"Check if unknown variable is a WP_Error object.","required":"yes"}]},"is_year":{"desc":"Is the query for an existing year archive?","params":[]},"json_decode":{"desc":"","params":[{"param":"$string","desc":"","required":"yes"},{"param":"$assoc_array","desc":"","required":"no"}]},"json_encode":{"desc":"","params":[]},"json_last_error_msg":{"desc":"Retrieves the error string of the last json_encode() or json_decode() call.","params":[]},"js_escape":{"desc":"Escape single quotes, specialchar double quotes, and fix line endings.","params":[{"param":"$text","desc":"The text to be escaped.","required":"yes"}]},"kses_init":{"desc":"Sets up most of the Kses filters for input form content.","params":[]},"kses_init_filters":{"desc":"Adds all Kses input form content filters.","params":[]},"kses_remove_filters":{"desc":"Removes all Kses input form content filters.","params":[]},"language_attributes":{"desc":"Displays the language attributes for the html tag.","params":[{"param":"$doctype","desc":" The type of html document. Accepts xhtml or html. ","required":"no"}]},"like_escape":{"desc":"Formerly used to escape strings before searching the DB. It was poorly documented and never worked as described.","params":[{"param":"$text","desc":"The text to be escaped.","required":"yes"}]},"links_add_base_url":{"desc":"Add a Base url to relative links in passed content.","params":[{"param":"$content","desc":"String to search for links in.","required":"yes"},{"param":"$base","desc":"The base URL to prefix to links.","required":"yes"},{"param":"$attrs","desc":"The attributes which should be processed.","required":"no"}]},"links_add_target":{"desc":"Adds a Target attribute to all links in passed content.","params":[{"param":"$content","desc":"String to search for links in.","required":"yes"},{"param":"$target","desc":"The Target to add to the links.","required":"no"},{"param":"$tags","desc":"An array of tags to apply to.","required":"no"}]},"links_popup_script":{"desc":"Show the link to the links popup and the number of links.","params":[{"param":"$text","desc":"the text of the link","required":"no"},{"param":"$width","desc":"the width of the popup window","required":"no"},{"param":"$height","desc":"the height of the popup window","required":"no"},{"param":"$file","desc":"the page to open in the popup window","required":"no"},{"param":"$count","desc":"the number of links in the db","required":"no"}]},"link_advanced_meta_box":{"desc":"Display advanced link options form fields.","params":[{"param":"$link","desc":"","required":"yes"}]},"link_categories_meta_box":{"desc":"Display link categories form fields.","params":[{"param":"$link","desc":"","required":"yes"}]},"link_pages":{"desc":"Print list of pages based on arguments.","params":[{"param":"$before","desc":"","required":"no"},{"param":"$after","desc":"","required":"no"},{"param":"$next_or_number","desc":"","required":"no"},{"param":"$nextpagelink","desc":"","required":"no"},{"param":"$previouspagelink","desc":"","required":"no"},{"param":"$pagelink","desc":"","required":"no"},{"param":"$more_file","desc":"","required":"no"}]},"link_submit_meta_box":{"desc":"Display link create form fields.","params":[{"param":"$link","desc":"","required":"yes"}]},"link_target_meta_box":{"desc":"Display form fields for changing link target.","params":[{"param":"$link","desc":"","required":"yes"}]},"link_xfn_meta_box":{"desc":"Display xfn form fields.","params":[{"param":"$link","desc":"","required":"yes"}]},"list_authors":{"desc":"Lists authors.","params":[{"param":"$optioncount","desc":"","required":"no"},{"param":"$exclude_admin","desc":"","required":"no"},{"param":"$show_fullname","desc":"","required":"no"},{"param":"$hide_empty","desc":"","required":"no"},{"param":"$feed","desc":"","required":"no"},{"param":"$feed_image","desc":"","required":"no"}]},"list_cats":{"desc":"Lists categories.","params":[{"param":"$optionall","desc":"","required":"no"},{"param":"$all","desc":"","required":"no"},{"param":"$sort_column","desc":"","required":"no"},{"param":"$sort_order","desc":"","required":"no"},{"param":"$file","desc":"","required":"no"},{"param":"$list","desc":"","required":"no"},{"param":"$optiondates","desc":"","required":"yes"},{"param":"$optioncount","desc":"","required":"yes"},{"param":"$hide_empty","desc":"","required":"no"},{"param":"$use_desc_for_title","desc":"","required":"no"},{"param":"$children","desc":"","required":"no"},{"param":"$child_of","desc":"","required":"yes"},{"param":"$categories","desc":"","required":"yes"},{"param":"$recurse","desc":"","required":"yes"},{"param":"$feed","desc":"","required":"no"},{"param":"$feed_image","desc":"","required":"no"},{"param":"$exclude","desc":"","required":"no"},{"param":"$hierarchical","desc":"","required":"no"}]},"list_core_update":{"desc":"","params":[{"param":"$update","desc":"","required":"yes"}]},"list_files":{"desc":"Returns a listing of all files in the specified folder and all subdirectories up to 100 levels deep.","params":[{"param":"$folder","desc":" Full path to folder. ","required":"no"},{"param":"$levels","desc":" Levels of folders to follow, Default 100 (PHP Loop limit).","required":"no"}]},"list_meta":{"desc":"Outputs a post’s public meta data in the Custom Fields meta box.","params":[{"param":"$meta","desc":"","required":"yes"}]},"list_plugin_updates":{"desc":"","params":[]},"list_theme_updates":{"desc":"","params":[]},"list_translation_updates":{"desc":"","params":[]},"load_child_theme_textdomain":{"desc":"Load the child themes translated strings.","params":[{"param":"$domain","desc":"Text domain. Unique identifier for retrieving translated strings.","required":"yes"},{"param":"$path","desc":" Path to the directory containing the .mo file. ","required":"no"}]},"load_default_textdomain":{"desc":"Load default translated strings based on locale.","params":[{"param":"$locale","desc":" Locale to load. Default is the value of get_locale().","required":"no"}]},"load_image_to_edit":{"desc":"Load an image resource for editing.","params":[{"param":"$attachment_id","desc":"Attachment ID.","required":"yes"},{"param":"$mime_type","desc":"Image mime type.","required":"yes"},{"param":"$size","desc":" Image size, defaults to full.","required":"no"}]},"load_muplugin_textdomain":{"desc":"Load the translated strings for a plugin residing in the mu-plugins directory.","params":[{"param":"$domain","desc":"Text domain. Unique identifier for retrieving translated strings.","required":"yes"},{"param":"$mu_plugin_rel_path","desc":" Relative to WPMU_PLUGIN_DIR directory in which the .mo file resides. ","required":"no"}]},"load_plugin_textdomain":{"desc":"Load a plugin’s translated strings.","params":[{"param":"$domain","desc":"Unique identifier for retrieving translated strings","required":"yes"},{"param":"$deprecated","desc":" Use the $plugin_rel_path parameter instead. ","required":"no"},{"param":"$plugin_rel_path","desc":" Relative path to WP_PLUGIN_DIR where the .mo file resides. ","required":"no"}]},"load_template":{"desc":"Require the template file with WordPress environment.","params":[{"param":"$_template_file","desc":"Path to template file.","required":"yes"},{"param":"$require_once","desc":"Whether to require_once or require. ","required":"no"}]},"load_textdomain":{"desc":"Load a .mo file into the text domain $domain.","params":[{"param":"$domain","desc":"Text domain. Unique identifier for retrieving translated strings.","required":"yes"},{"param":"$mofile","desc":"Path to the .mo file.","required":"yes"}]},"load_theme_textdomain":{"desc":"Load the theme’s translated strings.","params":[{"param":"$domain","desc":"Text domain. Unique identifier for retrieving translated strings.","required":"yes"},{"param":"$path","desc":" Path to the directory containing the .mo file. ","required":"no"}]},"locale_stylesheet":{"desc":"Display localized stylesheet link element.","params":[]},"locate_template":{"desc":"Retrieve the name of the highest priority template file that exists.","params":[{"param":"$template_names","desc":"Template file(s) to search for, in order.","required":"yes"},{"param":"$load","desc":"If true the template file will be loaded if it is found.","required":"no"},{"param":"$require_once","desc":"Whether to require_once or require. Has no effect if $load is false.","required":"no"}]},"login_footer":{"desc":"Outputs the footer for the login page.","params":[{"param":"$input_id","desc":"Which input to auto-focus","required":"no"}]},"login_header":{"desc":"Output the login page header.","params":[{"param":"$title","desc":" WordPress login Page title to display in the <title> element. ","required":"no"},{"param":"$message","desc":" Message to display in header. ","required":"no"},{"param":"$wp_error","desc":" The error to pass. ","required":"no"}]},"logIO":{"desc":"logIO() – Writes logging info to a file.","params":[{"param":"$io","desc":"Whether input or output","required":"yes"},{"param":"$msg","desc":"Information describing logging reason.","required":"yes"}]},"maintenance_nag":{"desc":"","params":[]},"make_clickable":{"desc":"Convert plaintext URI to HTML links.","params":[{"param":"$text","desc":"Content to convert URIs.","required":"yes"}]},"make_db_current":{"desc":"Updates the database tables to a new schema.","params":[{"param":"$tables","desc":" Which set of tables to update. Default is all.","required":"no"}]},"make_db_current_silent":{"desc":"Updates the database tables to a new schema, but without displaying results.","params":[{"param":"$tables","desc":" Which set of tables to update. Default is all.","required":"no"}]},"make_site_theme":{"desc":"Creates a site theme.","params":[]},"make_site_theme_from_default":{"desc":"Creates a site theme from the default theme.","params":[{"param":"$theme_name","desc":"The name of the theme.","required":"yes"},{"param":"$template","desc":"The directory name of the theme.","required":"yes"}]},"make_site_theme_from_oldschool":{"desc":"Creates a site theme from an existing theme.","params":[{"param":"$theme_name","desc":"The name of the theme.","required":"yes"},{"param":"$template","desc":"The directory name of the theme.","required":"yes"}]},"make_url_footnote":{"desc":"Strip HTML and put links at the bottom of stripped content.","params":[{"param":"$content","desc":"Content to get links","required":"yes"}]},"map_deep":{"desc":"Maps a function to all non-iterable elements of an array or an object.","params":[{"param":"$value","desc":"The array, object, or scalar.","required":"yes"},{"param":"$callback","desc":"The function to map onto $value.","required":"yes"}]},"map_meta_cap":{"desc":"Map meta capabilities to primitive capabilities.","params":[{"param":"$cap","desc":"Capability name.","required":"yes"},{"param":"$user_id","desc":"User ID.","required":"yes"},{"param":"$object_id","desc":" ID of the specific object to check against if $cap is a meta cap. Meta capabilities, e.g. edit_post, edit_user, etc., are capabilities used by map_meta_cap() to map to other primitive capabilities, e.g. edit_posts, edit_others_posts, etc. The parameter is accessed via func_get_args().","required":"no"}]},"maybe_add_column":{"desc":"Adds column to a database table if it doesn’t already exist.","params":[{"param":"$table_name","desc":"The table name to modify.","required":"yes"},{"param":"$column_name","desc":"The column name to add to the table.","required":"yes"},{"param":"$create_ddl","desc":"The SQL statement used to add the column.","required":"yes"}]},"maybe_add_existing_user_to_blog":{"desc":"Add a new user to a blog by visiting /newbloguser/username/.","params":[]},"maybe_convert_table_to_utf8mb4":{"desc":"If a table only contains utf8 or utf8mb4 columns, convert it to utf8mb4.","params":[{"param":"$table","desc":"The table to convert.","required":"yes"}]},"maybe_create_table":{"desc":"Creates a table in the database if it doesn’t already exist.","params":[{"param":"$table_name","desc":"Database table name to create.","required":"yes"},{"param":"$create_ddl","desc":"SQL statement to create table.","required":"yes"}]},"maybe_disable_automattic_widgets":{"desc":"Disables the Automattic widgets plugin, which was merged into core.","params":[]},"maybe_disable_link_manager":{"desc":"Disables the Link Manager on upgrade if, at the time of upgrade, no links exist in the DB.","params":[]},"maybe_drop_column":{"desc":"Drop column from database table, if it exists.","params":[{"param":"$table_name","desc":"Table name","required":"yes"},{"param":"$column_name","desc":"Column name","required":"yes"},{"param":"$drop_ddl","desc":"SQL statement to drop column.","required":"yes"}]},"maybe_hash_hex_color":{"desc":"Ensures that any hex color is properly hashed.","params":[{"param":"$color","desc":"","required":"yes"}]},"maybe_redirect_404":{"desc":"Correct 404 redirects when NOBLOGREDIRECT is defined.","params":[]},"maybe_serialize":{"desc":"Serialize data, if needed.","params":[{"param":"$data","desc":"Data that might be serialized.","required":"yes"}]},"maybe_unserialize":{"desc":"Unserialize value only if it was serialized.","params":[{"param":"$original","desc":"Maybe unserialized original, if is needed.","required":"yes"}]},"mbstring_binary_safe_encoding":{"desc":"Set the mbstring internal encoding to a binary safe encoding when func_overload is enabled.","params":[{"param":"$reset","desc":" Whether to reset the encoding back to a previously-set encoding. ","required":"no"}]},"mb_strlen":{"desc":"","params":[]},"mb_substr":{"desc":"","params":[]},"media_buttons":{"desc":"Adds the media button to the editor","params":[{"param":"$editor_id","desc":"","required":"no"}]},"media_handle_sideload":{"desc":"Handles a side-loaded file in the same way as an uploaded file is handled by media_handle_upload().","params":[{"param":"$file_array","desc":"Array similar to a $_FILES upload array.","required":"yes"},{"param":"$post_id","desc":"The post ID the media is associated with.","required":"yes"},{"param":"$desc","desc":" Description of the side-loaded file. ","required":"no"},{"param":"$post_data","desc":" Post data to override. ","required":"no"}]},"media_handle_upload":{"desc":"Save a file submitted from a POST request and create an attachment post for it.","params":[{"param":"$file_id","desc":"Index of the $_FILES array that the file was sent. Required.","required":"yes"},{"param":"$post_id","desc":"The post ID of a post to attach the media item to. Required, but can be set to 0, creating a media item that has no relationship to a post.","required":"yes"},{"param":"$post_data","desc":"Overwrite some of the attachment. Optional.","required":"no"},{"param":"$overrides","desc":"Override the wp_handle_upload() behavior. Optional.","required":"no"}]},"media_post_single_attachment_fields_to_edit":{"desc":"Retrieves the post non-image attachment fields to edito form fields.","params":[{"param":"$form_fields","desc":"An array of attachment form fields.","required":"yes"},{"param":"$post","desc":"The WP_Post attachment object.","required":"yes"}]},"media_send_to_editor":{"desc":"Adds image html to editor","params":[{"param":"$html","desc":"","required":"yes"}]},"media_sideload_image":{"desc":"Downloads an image from the specified URL and attaches it to a post.","params":[{"param":"$file","desc":"The URL of the image to download.","required":"yes"},{"param":"$post_id","desc":"The post ID the media is to be associated with.","required":"yes"},{"param":"$desc","desc":" Description of the image.","required":"no"},{"param":"$return","desc":" Accepts html (image tag html) or src (URL). ","required":"no"}]},"media_single_attachment_fields_to_edit":{"desc":"Retrieves the single non-image attachment fields to edit form fields.","params":[{"param":"$form_fields","desc":"An array of attachment form fields.","required":"yes"},{"param":"$post","desc":"The WP_Post attachment object.","required":"yes"}]},"media_upload_audio":{"desc":"Handles uploading an audio file.","params":[]},"media_upload_file":{"desc":"Handles uploading a generic file.","params":[]},"media_upload_flash_bypass":{"desc":"Displays the multi-file uploader message.","params":[]},"media_upload_form":{"desc":"Outputs the legacy media upload form.","params":[{"param":"$errors","desc":"","required":"no"}]},"media_upload_form_handler":{"desc":"Handles form submissions for the legacy media uploader.","params":[]},"media_upload_gallery":{"desc":"Retrieves the legacy media uploader form in an iframe.","params":[]},"media_upload_gallery_form":{"desc":"Adds gallery form to upload iframe","params":[{"param":"$errors","desc":"","required":"yes"}]},"media_upload_header":{"desc":"Outputs the legacy media upload header.","params":[]},"media_upload_html_bypass":{"desc":"Displays the browser’s built-in uploader message.","params":[]},"media_upload_image":{"desc":"Handles uploading an image.","params":[]},"media_upload_library":{"desc":"Retrieves the legacy media library form in an iframe.","params":[]},"media_upload_library_form":{"desc":"Outputs the legacy media upload form for the media library.","params":[{"param":"$errors","desc":"","required":"yes"}]},"media_upload_max_image_resize":{"desc":"Displays the checkbox to scale images.","params":[]},"media_upload_tabs":{"desc":"Defines the default media upload tabs","params":[]},"media_upload_text_after":{"desc":"Used to display a “After a file has been uploaded.","params":[]},"media_upload_type_form":{"desc":"Outputs the legacy media upload form for a given media type.","params":[{"param":"$type","desc":"","required":"no"},{"param":"$errors","desc":"","required":"no"},{"param":"$id","desc":"","required":"no"}]},"media_upload_type_url_form":{"desc":"Outputs the legacy media upload form for external media.","params":[{"param":"$type","desc":"","required":"no"},{"param":"$errors","desc":"","required":"no"},{"param":"$id","desc":"","required":"no"}]},"media_upload_video":{"desc":"Handles uploading a video file.","params":[]},"menu_page_url":{"desc":"Get the url to access a particular menu page based on the slug it was registered with.","params":[{"param":"$menu_slug","desc":"The slug name to refer to this menu by (should be unique for this menu)","required":"yes"},{"param":"$echo","desc":"Whether or not to echo the url - default is true","required":"no"}]},"metadata_exists":{"desc":"Determine if a meta key is set for a given object","params":[{"param":"$meta_type","desc":"Type of object metadata is for (e.g., comment, post, or user)","required":"yes"},{"param":"$object_id","desc":"ID of the object metadata is for","required":"yes"},{"param":"$meta_key","desc":"Metadata key.","required":"yes"}]},"meta_box_prefs":{"desc":"Prints the meta box preferences for screen meta.","params":[{"param":"$screen","desc":"","required":"yes"}]},"meta_form":{"desc":"Prints the form in the Custom Fields meta box.","params":[{"param":"$post","desc":" The post being edited.","required":"no"}]},"ms_allowed_http_request_hosts":{"desc":"Whitelists any domain in a multisite installation for safe HTTP requests.","params":[{"param":"$is_external","desc":"","required":"yes"},{"param":"$host","desc":"","required":"yes"}]},"ms_cookie_constants":{"desc":"Defines Multisite cookie constants.","params":[]},"ms_deprecated_blogs_file":{"desc":"Deprecated functionality for determining whether a file is deprecated.","params":[]},"ms_file_constants":{"desc":"Defines Multisite file constants.","params":[]},"ms_is_switched":{"desc":"Determines if switch_to_blog() is in effect","params":[]},"ms_load_current_site_and_network":{"desc":"Identifies the network and site of a requested domain and path and populates the corresponding network and site global objects as part of the multisite bootstrap process.","params":[{"param":"$domain","desc":"The requested domain.","required":"yes"},{"param":"$path","desc":"The requested path.","required":"yes"},{"param":"$subdomain","desc":" Whether a subdomain (true) or subdirectory (false) configuration. ","required":"no"}]},"ms_not_installed":{"desc":"Displays a failure message.","params":[{"param":"$domain","desc":"The requested domain for the error to reference.","required":"yes"},{"param":"$path","desc":"The requested path for the error to reference.","required":"yes"}]},"ms_site_check":{"desc":"Checks status of current blog.","params":[]},"ms_subdomain_constants":{"desc":"Defines Multisite subdomain constants and handles warnings and notices.","params":[]},"ms_upload_constants":{"desc":"Defines Multisite upload constants.","params":[]},"multisite_over_quota_message":{"desc":"Displays the out of storage quota message in Multisite.","params":[]},"mu_dropdown_languages":{"desc":"Generates and displays a drop-down of available languages.","params":[{"param":"$lang_files","desc":" An array of the language files. ","required":"no"},{"param":"$current","desc":" The current language code. ","required":"no"}]},"mu_options":{"desc":"WPMU options.","params":[]},"mysql2date":{"desc":"Convert given date string into a different format.","params":[{"param":"$format","desc":"Format of the date to return.","required":"yes"},{"param":"$date","desc":"Date string to convert.","required":"yes"},{"param":"$translate","desc":"Whether the return date should be translated. ","required":"no"}]},"mysql_to_rfc3339":{"desc":"Parses and formats a MySQL datetime (Y-m-d H:i:s) for ISO8601/RFC3339.","params":[{"param":"$date_string","desc":"Date string to parse and format.","required":"yes"}]},"network_admin_url":{"desc":"Retrieves the URL to the admin area for the network.","params":[{"param":"$path","desc":"path relative to the admin URL. ","required":"no"},{"param":"$scheme","desc":" The scheme to use. Default is admin, which obeys force_ssl_admin() and is_ssl(). http or https can be passed to force those schemes.","required":"no"}]},"network_domain_check":{"desc":"Check for an existing network.","params":[]},"network_edit_site_nav":{"desc":"Outputs the HTML for a network’s “Edit Site” tabular interface.","params":[{"param":"$args","desc":"Array or string of Query parameters. blog_id(int) The site ID. Default is the current site. links(array) The tabs to include with (label|url|cap) keys. selected(string) The ID of the selected link.  ","required":"no"}]},"network_home_url":{"desc":"Retrieves the home URL for the current network.","params":[{"param":"$path","desc":" Path relative to the home URL. ","required":"no"},{"param":"$scheme","desc":" Scheme to give the home URL context. Accepts http, https, or relative. ","required":"no"}]},"network_settings_add_js":{"desc":"Print JavaScript in the header on the Network Settings screen.","params":[]},"network_site_url":{"desc":"Retrieves the site URL for the current network.","params":[{"param":"$path","desc":" Path relative to the site URL. ","required":"no"},{"param":"$scheme","desc":" Scheme to give the site URL context. Accepts http, https, or relative. ","required":"no"}]},"network_step1":{"desc":"Prints step 1 for Network installation process.","params":[{"param":"$errors","desc":"","required":"no"}]},"network_step2":{"desc":"Prints step 2 for Network installation process.","params":[{"param":"$errors","desc":"","required":"no"}]},"newblog_notify_siteadmin":{"desc":"Notifies the network admin that a new site has been activated.","params":[{"param":"$blog_id","desc":"The new sites ID.","required":"yes"},{"param":"$deprecated","desc":"Not used.","required":"no"}]},"newuser_notify_siteadmin":{"desc":"Notifies the network admin that a new user has been activated.","params":[{"param":"$user_id","desc":"The new users ID.","required":"yes"}]},"new_user_email_admin_notice":{"desc":"Adds an admin notice alerting the user to check for confirmation email after email address change.","params":[]},"next_comments_link":{"desc":"Displays the link to the next comments page.","params":[{"param":"$label","desc":" Label for link text. ","required":"no"},{"param":"$max_page","desc":" Max page. Default 0.","required":"no"}]},"next_image_link":{"desc":"Displays next image link that has the same post parent.","params":[{"param":"$size","desc":" Image size. Accepts any valid image size, an array of width and height values in pixels (in that order), 0, or none. 0 or none will default to post_title or $text. ","required":"no"},{"param":"$text","desc":" Link text. ","required":"no"}]},"next_post":{"desc":"Prints link to the next post.","params":[{"param":"$format","desc":"","required":"no"},{"param":"$next","desc":"","required":"no"},{"param":"$title","desc":"","required":"no"},{"param":"$in_same_cat","desc":"","required":"no"},{"param":"$limitnext","desc":"","required":"no"},{"param":"$excluded_categories","desc":"","required":"no"}]},"next_posts":{"desc":"Display or return the next posts page link.","params":[{"param":"$max_page","desc":" Max pages. Default 0.","required":"no"},{"param":"$echo","desc":" Whether to echo the link. ","required":"no"}]},"next_posts_link":{"desc":"Display the next posts page link.","params":[{"param":"$label","desc":"Content for link text.","required":"no"},{"param":"$max_page","desc":" Max pages. Default 0.","required":"no"}]},"next_post_link":{"desc":"Display next post link that is adjacent to the current post.","params":[{"param":"$format","desc":" Link anchor format. Default « %link.","required":"no"},{"param":"$link","desc":" Link permalink format. Default %title","required":"no"},{"param":"$in_same_term","desc":" Whether link should be in a same taxonomy term. ","required":"no"},{"param":"$excluded_terms","desc":" Array or comma-separated list of excluded term IDs. ","required":"no"},{"param":"$taxonomy","desc":" Taxonomy, if $in_same_term is true. ","required":"no"}]},"next_post_rel_link":{"desc":"Displays the relational link for the next post adjacent to the current post.","params":[{"param":"$title","desc":" Link title format. ","required":"no"},{"param":"$in_same_term","desc":" Whether link should be in a same taxonomy term. ","required":"no"},{"param":"$excluded_terms","desc":" Array or comma-separated list of excluded term IDs. ","required":"no"},{"param":"$taxonomy","desc":" Taxonomy, if $in_same_term is true. ","required":"no"}]},"next_widget_id_number":{"desc":"","params":[{"param":"$id_base","desc":"","required":"yes"}]},"nocache_headers":{"desc":"Set the headers to prevent caching for the different browsers.","params":[]},"noindex":{"desc":"Displays a noindex meta tag if required by the blog configuration.","params":[]},"normalize_whitespace":{"desc":"Normalize EOL characters and strip duplicate whitespace.","params":[{"param":"$str","desc":"The string to normalize.","required":"yes"}]},"number_format_i18n":{"desc":"Convert float number to format based on the locale.","params":[{"param":"$number","desc":"The number to convert based on locale.","required":"yes"},{"param":"$decimals","desc":" Precision of the number of decimal places. Default 0.","required":"no"}]},"options_discussion_add_js":{"desc":"Output JavaScript to toggle display of additional settings if avatars are disabled.","params":[]},"options_general_add_js":{"desc":"Display JavaScript on the page.","params":[]},"options_permalink_add_js":{"desc":"Display JavaScript on the page.","params":[]},"options_reading_add_js":{"desc":"Display JavaScript on the page.","params":[]},"options_reading_blog_charset":{"desc":"Render the site charset setting.","params":[]},"option_update_filter":{"desc":"Refreshes the value of the options whitelist available via the ‘whitelist_options’ hook.","params":[{"param":"$options","desc":"","required":"yes"}]},"page_attributes_meta_box":{"desc":"Display page attributes form fields.","params":[{"param":"$post","desc":"","required":"yes"}]},"page_template_dropdown":{"desc":"Print out option HTML elements for the page templates drop-down.","params":[{"param":"$default","desc":" The template file name. ","required":"no"},{"param":"$post_type","desc":" Post type to get templates for. Default post.","required":"no"}]},"paginate_comments_links":{"desc":"Displays or retrieves pagination links for the comments on the current post.","params":[{"param":"$args","desc":"args. See paginate_links(). ","required":"no"}]},"paginate_links":{"desc":"Retrieve paginated link for archive post pages.","params":[{"param":"$args","desc":"Array or string of arguments for generating paginated links for archives. base(string) Base of the paginated url.  format(string) Format for the pagination structure.  total(int) The total amount of pages. Default is the value WP_Querys max_num_pages or 1. current(int) The current page number. Default is paged query var or 1. show_all(bool) Whether to show all pages. Default false. end_size(int) How many numbers on either the start and the end list edges. Default 1. mid_size(int) How many numbers to either side of the current pages. Default 2. prev_next(bool) Whether to include the previous and next links in the list. Default true. prev_text(bool) The previous page text. Default « Previous. next_text(bool) The next page text. Default Next ». type(string) Controls format of the returned value. Possible values are plain, array and list. Default is plain. add_args(array) An array of query args to add. Default false. add_fragment(string) A string to append to each link.  before_page_number(string) A string to appear before the page number.  after_page_number(string) A string to append after the page number.   ","required":"no"}]},"parent_dropdown":{"desc":"Print out option HTML elements for the page parents drop-down.","params":[{"param":"$default","desc":" The default page ID to be pre-selected. Default 0.","required":"no"},{"param":"$parent","desc":" The parent page ID. Default 0.","required":"no"},{"param":"$level","desc":" Page depth level. Default 0.","required":"no"},{"param":"$post","desc":"Post ID or WP_Post object.","required":"no"}]},"parent_post_rel_link":{"desc":"Display relational link for parent item","params":[{"param":"$title","desc":" Link title format. ","required":"no"}]},"parse_w3cdtf":{"desc":"","params":[]},"path_is_absolute":{"desc":"Test if a give filesystem path is absolute.","params":[{"param":"$path","desc":"File path.","required":"yes"}]},"path_join":{"desc":"Join two filesystem paths together.","params":[{"param":"$base","desc":"Base path.","required":"yes"},{"param":"$path","desc":"Path relative to $base.","required":"yes"}]},"permalink_anchor":{"desc":"Display permalink anchor for current post.","params":[{"param":"$mode","desc":" Permalink mode. Accepts title or id. ","required":"no"}]},"permalink_link":{"desc":"Print the permalink of the current post in the loop.","params":[]},"permalink_single_rss":{"desc":"Print the permalink to the RSS feed.","params":[{"param":"$deprecated","desc":"","required":"no"}]},"pingback":{"desc":"Pings back the links found in a post.","params":[{"param":"$content","desc":"Post content to check for links. If empty will retrieve from post.","required":"yes"},{"param":"$post_id","desc":"Post Object or ID.","required":"yes"}]},"pingback_ping_source_uri":{"desc":"Default filter attached to pingback_ping_source_uri to validate the pingback’s Source URI","params":[{"param":"$source_uri","desc":"","required":"yes"}]},"pings_open":{"desc":"Whether the current post is open for pings.","params":[{"param":"$post_id","desc":"Post ID or WP_Post object. Default current post.","required":"no"}]},"plugins_api":{"desc":"Retrieves plugin installer pages from the WordPress.org Plugins API.","params":[{"param":"$action","desc":"API action to perform: query_plugins, plugin_information, hot_tags or hot_categories.","required":"yes"},{"param":"$args","desc":"Array or object of arguments to serialize for the Plugin Info API. slug(string) The plugin slug.  per_page(int) Number of plugins per page. Default 24. page(int) Number of current page. Default 1. number(int) Number of tags or categories to be queried. search(string) A search term.  tag(string) Tag to filter plugins.  author(string) Username of an plugin author to filter plugins.  user(string) Username to query for their favorites.  browse(string) Browse view: popular, new, beta, recommended. locale(string) Locale to provide context-sensitive results. Default is the value of get_locale(). installed_plugins(string) Installed plugins to provide context-sensitive results. is_ssl(bool) Whether links should be returned with https or not. Default false. fields(array) Array of fields which should or should not be returned. short_description(bool) Whether to return the plugin short description. Default true. description(bool) Whether to return the plugin full description. Default false. sections(bool) Whether to return the plugin readme sections: description, installation, FAQ, screenshots, other notes, and changelog. Default false. tested(bool) Whether to return the Compatible up to value. Default true. requires(bool) Whether to return the required WordPress version. Default true. rating(bool) Whether to return the rating in percent and total number of ratings. Default true. ratings(bool) Whether to return the number of rating for each star (1-5). Default true. downloaded(bool) Whether to return the download count. Default true. downloadlink(bool) Whether to return the download link for the package. Default true. last_updated(bool) Whether to return the date of the last update. Default true. added(bool) Whether to return the date when the plugin was added to the wordpress.org repository. Default true. tags(bool) Whether to return the assigned tags. Default true. compatibility(bool) Whether to return the WordPress compatibility list. Default true. homepage(bool) Whether to return the plugin homepage link. Default true. versions(bool) Whether to return the list of all available versions. Default false. donate_link(bool) Whether to return the donation link. Default true. reviews(bool) Whether to return the plugin reviews. Default false. banners(bool) Whether to return the banner images links. Default false. icons(bool) Whether to return the icon links. Default false. active_installs(bool) Whether to return the number of active installs. Default false. group(bool) Whether to return the assigned group. Default false. contributors(bool) Whether to return the list of contributors. Default false.    ","required":"no"}]},"plugins_url":{"desc":"Retrieve a URL within the plugins or mu-plugins directory.","params":[{"param":"$path","desc":" Extra path appended to the end of the URL, including the relative directory if $plugin is supplied. ","required":"no"},{"param":"$plugin","desc":" A full path to a file inside a plugin or mu-plugin. The URL will be relative to its directory. Typically this is done by passing __FILE__ as the argument.","required":"no"}]},"plugin_basename":{"desc":"Gets the basename of a plugin.","params":[{"param":"$file","desc":"The filename of plugin.","required":"yes"}]},"plugin_dir_path":{"desc":"Get the filesystem directory path (with trailing slash) for the plugin __FILE__ passed in.","params":[{"param":"$file","desc":"The filename of the plugin (__FILE__).","required":"yes"}]},"plugin_dir_url":{"desc":"Get the URL directory path (with trailing slash) for the plugin __FILE__ passed in.","params":[{"param":"$file","desc":"The filename of the plugin (__FILE__).","required":"yes"}]},"plugin_sandbox_scrape":{"desc":"","params":[{"param":"$plugin","desc":"","required":"yes"}]},"populate_network":{"desc":"Populate network settings.","params":[{"param":"$network_id","desc":"ID of network to populate.","required":"no"},{"param":"$domain","desc":"The domain name for the network (eg. example.com).","required":"no"},{"param":"$email","desc":"Email address for the network administrator.","required":"no"},{"param":"$site_name","desc":"The name of the network.","required":"no"},{"param":"$path","desc":" The path to append to the networks domain name. ","required":"no"},{"param":"$subdomain_install","desc":" Whether the network is a subdomain install or a subdirectory install. Default false, meaning the network is a subdirectory install.","required":"no"}]},"populate_options":{"desc":"Create WordPress options and set the default values.","params":[]},"populate_roles":{"desc":"Execute WordPress role creation for the various WordPress versions.","params":[]},"populate_roles_160":{"desc":"Create the roles for WordPress 2.0","params":[]},"populate_roles_210":{"desc":"Create and modify WordPress roles for WordPress 2.1.","params":[]},"populate_roles_230":{"desc":"Create and modify WordPress roles for WordPress 2.3.","params":[]},"populate_roles_250":{"desc":"Create and modify WordPress roles for WordPress 2.5.","params":[]},"populate_roles_260":{"desc":"Create and modify WordPress roles for WordPress 2.6.","params":[]},"populate_roles_270":{"desc":"Create and modify WordPress roles for WordPress 2.7.","params":[]},"populate_roles_280":{"desc":"Create and modify WordPress roles for WordPress 2.8.","params":[]},"populate_roles_300":{"desc":"Create and modify WordPress roles for WordPress 3.0.","params":[]},"popuplinks":{"desc":"Adds element attributes to open links in new windows.","params":[{"param":"$text","desc":"Content to replace links to open in a new window.","required":"yes"}]},"postbox_classes":{"desc":"Returns the list of classes to be used by a meta box.","params":[{"param":"$id","desc":"","required":"yes"},{"param":"$page","desc":"","required":"yes"}]},"posts_nav_link":{"desc":"Display post pages link navigation for previous and next pages.","params":[{"param":"$sep","desc":" Separator for posts navigation links. ","required":"no"},{"param":"$prelabel","desc":" Label for previous pages. ","required":"no"},{"param":"$nxtlabel","desc":"Label for next pages. ","required":"no"}]},"post_author_meta_box":{"desc":"Display form field with list of authors.","params":[{"param":"$post","desc":"","required":"yes"}]},"post_categories_meta_box":{"desc":"Display post categories form fields.","params":[{"param":"$post","desc":"Post object.","required":"yes"},{"param":"$box","desc":"Categories meta box arguments. id(string) Meta box id attribute. title(string) Meta box title. callback(callable) Meta box display callback. args(array) Extra meta box arguments. taxonomy(string) Taxonomy. Default category.    ","required":"yes"}]},"post_class":{"desc":"Display the classes for the post div.","params":[{"param":"$class","desc":"One or more classes to add to the class list.","required":"no"},{"param":"$post_id","desc":" Post ID or post object. Defaults to the global $post.","required":"no"}]},"post_comments_feed_link":{"desc":"Displays the comment feed link for a post.","params":[{"param":"$link_text","desc":" Descriptive link text. Default Comments Feed.","required":"no"},{"param":"$post_id","desc":" Post ID. Default is the ID of the global $post.","required":"no"},{"param":"$feed","desc":" Feed format. ","required":"no"}]},"post_comment_meta_box":{"desc":"Display comments for post.","params":[{"param":"$post","desc":"","required":"yes"}]},"post_comment_meta_box_thead":{"desc":"Display comments for post table header","params":[{"param":"$result","desc":"table header rows","required":"yes"}]},"post_comment_status_meta_box":{"desc":"Display comments status form fields.","params":[{"param":"$post","desc":"","required":"yes"}]},"post_custom":{"desc":"Retrieve post custom meta data field.","params":[{"param":"$key","desc":"Meta data key name.","required":"no"}]},"post_custom_meta_box":{"desc":"Display custom fields form fields.","params":[{"param":"$post","desc":"","required":"yes"}]},"post_excerpt_meta_box":{"desc":"Display post excerpt form fields.","params":[{"param":"$post","desc":"","required":"yes"}]},"post_exists":{"desc":"Determine if a post exists based on title, content, and date","params":[{"param":"$title","desc":"Post title","required":"yes"},{"param":"$content","desc":"post content","required":"no"},{"param":"$date","desc":"post date","required":"no"}]},"post_format_meta_box":{"desc":"Display post format form elements.","params":[{"param":"$post","desc":"Post object.","required":"yes"},{"param":"$box","desc":"Post formats meta box arguments. id(string) Meta box id attribute. title(string) Meta box title. callback(callable) Meta box display callback. args(array) Extra meta box arguments.  ","required":"yes"}]},"post_form_autocomplete_off":{"desc":"Disables autocomplete on the ‘post’ form (Add/Edit Post screens) for WebKit browsers, as they disregard the autocomplete setting on the editor textarea. That can break the editor when the user navigates to it with the browser’s Back button. See #28037","params":[]},"post_password_required":{"desc":"Whether post requires password and correct password has been provided.","params":[{"param":"$post","desc":"An optional post. Global $post used if not provided.","required":"no"}]},"post_permalink":{"desc":"Retrieve permalink from post ID.","params":[{"param":"$post_id","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"post_preview":{"desc":"Save draft or manually autosave for showing preview.","params":[]},"post_reply_link":{"desc":"Displays the HTML content for reply to post link.","params":[{"param":"$args","desc":" Override default options,","required":"no"},{"param":"$post","desc":"Post ID or WP_Post object the comment is going to be displayed on. Default current post.","required":"no"}]},"post_revisions_meta_box":{"desc":"Display list of revisions.","params":[{"param":"$post","desc":"","required":"yes"}]},"post_slug_meta_box":{"desc":"Display slug form fields.","params":[{"param":"$post","desc":"","required":"yes"}]},"post_submit_meta_box":{"desc":"Displays post submit form fields.","params":[{"param":"$post","desc":"Current post object.","required":"yes"},{"param":"$args","desc":"Array of arguments for building the post submit meta box. id(string) Meta box id attribute. title(string) Meta box title. callback(callable) Meta box display callback. args(array) Extra meta box arguments.  ","required":"no"}]},"post_tags_meta_box":{"desc":"Display post tags form fields.","params":[{"param":"$post","desc":"Post object.","required":"yes"},{"param":"$box","desc":"Tags meta box arguments. id(string) Meta box id attribute. title(string) Meta box title. callback(callable) Meta box display callback. args(array) Extra meta box arguments. taxonomy(string) Taxonomy. Default post_tag.    ","required":"yes"}]},"post_thumbnail_meta_box":{"desc":"Display post thumbnail meta box.","params":[{"param":"$post","desc":"A post object.","required":"yes"}]},"post_trackback_meta_box":{"desc":"Display trackback links form fields.","params":[{"param":"$post","desc":"","required":"yes"}]},"post_type_archive_title":{"desc":"Display or retrieve title for a post type archive.","params":[{"param":"$prefix","desc":" What to display before the title.","required":"no"},{"param":"$display","desc":" Whether to display or retrieve title.","required":"no"}]},"post_type_exists":{"desc":"Check if a post type is registered.","params":[{"param":"$post_type","desc":"Post type name.","required":"yes"}]},"post_type_supports":{"desc":"Check a post type’s support for a given feature.","params":[{"param":"$post_type","desc":"The post type being checked.","required":"yes"},{"param":"$feature","desc":"The feature being checked.","required":"yes"}]},"prepend_attachment":{"desc":"Wrap attachment in paragraph tag before content.","params":[{"param":"$content","desc":"","required":"yes"}]},"prep_atom_text_construct":{"desc":"Determine the type of a string of data with the data formatted.","params":[{"param":"$data","desc":"Input string","required":"yes"}]},"press_it":{"desc":"Press It form handler.","params":[]},"press_this_media_buttons":{"desc":"","params":[]},"preview_theme":{"desc":"Start preview theme output buffer.","params":[]},"preview_theme_ob_filter":{"desc":"Callback function for ob_start() to capture all links in the theme.","params":[{"param":"$content","desc":"","required":"yes"}]},"preview_theme_ob_filter_callback":{"desc":"Manipulates preview theme links in order to control and maintain location.","params":[{"param":"$matches","desc":"","required":"yes"}]},"previous_comments_link":{"desc":"Displays the link to the previous comments page.","params":[{"param":"$label","desc":" Label for comments link text. ","required":"no"}]},"previous_image_link":{"desc":"Displays previous image link that has the same post parent.","params":[{"param":"$size","desc":" Image size. Accepts any valid image size, an array of width and height values in pixels (in that order), 0, or none. 0 or none will default to post_title or $text. ","required":"no"},{"param":"$text","desc":" Link text. ","required":"no"}]},"previous_post":{"desc":"Prints link to the previous post.","params":[{"param":"$format","desc":"","required":"no"},{"param":"$previous","desc":"","required":"no"},{"param":"$title","desc":"","required":"no"},{"param":"$in_same_cat","desc":"","required":"no"},{"param":"$limitprev","desc":"","required":"no"},{"param":"$excluded_categories","desc":"","required":"no"}]},"previous_posts":{"desc":"Displays or retrieves the previous posts page link.","params":[{"param":"$echo","desc":" Whether to echo the link. ","required":"no"}]},"previous_posts_link":{"desc":"Displays the previous posts page link.","params":[{"param":"$label","desc":" Previous page link text.","required":"no"}]},"previous_post_link":{"desc":"Display previous post link that is adjacent to the current post.","params":[{"param":"$format","desc":" Link anchor format. Default « %link.","required":"no"},{"param":"$link","desc":" Link permalink format. ","required":"no"},{"param":"$in_same_term","desc":" Whether link should be in a same taxonomy term. ","required":"no"},{"param":"$excluded_terms","desc":" Array or comma-separated list of excluded term IDs. ","required":"no"},{"param":"$taxonomy","desc":" Taxonomy, if $in_same_term is true. ","required":"no"}]},"prev_post_rel_link":{"desc":"Displays the relational link for the previous post adjacent to the current post.","params":[{"param":"$title","desc":" Link title format. ","required":"no"},{"param":"$in_same_term","desc":" Whether link should be in a same taxonomy term. ","required":"no"},{"param":"$excluded_terms","desc":" Array or comma-separated list of excluded term IDs. Default true.","required":"no"},{"param":"$taxonomy","desc":" Taxonomy, if $in_same_term is true. ","required":"no"}]},"pre_schema_upgrade":{"desc":"Runs before the schema is upgraded.","params":[]},"print_admin_styles":{"desc":"Prints the styles queue in the HTML head on admin pages.","params":[]},"print_column_headers":{"desc":"Prints column headers for a particular screen.","params":[{"param":"$screen","desc":"The screen hook name or screen object.","required":"yes"},{"param":"$with_id","desc":"Whether to set the id attribute or not.","required":"no"}]},"print_embed_comments_button":{"desc":"Prints the necessary markup for the embed comments button.","params":[]},"print_embed_scripts":{"desc":"Prints the JavaScript in the embed iframe header.","params":[]},"print_embed_sharing_button":{"desc":"Prints the necessary markup for the embed sharing button.","params":[]},"print_embed_sharing_dialog":{"desc":"Prints the necessary markup for the embed sharing dialog.","params":[]},"print_embed_styles":{"desc":"Prints the CSS in the embed iframe header.","params":[]},"print_emoji_detection_script":{"desc":"Print the inline Emoji detection script if it is not already printed.","params":[]},"print_emoji_styles":{"desc":"Print the important emoji-related styles.","params":[]},"print_footer_scripts":{"desc":"Prints the scripts that were queued for the footer or too late for the HTML head.","params":[]},"print_head_scripts":{"desc":"Prints the script queue in the HTML head on admin pages.","params":[]},"print_late_styles":{"desc":"Prints the styles that were queued too late for the HTML head.","params":[]},"privacy_ping_filter":{"desc":"Check whether blog is public before returning sites.","params":[{"param":"$sites","desc":"Will return if blog is public, will not return if not public.","required":"yes"}]},"query_posts":{"desc":"Sets up The Loop with query parameters.","params":[{"param":"$query","desc":"Array or string of WP_Query arguments.","required":"yes"}]},"RandomCompat_intval":{"desc":"Cast to an integer if we can, safely.","params":[{"param":"$number","desc":"The number we want to convert to an int","required":"yes"},{"param":"$fail_open","desc":"Set to true to not throw an exception","required":"no"}]},"RandomCompat_strlen":{"desc":"strlen() implementation that isn’t brittle to mbstring.func_overload","params":[{"param":"$binary_string","desc":"","required":"yes"}]},"RandomCompat_substr":{"desc":"substr() implementation that isn’t brittle to mbstring.func_overload","params":[{"param":"$binary_string","desc":"","required":"yes"},{"param":"$start","desc":"","required":"yes"},{"param":"$length","desc":"(optional)","required":"no"}]},"random_bytes":{"desc":"Unless open_basedir is enabled, use /dev/urandom for random numbers in accordance with best practices","params":[{"param":"$bytes","desc":"","required":"yes"}]},"random_int":{"desc":"Fetch a random integer between $min and $max inclusive","params":[{"param":"$min","desc":"","required":"yes"},{"param":"$max","desc":"","required":"yes"}]},"rawurlencode_deep":{"desc":"Navigates through an array, object, or scalar, and raw-encodes the values to be used in a URL.","params":[{"param":"$value","desc":"The array or string to be encoded.","required":"yes"}]},"recurse_dirsize":{"desc":"Get the size of a directory recursively.","params":[{"param":"$directory","desc":"Full path of a directory.","required":"yes"},{"param":"$exclude","desc":" Full path of a subdirectory to exclude from the total.","required":"no"}]},"redirect_canonical":{"desc":"Redirects incoming links to the proper URL based on the site url.","params":[{"param":"$requested_url","desc":" The URL that was requested, used to  figure if redirect is needed.","required":"no"},{"param":"$do_redirect","desc":" Redirect to the new URL.","required":"no"}]},"redirect_guess_404_permalink":{"desc":"Attempts to guess the correct URL based on query vars","params":[]},"redirect_post":{"desc":"Redirect to previous page.","params":[{"param":"$post_id","desc":" Post ID.","required":"no"}]},"redirect_this_site":{"desc":"Ensure that the current site’s domain is listed in the allowed redirect host list.","params":[{"param":"$deprecated","desc":"Not used.","required":"no"}]},"refresh_blog_details":{"desc":"Clear the blog details cache.","params":[{"param":"$blog_id","desc":" Blog ID. Defaults to current blog.","required":"no"}]},"refresh_user_details":{"desc":"Cleans the user cache for a specific user.","params":[{"param":"$id","desc":"The user ID.","required":"yes"}]},"registered_meta_key_exists":{"desc":"Checks if a meta key is registered.","params":[{"param":"$object_type","desc":"The type of object.","required":"yes"},{"param":"$meta_key","desc":"The meta key.","required":"yes"}]},"register_activation_hook":{"desc":"Set the activation hook for a plugin.","params":[{"param":"$file","desc":"The filename of the plugin including the path.","required":"yes"},{"param":"$function","desc":"The function hooked to the activate_PLUGIN action.","required":"yes"}]},"register_admin_color_schemes":{"desc":"Registers the default Admin color schemes","params":[]},"register_column_headers":{"desc":"Register column headers for a particular screen.","params":[{"param":"$screen","desc":"The handle for the screen to add help to. This is usually the hook name returned by the add_*_page() functions.","required":"yes"},{"param":"$columns","desc":"An array of columns with column IDs as the keys and translated column names as the values","required":"yes"}]},"register_deactivation_hook":{"desc":"Set the deactivation hook for a plugin.","params":[{"param":"$file","desc":"The filename of the plugin including the path.","required":"yes"},{"param":"$function","desc":"The function hooked to the deactivate_PLUGIN action.","required":"yes"}]},"register_default_headers":{"desc":"Register a selection of default headers to be displayed by the custom header admin UI.","params":[{"param":"$headers","desc":"Array of headers keyed by a string id. The ids point to arrays containing url, thumbnail_url, and description keys.","required":"yes"}]},"register_importer":{"desc":"Register importer for WordPress.","params":[{"param":"$id","desc":"Importer tag. Used to uniquely identify importer.","required":"yes"},{"param":"$name","desc":"Importer name and title.","required":"yes"},{"param":"$description","desc":"Importer description.","required":"yes"},{"param":"$callback","desc":"Callback to run.","required":"yes"}]},"register_initial_settings":{"desc":"Register default settings available in WordPress.","params":[]},"register_meta":{"desc":"Register meta key","params":[{"param":"$object_type","desc":"Type of object this meta is registered to.","required":"yes"},{"param":"$meta_key","desc":"Meta key to register.","required":"yes"},{"param":"$args","desc":"Data used to describe the meta key when registered. type(string) The type of data associated with this meta key. description(string) A description of the data attached to this meta key. single(bool) Whether the meta key has one value per object, or an array of values per object. sanitize_callback(string) A function or method to call when sanitizing $meta_key data. auth_callback(string) Optional. A function or method to call when performing edit_post_meta, add_post_meta, and delete_post_meta capability checks. show_in_rest(bool) Whether data associated with this meta key can be considered public.  ","required":"yes"},{"param":"$deprecated","desc":"Deprecated. Use $args instead.","required":"no"}]},"register_nav_menu":{"desc":"Register a navigation menu for a theme.","params":[{"param":"$location","desc":"Menu location identifier, like a slug.","required":"yes"},{"param":"$description","desc":"Menu location descriptive text.","required":"yes"}]},"register_nav_menus":{"desc":"Register navigation menus for a theme.","params":[{"param":"$locations","desc":"Associative array of menu location identifiers (like a slug) and descriptive text.","required":"no"}]},"register_new_user":{"desc":"Handles registering a new user.","params":[{"param":"$user_login","desc":"Users username for logging in","required":"yes"},{"param":"$user_email","desc":"Users email address to send password and add","required":"yes"}]},"register_post_status":{"desc":"Register a post status. Do not use before init.","params":[{"param":"$post_status","desc":"Name of the post status.","required":"yes"},{"param":"$args","desc":"Array or string of post status arguments. label(bool|string) A descriptive name for the post status marked for translation. Defaults to value of $post_status. label_count(bool|array) Descriptive text to use for nooped plurals. Default array of $label, twice exclude_from_search(bool) Whether to exclude posts with this post status from search results. Default is value of $internal. _builtin(bool) Whether the status is built-in. Core-use only. Default false. public(bool) Whether posts of this status should be shown in the front end of the site. Default false. internal(bool) Whether the status is for internal use only. Default false. protected(bool) Whether posts with this status should be protected. Default false. private(bool) Whether posts with this status should be private. Default false. publicly_queryable(bool) Whether posts with this status should be publicly- queryable. Default is value of $public. show_in_admin_all_list(bool) Whether to include posts in the edit listing for their post type. Default is value of $internal. show_in_admin_status_list(bool) Show in the list of statuses with post counts at the top of the edit listings, e.g. All (12) | Published (9) | My Custom Status (2) Default is value of $internal.  ","required":"no"}]},"register_post_type":{"desc":"Registers a post type.","params":[{"param":"$post_type","desc":"Post type key. Must not exceed 20 characters and may only contain lowercase alphanumeric characters, dashes, and underscores. See sanitize_key().","required":"yes"},{"param":"$args","desc":"Array or string of arguments for registering a post type. label(string) Name of the post type shown in the menu. Usually plural. Default is value of $labels[name]. labels(array) An array of labels for this post type. If not set, post labels are inherited for non-hierarchical types and page labels for hierarchical ones. See get_post_type_labels() for a full list of supported labels. description(string) A short descriptive summary of what the post type is.  public(bool) Whether a post type is intended for use publicly either via the admin interface or by front-end users. While the default settings of $exclude_from_search, $publicly_queryable, $show_ui, and $show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention. Default false. hierarchical(bool) Whether the post type is hierarchical (e.g. page). Default false. exclude_from_search(bool) Whether to exclude posts with this post type from front end search results. Default is the opposite value of $public. publicly_queryable(bool) Whether queries can be performed on the front end for the post type as part of parse_request(). Endpoints would include: * ?post_type={post_type_key} * ?{post_type_key}={single_post_slug} * ?{post_type_query_var}={single_post_slug} If not set, the default is inherited from $public. show_ui(bool) Whether to generate and allow a UI for managing this post type in the admin. Default is value of $public. show_in_menu(bool) Where to show the post type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. tools.php or edit.php?post_type=page), the post type will be placed as a sub-menu of that. Default is value of $show_ui. show_in_nav_menus(bool) Makes this post type available for selection in navigation menus. Default is value $public. show_in_admin_bar(bool) Makes this post type available via the admin bar. Default is value of $show_in_menu. show_in_rest(bool) Whether to add the post type route in the REST API wp/v2 namespace. rest_base(string) To change the base url of REST API route. Default is $post_type. rest_controller_class(string) REST API Controller class name. Default is WP_REST_Posts_Controller. menu_position(int) The position in the menu order the post type should appear. To work, $show_in_menu must be true. Default null (at the bottom). menu_icon(string) The url to the icon to be used for this menu. Pass a base64-encoded SVG using a data URI, which will be colored to match the color scheme -- this should begin with data:image/svg+xml;base64,. Pass the name of a Dashicons helper class to use a font icon, e.g. dashicons-chart-pie. Pass none to leave div.wp-menu-image empty so an icon can be added via CSS. Defaults to use the posts icon. capability_type(string) The string to use to build the read, edit, and delete capabilities. May be passed as an array to allow for alternative plurals when using this argument as a base to construct the capabilities, e.g. array(story, stories). Default post. capabilities(array) Array of capabilities for this post type. $capability_type is used as a base to construct capabilities by default. See get_post_type_capabilities(). map_meta_cap(bool) Whether to use the internal default meta capability handling. Default false. supports(array) Core feature(s) the post type supports. Serves as an alias for calling add_post_type_support() directly. Core features include title, editor, comments, revisions, trackbacks, author, excerpt, page-attributes, thumbnail, custom-fields, and post-formats. Additionally, the revisions feature dictates whether the post type will store revisions, and the comments feature dictates whether the comments count will show on the edit screen. Defaults is an array containing title and editor. register_meta_box_cb(callable) Provide a callback function that sets up the meta boxes for the edit form. Do remove_meta_box() and add_meta_box() calls in the callback. Default null. taxonomies(array) An array of taxonomy identifiers that will be registered for the post type. Taxonomies can be registered later with register_taxonomy() or register_taxonomy_for_object_type().  has_archive(bool|string) Whether there should be post type archives, or if a string, the archive slug to use. Will generate the proper rewrite rules if $rewrite is enabled. Default false. rewrite(bool|array) Triggers the handling of rewrites for this post type. To prevent rewrite, set to false. Defaults to true, using $post_type as slug. To specify rewrite rules, an array can be passed with any of these keys: slug(string) Customize the permastruct slug. Defaults to $post_type key. with_front(bool) Whether the permastruct should be prepended with WP_Rewrite::$front. Default true. feeds(bool) Whether the feed permastruct should be built for this post type. Default is value of $has_archive. pages(bool) Whether the permastruct should provide for pagination. Default true. ep_mask(const) Endpoint mask to assign. If not specified and permalink_epmask is set, inherits from $permalink_epmask. If not specified and permalink_epmask is not set, defaults to EP_PERMALINK.   query_var(string|bool) Sets the query_var key for this post type. Defaults to $post_type key. If false, a post type cannot be loaded at ?{query_var}={post_slug}. If specified as a string, the query ?{query_var_string}={post_slug} will be valid. can_export(bool) Whether to allow this post type to be exported. Default true. delete_with_user(bool) Whether to delete posts of this type when deleting a user. If true, posts of this type belonging to the user will be moved to trash when then user is deleted. If false, posts of this type belonging to the user will *not* be trashed or deleted. If not set (the default), posts are trashed if post_type_supports(author). Otherwise posts are not trashed or deleted. Default null. _builtin(bool) FOR INTERNAL USE ONLY! True if this post type is a native or built-in post_type. Default false. _edit_link(string) FOR INTERNAL USE ONLY! URL segment to use for edit link of this post type. Default post.php?post=%d.  ","required":"no"}]},"register_rest_field":{"desc":"Registers a new field on an existing WordPress object type.","params":[{"param":"$object_type","desc":"Object(s) the field is being registered to, post|term|comment etc.","required":"yes"},{"param":"$attribute","desc":"The attribute name.","required":"yes"},{"param":"$args","desc":"An array of arguments used to handle the registered field. get_callback(string|array|null) Optional. The callback function used to retrieve the field value. Default is null, the field will not be returned in the response. update_callback(string|array|null) Optional. The callback function used to set and update the field value. Default is null, the value cannot be set or updated. schema(string|array|null) Optional. The callback function used to create the schema for this field. Default is null, no schema entry will be returned.  ","required":"no"}]},"register_rest_route":{"desc":"Registers a REST API route.","params":[{"param":"$namespace","desc":"The first URL segment after core prefix. Should be unique to your package/plugin.","required":"yes"},{"param":"$route","desc":"The base URL for route you are adding.","required":"yes"},{"param":"$args","desc":" Either an array of options for the endpoint, or an array of arrays for multiple methods. ","required":"no"},{"param":"$override","desc":" If the route already exists, should we override it? True overrides, false merges (with newer overriding if duplicate keys exist). ","required":"no"}]},"register_setting":{"desc":"Register a setting and its sanitization callback","params":[{"param":"$option_group","desc":"A settings group name. Should correspond to a whitelisted option key name.  Default whitelisted option key names include general, discussion, and reading, among others.","required":"yes"},{"param":"$option_name","desc":"The name of an option to sanitize and save.","required":"yes"},{"param":"$args","desc":"Data used to describe the setting when registered. type(string) The type of data associated with this setting. description(string) A description of the data attached to this setting. sanitize_callback(callable) A callback function that sanitizes the options value. show_in_rest(bool) Whether data associated with this setting should be included in the REST API. default(mixed) Default value when calling get_option().  ","required":"no"}]},"register_sidebar":{"desc":"Builds the definition for a single sidebar and returns the ID.","params":[{"param":"$args","desc":"Array or string of arguments for the sidebar being registered. name(string) The name or title of the sidebar displayed in the Widgets interface. Default Sidebar $instance. id(string) The unique identifier by which the sidebar will be called. Default sidebar-$instance. description(string) Description of the sidebar, displayed in the Widgets interface. Default empty string. class(string) Extra CSS class to assign to the sidebar in the Widgets interface.  before_widget(string) HTML content to prepend to each widgets HTML output when assigned to this sidebar. Default is an opening list item element. after_widget(string) HTML content to append to each widgets HTML output when assigned to this sidebar. Default is a closing list item element. before_title(string) HTML content to prepend to the sidebar title when displayed. Default is an opening h2 element. after_title(string) HTML content to append to the sidebar title when displayed. Default is a closing h2 element.  ","required":"no"}]},"register_sidebars":{"desc":"Creates multiple sidebars.","params":[{"param":"$number","desc":" Number of sidebars to create. ","required":"no"},{"param":"$args","desc":"Array or string of arguments for building a sidebar. id(string) The base string of the unique identifier for each sidebar. If provided, and multiple sidebars are being defined, the id will have -2 appended, and so on. Default sidebar- followed by the number the sidebar creation is currently at. name(string) The name or title for the sidebars displayed in the admin dashboard. If registering more than one sidebar, include %d in the string as a placeholder for the uniquely assigned number for each sidebar. Default Sidebar for the first sidebar, otherwise Sidebar %d.  ","required":"no"}]},"register_sidebar_widget":{"desc":"Register widget for sidebar with backward compatibility.","params":[{"param":"$name","desc":"Widget ID.","required":"yes"},{"param":"$output_callback","desc":"Run when widget is called.","required":"yes"},{"param":"$classname","desc":" Classname widget option. ","required":"no"},{"param":"$params","desc":",... Widget parameters.","required":"no"}]},"register_taxonomy":{"desc":"Creates or modifies a taxonomy object.","params":[{"param":"$taxonomy","desc":"Taxonomy key, must not exceed 32 characters.","required":"yes"},{"param":"$object_type","desc":"Object type or array of object types with which the taxonomy should be associated.","required":"yes"},{"param":"$args","desc":"Array or query string of arguments for registering a taxonomy. labels(array) An array of labels for this taxonomy. By default, Tag labels are used for non-hierarchical taxonomies, and Category labels are used for hierarchical taxonomies. See accepted values in get_taxonomy_labels().  description(string) A short descriptive summary of what the taxonomy is for.  public(bool) Whether a taxonomy is intended for use publicly either via the admin interface or by front-end users. The default settings of $publicly_queryable, $show_ui, and $show_in_nav_menus are inherited from $public. publicly_queryable(bool) Whether the taxonomy is publicly queryable. If not set, the default is inherited from $public hierarchical(bool) Whether the taxonomy is hierarchical. Default false. show_ui(bool) Whether to generate and allow a UI for managing terms in this taxonomy in the admin. If not set, the default is inherited from $public (default true). show_in_menu(bool) Whether to show the taxonomy in the admin menu. If true, the taxonomy is shown as a submenu of the object type menu. If false, no menu is shown. $show_ui must be true. If not set, default is inherited from $show_ui (default true). show_in_nav_menus(bool) Makes this taxonomy available for selection in navigation menus. If not set, the default is inherited from $public (default true). show_in_rest(bool) Whether to include the taxonomy in the REST API. rest_base(string) To change the base url of REST API route. Default is $taxonomy. rest_controller_class(string) REST API Controller class name. Default is WP_REST_Terms_Controller. show_tagcloud(bool) Whether to list the taxonomy in the Tag Cloud Widget controls. If not set, the default is inherited from $show_ui (default true). show_in_quick_edit(bool) Whether to show the taxonomy in the quick/bulk edit panel. It not set, the default is inherited from $show_ui (default true). show_admin_column(bool) Whether to display a column for the taxonomy on its post type listing screens. Default false. meta_box_cb(bool|callable) Provide a callback function for the meta box display. If not set, post_categories_meta_box() is used for hierarchical taxonomies, and post_tags_meta_box() is used for non-hierarchical. If false, no meta box is shown. capabilities(array) Array of capabilities for this taxonomy. manage_terms(string) Default manage_categories. edit_terms(string) Default manage_categories. delete_terms(string) Default manage_categories. assign_terms(string) Default edit_posts.   rewrite(bool|array) Triggers the handling of rewrites for this taxonomy. Default true, using $taxonomy as slug. To prevent rewrite, set to false. To specify rewrite rules, an array can be passed with any of these keys: slug(string) Customize the permastruct slug. Default $taxonomy key. with_front(bool) Should the permastruct be prepended with WP_Rewrite::$front. Default true. hierarchical(bool) Either hierarchical rewrite tag or not. Default false. ep_mask(int) Assign an endpoint mask. Default EP_NONE.   query_var(string) Sets the query var key for this taxonomy. Default $taxonomy key. If false, a taxonomy cannot be loaded at ?{query_var}={term_slug}. If a string, the query ?{query_var}={term_slug} will be valid. update_count_callback(callable) Works much like a hook, in that it will be called when the count is updated. Default _update_post_term_count() for taxonomies attached to post types, which confirms that the objects are published before counting them. Default _update_generic_term_count() for taxonomies attached to other object types, such as users. _builtin(bool) This taxonomy is a built-in taxonomy. INTERNAL USE ONLY! Default false.  ","required":"no"}]},"register_taxonomy_for_object_type":{"desc":"Add an already registered taxonomy to an object type.","params":[{"param":"$taxonomy","desc":"Name of taxonomy object.","required":"yes"},{"param":"$object_type","desc":"Name of the object type.","required":"yes"}]},"register_theme_directory":{"desc":"Register a directory that contains themes.","params":[{"param":"$directory","desc":"Either the full filesystem path to a theme folder or a folder within WP_CONTENT_DIR","required":"yes"}]},"register_uninstall_hook":{"desc":"Set the uninstallation hook for a plugin.","params":[{"param":"$file","desc":"Plugin file.","required":"yes"},{"param":"$callback","desc":"The callback to run when the hook is called. Must be a static method or function.","required":"yes"}]},"register_widget":{"desc":"Register a widget","params":[{"param":"$widget_class","desc":"The name of a class that extends WP_Widget","required":"yes"}]},"register_widget_control":{"desc":"Registers widget control callback for customizing options.","params":[{"param":"$name","desc":"Sidebar ID.","required":"yes"},{"param":"$control_callback","desc":"Widget control callback to display and process form.","required":"yes"},{"param":"$width","desc":"Widget width.","required":"no"},{"param":"$height","desc":"Widget height.","required":"no"}]},"rel_canonical":{"desc":"Outputs rel=canonical for singular queries.","params":[]},"remove_accents":{"desc":"Converts all accent characters to ASCII characters.","params":[{"param":"$string","desc":"Text that might have accent characters","required":"yes"}]},"remove_action":{"desc":"Removes a function from a specified action hook.","params":[{"param":"$tag","desc":"The action hook to which the function to be removed is hooked.","required":"yes"},{"param":"$function_to_remove","desc":"The name of the function which should be removed.","required":"yes"},{"param":"$priority","desc":" The priority of the function. ","required":"no"}]},"remove_all_actions":{"desc":"Remove all of the hooks from an action.","params":[{"param":"$tag","desc":"The action to remove hooks from.","required":"yes"},{"param":"$priority","desc":"The priority number to remove them from. ","required":"no"}]},"remove_all_filters":{"desc":"Remove all of the hooks from a filter.","params":[{"param":"$tag","desc":"The filter to remove hooks from.","required":"yes"},{"param":"$priority","desc":" The priority number to remove. ","required":"no"}]},"remove_all_shortcodes":{"desc":"Clear all shortcodes.","params":[]},"remove_custom_background":{"desc":"Remove custom background support.","params":[]},"remove_custom_image_header":{"desc":"Remove image header support.","params":[]},"remove_editor_styles":{"desc":"Removes all visual editor stylesheets.","params":[]},"remove_filter":{"desc":"Removes a function from a specified filter hook.","params":[{"param":"$tag","desc":"The filter hook to which the function to be removed is hooked.","required":"yes"},{"param":"$function_to_remove","desc":"The name of the function which should be removed.","required":"yes"},{"param":"$priority","desc":" The priority of the function. ","required":"no"}]},"remove_image_size":{"desc":"Remove a new image size.","params":[{"param":"$name","desc":"The image size to remove.","required":"yes"}]},"remove_menu_page":{"desc":"Remove a top-level admin menu.","params":[{"param":"$menu_slug","desc":"The slug of the menu.","required":"yes"}]},"remove_meta_box":{"desc":"Removes a meta box from one or more screens.","params":[{"param":"$id","desc":"Meta box ID (used in the id attribute for the meta box).","required":"yes"},{"param":"$screen","desc":"The screen or screens on which the meta box is shown (such as a post type, link, or comment). Accepts a single screen ID, WP_Screen object, or array of screen IDs.","required":"yes"},{"param":"$context","desc":"The context within the screen where the box is set to display. Contexts vary from screen to screen. Post edit screen contexts include normal, side, and advanced. Comments screen contexts include normal and side. Menus meta boxes (accordion sections) all use the side context.","required":"yes"}]},"remove_option_update_handler":{"desc":"Unregister a setting","params":[{"param":"$option_group","desc":"","required":"yes"},{"param":"$option_name","desc":"","required":"yes"},{"param":"$sanitize_callback","desc":"","required":"no"}]},"remove_option_whitelist":{"desc":"Removes a list of options from the options whitelist.","params":[{"param":"$del_options","desc":"","required":"yes"},{"param":"$options","desc":"","required":"no"}]},"remove_permastruct":{"desc":"Removes a permalink structure.","params":[{"param":"$name","desc":"Name for permalink structure.","required":"yes"}]},"remove_post_type_support":{"desc":"Remove support for a feature from a post type.","params":[{"param":"$post_type","desc":"The post type for which to remove the feature.","required":"yes"},{"param":"$feature","desc":"The feature being removed.","required":"yes"}]},"remove_query_arg":{"desc":"Removes an item or items from a query string.","params":[{"param":"$key","desc":"Query key or keys to remove.","required":"yes"},{"param":"$query","desc":" When false uses the current URL. ","required":"no"}]},"remove_rewrite_tag":{"desc":"Removes an existing rewrite tag (like %postname%).","params":[{"param":"$tag","desc":"Name of the rewrite tag.","required":"yes"}]},"remove_role":{"desc":"Remove role, if it exists.","params":[{"param":"$role","desc":"Role name.","required":"yes"}]},"remove_shortcode":{"desc":"Removes hook for shortcode.","params":[{"param":"$tag","desc":"Shortcode tag to remove hook for.","required":"yes"}]},"remove_submenu_page":{"desc":"Remove an admin submenu.","params":[{"param":"$menu_slug","desc":"The slug for the parent menu.","required":"yes"},{"param":"$submenu_slug","desc":"The slug of the submenu.","required":"yes"}]},"remove_theme_mod":{"desc":"Remove theme modification name from current theme list.","params":[{"param":"$name","desc":"Theme modification name.","required":"yes"}]},"remove_theme_mods":{"desc":"Remove theme modifications option for current theme.","params":[]},"remove_theme_support":{"desc":"Allows a theme to de-register its support of a certain feature","params":[{"param":"$feature","desc":"the feature being added","required":"yes"}]},"remove_user_from_blog":{"desc":"Remove a user from a blog.","params":[{"param":"$user_id","desc":"ID of the user youre removing.","required":"yes"},{"param":"$blog_id","desc":"ID of the blog youre removing the user from.","required":"no"},{"param":"$reassign","desc":" A user to whom to reassign posts.","required":"no"}]},"request_filesystem_credentials":{"desc":"Displays a form to the user to request for their FTP/SSH details in order to connect to the filesystem.","params":[{"param":"$form_post","desc":"The URL to post the form to.","required":"yes"},{"param":"$type","desc":" Chosen type of filesystem. ","required":"no"},{"param":"$error","desc":" Whether the current request has failed to connect. ","required":"no"},{"param":"$context","desc":" Full path to the directory that is tested for being writable. ","required":"no"},{"param":"$extra_fields","desc":" Extra POST fields to be checked for inclusion in the post. ","required":"no"},{"param":"$allow_relaxed_file_ownership","desc":" Whether to allow Group/World writable. ","required":"no"}]},"require_if_theme_supports":{"desc":"Checks a theme’s support for a given feature before loading the functions which implement it.","params":[{"param":"$feature","desc":"The feature being checked.","required":"yes"},{"param":"$include","desc":"Path to the file.","required":"yes"}]},"require_wp_db":{"desc":"Load the database class file and instantiate the `$wpdb` global.","params":[]},"reset_mbstring_encoding":{"desc":"Reset the mbstring internal encoding to a users previously set encoding.","params":[]},"reset_password":{"desc":"Handles resetting the user’s password.","params":[{"param":"$user","desc":"The user","required":"yes"},{"param":"$new_pass","desc":"New password for the user in plaintext","required":"yes"}]},"restore_current_blog":{"desc":"Restore the current blog, after calling switch_to_blog()","params":[]},"restore_current_locale":{"desc":"Restores the translations according to the original locale.","params":[]},"restore_previous_locale":{"desc":"Restores the translations according to the previous locale.","params":[]},"rest_api_default_filters":{"desc":"Registers the default REST API filters.","params":[]},"rest_api_init":{"desc":"Registers rewrite rules for the API.","params":[]},"rest_api_loaded":{"desc":"Loads the REST API.","params":[]},"rest_api_register_rewrites":{"desc":"Adds REST rewrite rules.","params":[]},"rest_authorization_required_code":{"desc":"Returns a contextual HTTP error code for authorization failure.","params":[]},"rest_cookie_check_errors":{"desc":"Checks for errors when using cookie-based authentication.","params":[{"param":"$result","desc":"Error from another authentication handler, null if we should handle it, or another value if not.","required":"yes"}]},"rest_cookie_collect_status":{"desc":"Collects cookie authentication status.","params":[]},"rest_do_request":{"desc":"Do a REST request.","params":[{"param":"$request","desc":"Request.","required":"yes"}]},"rest_ensure_request":{"desc":"Ensures request arguments are a request object (for consistency).","params":[{"param":"$request","desc":"Request to check.","required":"yes"}]},"rest_ensure_response":{"desc":"Ensures a REST response is a response object (for consistency).","params":[{"param":"$response","desc":"Response to check.","required":"yes"}]},"rest_get_avatar_sizes":{"desc":"Retrieves the pixel sizes for avatars.","params":[]},"rest_get_avatar_urls":{"desc":"Retrieves the avatar urls in various sizes based on a given email address.","params":[{"param":"$email","desc":"Email address.","required":"yes"}]},"rest_get_date_with_gmt":{"desc":"Retrieves a local date with its GMT equivalent, in MySQL datetime format.","params":[{"param":"$date","desc":"RFC3339 timestamp.","required":"yes"},{"param":"$force_utc","desc":"Whether a UTC timestamp should be forced. ","required":"no"}]},"rest_get_server":{"desc":"Retrieves the current REST server instance.","params":[]},"rest_get_url_prefix":{"desc":"Retrieves the URL prefix for any API resource.","params":[]},"rest_handle_deprecated_argument":{"desc":"Handles _deprecated_argument() errors.","params":[{"param":"$function","desc":"The function that was called.","required":"yes"},{"param":"$message","desc":"A message regarding the change.","required":"yes"},{"param":"$version","desc":"Version.","required":"yes"}]},"rest_handle_deprecated_function":{"desc":"Handles _deprecated_function() errors.","params":[{"param":"$function","desc":"The function that was called.","required":"yes"},{"param":"$replacement","desc":"The function that should have been called.","required":"yes"},{"param":"$version","desc":"Version.","required":"yes"}]},"rest_handle_options_request":{"desc":"Handles OPTIONS requests for the server.","params":[{"param":"$response","desc":"Current response, either response or null to indicate pass-through.","required":"yes"},{"param":"$handler","desc":"ResponseHandler instance (usually WP_REST_Server).","required":"yes"},{"param":"$request","desc":"The request that was used to make current response.","required":"yes"}]},"rest_is_boolean":{"desc":"Determines if a given value is boolean-like.","params":[{"param":"$maybe_bool","desc":"The value being evaluated.","required":"yes"}]},"rest_is_ip_address":{"desc":"Determines if an IP address is valid.","params":[{"param":"$ip","desc":"IP address.","required":"yes"}]},"rest_output_link_header":{"desc":"Sends a Link header for the REST API.","params":[]},"rest_output_link_wp_head":{"desc":"Outputs the REST API link tag into page header.","params":[]},"rest_output_rsd":{"desc":"Adds the REST API URL to the WP RSD endpoint.","params":[]},"rest_parse_date":{"desc":"Parses an RFC3339 time into a Unix timestamp.","params":[{"param":"$date","desc":"RFC3339 timestamp.","required":"yes"},{"param":"$force_utc","desc":" Whether to force UTC timezone instead of using the timestamps timezone. ","required":"no"}]},"rest_parse_request_arg":{"desc":"Parse a request argument based on details registered to the route.","params":[{"param":"$value","desc":"","required":"yes"},{"param":"$request","desc":"","required":"yes"},{"param":"$param","desc":"","required":"yes"}]},"rest_sanitize_boolean":{"desc":"Changes a boolean-like value into the proper boolean value.","params":[{"param":"$value","desc":"The value being evaluated.","required":"yes"}]},"rest_sanitize_request_arg":{"desc":"Sanitize a request argument based on details registered to the route.","params":[{"param":"$value","desc":"","required":"yes"},{"param":"$request","desc":"","required":"yes"},{"param":"$param","desc":"","required":"yes"}]},"rest_sanitize_value_from_schema":{"desc":"Sanitize a value based on a schema.","params":[{"param":"$value","desc":"The value to sanitize.","required":"yes"},{"param":"$args","desc":"Schema array to use for sanitization.","required":"yes"}]},"rest_send_allow_header":{"desc":"Sends the “Allow” header to state all methods that can be sent to the current route.","params":[{"param":"$response","desc":"Current response being served.","required":"yes"},{"param":"$server","desc":"ResponseHandler instance (usually WP_REST_Server).","required":"yes"},{"param":"$request","desc":"The request that was used to make current response.","required":"yes"}]},"rest_send_cors_headers":{"desc":"Sends Cross-Origin Resource Sharing headers with API requests.","params":[{"param":"$value","desc":"Response data.","required":"yes"}]},"rest_url":{"desc":"Retrieves the URL to a REST endpoint.","params":[{"param":"$path","desc":" REST route. ","required":"no"},{"param":"$scheme","desc":" Sanitization scheme. ","required":"no"}]},"rest_validate_request_arg":{"desc":"Validate a request argument based on details registered to the route.","params":[{"param":"$value","desc":"","required":"yes"},{"param":"$request","desc":"","required":"yes"},{"param":"$param","desc":"","required":"yes"}]},"rest_validate_value_from_schema":{"desc":"Validate a value based on a schema.","params":[{"param":"$value","desc":"The value to validate.","required":"yes"},{"param":"$args","desc":"Schema array to use for validation.","required":"yes"},{"param":"$param","desc":"The parameter name, used in error messages.","required":"no"}]},"retrieve_password":{"desc":"Handles sending password retrieval email to user.","params":[]},"retrieve_widgets":{"desc":"Look for “lost” widgets, this has to run at least on each theme change.","params":[{"param":"$theme_changed","desc":"Whether the theme was changed as a boolean. A value of customize defers updates for the Customizer.","required":"no"}]},"revoke_super_admin":{"desc":"Revokes Super Admin privileges.","params":[{"param":"$user_id","desc":"ID of the user Super Admin privileges to be revoked from.","required":"yes"}]},"rewind_posts":{"desc":"Rewind the loop posts.","params":[]},"rich_edit_exists":{"desc":"Determine if TinyMCE is available.","params":[]},"rsd_link":{"desc":"Display the link to the Really Simple Discovery service endpoint.","params":[]},"rss2_site_icon":{"desc":"Displays Site Icon in RSS2.","params":[]},"rss_enclosure":{"desc":"Display the rss enclosure for the current post.","params":[]},"safecss_filter_attr":{"desc":"Inline CSS filter","params":[{"param":"$css","desc":"A string of CSS rules.","required":"yes"},{"param":"$deprecated","desc":"Not used.","required":"no"}]},"sanitize_bookmark":{"desc":"Sanitizes all bookmark fields","params":[{"param":"$bookmark","desc":"Bookmark row","required":"yes"},{"param":"$context","desc":" How to filter the  fields","required":"no"}]},"sanitize_bookmark_field":{"desc":"Sanitizes a bookmark field.","params":[{"param":"$field","desc":"The bookmark field.","required":"yes"},{"param":"$value","desc":"The bookmark field value.","required":"yes"},{"param":"$bookmark_id","desc":"Bookmark ID.","required":"yes"},{"param":"$context","desc":"How to filter the field value. Accepts raw, edit, attribute, js, db, or display","required":"yes"}]},"sanitize_category":{"desc":"Sanitizes category data based on context.","params":[{"param":"$category","desc":"Category data","required":"yes"},{"param":"$context","desc":" Default is display.","required":"no"}]},"sanitize_category_field":{"desc":"Sanitizes data in single category key field.","params":[{"param":"$field","desc":"Category key to sanitize","required":"yes"},{"param":"$value","desc":"Category value to sanitize","required":"yes"},{"param":"$cat_id","desc":"Category ID","required":"yes"},{"param":"$context","desc":"What filter to use, raw, display, etc.","required":"yes"}]},"sanitize_comment_cookies":{"desc":"Sanitizes the cookies sent to the user already.","params":[]},"sanitize_email":{"desc":"Strips out all characters that are not allowable in an email.","params":[{"param":"$email","desc":"Email address to filter.","required":"yes"}]},"sanitize_file_name":{"desc":"Sanitizes a filename, replacing whitespace with dashes.","params":[{"param":"$filename","desc":"The filename to be sanitized","required":"yes"}]},"sanitize_hex_color":{"desc":"Sanitizes a hex color.","params":[{"param":"$color","desc":"","required":"yes"}]},"sanitize_hex_color_no_hash":{"desc":"Sanitizes a hex color without a hash. Use sanitize_hex_color() when possible.","params":[{"param":"$color","desc":"","required":"yes"}]},"sanitize_html_class":{"desc":"Sanitizes an HTML classname to ensure it only contains valid characters.","params":[{"param":"$class","desc":"The classname to be sanitized","required":"yes"},{"param":"$fallback","desc":" The value to return if the sanitization ends up as an empty string.  Defaults to an empty string.","required":"no"}]},"sanitize_key":{"desc":"Sanitizes a string key.","params":[{"param":"$key","desc":"String key","required":"yes"}]},"sanitize_meta":{"desc":"Sanitize meta value.","params":[{"param":"$meta_key","desc":"Meta key.","required":"yes"},{"param":"$meta_value","desc":"Meta value to sanitize.","required":"yes"},{"param":"$object_type","desc":"Type of object the meta is registered to.","required":"yes"}]},"sanitize_mime_type":{"desc":"Sanitize a mime type","params":[{"param":"$mime_type","desc":"Mime type","required":"yes"}]},"sanitize_option":{"desc":"Sanitises various option values based on the nature of the option.","params":[{"param":"$option","desc":"The name of the option.","required":"yes"},{"param":"$value","desc":"The unsanitised value.","required":"yes"}]},"sanitize_post":{"desc":"Sanitize every post field.","params":[{"param":"$post","desc":"The Post Object or Array","required":"yes"},{"param":"$context","desc":" How to sanitize post fields. Accepts raw, edit, db, or display. ","required":"no"}]},"sanitize_post_field":{"desc":"Sanitize post field based on context.","params":[{"param":"$field","desc":"The Post Object field name.","required":"yes"},{"param":"$value","desc":"The Post Object value.","required":"yes"},{"param":"$post_id","desc":"Post ID.","required":"yes"},{"param":"$context","desc":" How to sanitize post fields. Looks for raw, edit, db, display, attribute and js. ","required":"no"}]},"sanitize_sql_orderby":{"desc":"Ensures a string is a valid SQL ‘order by’ clause.","params":[{"param":"$orderby","desc":"Order by clause to be validated.","required":"yes"}]},"sanitize_term":{"desc":"Sanitize Term all fields.","params":[{"param":"$term","desc":"The term to check.","required":"yes"},{"param":"$taxonomy","desc":"The taxonomy name to use.","required":"yes"},{"param":"$context","desc":" Context in which to sanitize the term. Accepts edit, db, display, attribute, or js. ","required":"no"}]},"sanitize_term_field":{"desc":"Cleanse the field value in the term based on the context.","params":[{"param":"$field","desc":"Term field to sanitize.","required":"yes"},{"param":"$value","desc":"Search for this term value.","required":"yes"},{"param":"$term_id","desc":"Term ID.","required":"yes"},{"param":"$taxonomy","desc":"Taxonomy Name.","required":"yes"},{"param":"$context","desc":"Context in which to sanitize the term field. Accepts edit, db, display, attribute, or js.","required":"yes"}]},"sanitize_textarea_field":{"desc":"Sanitizes a multiline string from user input or from the database.","params":[{"param":"$str","desc":"String to sanitize.","required":"yes"}]},"sanitize_text_field":{"desc":"Sanitizes a string from user input or from the database.","params":[{"param":"$str","desc":"String to sanitize.","required":"yes"}]},"sanitize_title":{"desc":"Sanitizes a title, or returns a fallback title.","params":[{"param":"$title","desc":"The string to be sanitized.","required":"yes"},{"param":"$fallback_title","desc":" A title to use if $title is empty.","required":"no"},{"param":"$context","desc":" The operation for which the string is sanitized","required":"no"}]},"sanitize_title_for_query":{"desc":"Sanitizes a title with the ‘query’ context.","params":[{"param":"$title","desc":"The string to be sanitized.","required":"yes"}]},"sanitize_title_with_dashes":{"desc":"Sanitizes a title, replacing whitespace and a few other characters with dashes.","params":[{"param":"$title","desc":"The title to be sanitized.","required":"yes"},{"param":"$raw_title","desc":" Not used.","required":"no"},{"param":"$context","desc":" The operation for which the string is sanitized.","required":"no"}]},"sanitize_trackback_urls":{"desc":"Sanitize space or carriage return separated URLs that are used to send trackbacks.","params":[{"param":"$to_ping","desc":"Space or carriage return separated URLs","required":"yes"}]},"sanitize_url":{"desc":"Performs esc_url() for database or redirect usage.","params":[{"param":"$url","desc":"The URL to be cleaned.","required":"yes"},{"param":"$protocols","desc":"An array of acceptable protocols.","required":"no"}]},"sanitize_user":{"desc":"Sanitizes a username, stripping out unsafe characters.","params":[{"param":"$username","desc":"The username to be sanitized.","required":"yes"},{"param":"$strict","desc":"If set limits $username to specific characters. ","required":"no"}]},"sanitize_user_field":{"desc":"Sanitize user field based on context.","params":[{"param":"$field","desc":"The user Object field name.","required":"yes"},{"param":"$value","desc":"The user Object value.","required":"yes"},{"param":"$user_id","desc":"User ID.","required":"yes"},{"param":"$context","desc":"How to sanitize user fields. Looks for raw, edit, db, display, attribute and js.","required":"yes"}]},"sanitize_user_object":{"desc":"Sanitize every user field.","params":[{"param":"$user","desc":"The User Object or Array","required":"yes"},{"param":"$context","desc":" How to sanitize user fields.","required":"no"}]},"saveDomDocument":{"desc":"Saves the XML document into a file","params":[{"param":"$doc","desc":"","required":"yes"},{"param":"$filename","desc":"","required":"yes"}]},"save_mod_rewrite_rules":{"desc":"Updates the htaccess file with the current rules if it is writable.","params":[]},"screen_icon":{"desc":"Displays a screen icon.","params":[]},"screen_layout":{"desc":"Returns the screen layout options.","params":[]},"screen_meta":{"desc":"Renders the screen’s help.","params":[]},"screen_options":{"desc":"Returns the screen’s per-page options.","params":[]},"script_concat_settings":{"desc":"Determine the concatenation and compression settings for scripts and styles.","params":[]},"search_theme_directories":{"desc":"Search all registered theme directories for complete and valid themes.","params":[{"param":"$force","desc":" Whether to force a new directory scan. Defaults to false.","required":"no"}]},"seems_utf8":{"desc":"Checks to see if a string is utf8 encoded.","params":[{"param":"$str","desc":"The string to be checked","required":"yes"}]},"selected":{"desc":"Outputs the html selected attribute.","params":[{"param":"$selected","desc":"One of the values to compare","required":"yes"},{"param":"$current","desc":"(true) The other value to compare if not just true","required":"no"},{"param":"$echo","desc":"Whether to echo or just return the string","required":"no"}]},"self_admin_url":{"desc":"Retrieve the url to the admin area for either the current blog or the network depending on context.","params":[{"param":"$path","desc":" Path relative to the admin URL. ","required":"no"},{"param":"$scheme","desc":" The scheme to use. Default is admin, which obeys force_ssl_admin() and is_ssl(). http or https can be passed to force those schemes.","required":"no"}]},"self_link":{"desc":"Display the link for the currently displayed feed in a XSS safe way.","params":[]},"send_confirmation_on_profile_email":{"desc":"Sends an email when an email address change is requested.","params":[]},"send_frame_options_header":{"desc":"Send a HTTP header to limit rendering of pages to same origin iframes.","params":[]},"send_nosniff_header":{"desc":"Send a HTTP header to disable content type sniffing in browsers which support it.","params":[]},"send_origin_headers":{"desc":"Send Access-Control-Allow-Origin and related headers if the current request is from an allowed origin.","params":[]},"separate_comments":{"desc":"Separates an array of comments into an array keyed by comment_type.","params":[{"param":"$comments","desc":"Array of comments","required":"yes"}]},"settings_errors":{"desc":"Display settings errors registered by {@see add_settings_error()}.","params":[{"param":"$setting","desc":"slug title of a specific setting whos errors you want.","required":"no"},{"param":"$sanitize","desc":"Whether to re-sanitize the setting value before returning errors.","required":"no"},{"param":"$hide_on_update","desc":"If set to true errors will not be shown if the settings page has already been submitted.","required":"no"}]},"settings_fields":{"desc":"Output nonce, action, and option_page fields for a settings page.","params":[{"param":"$option_group","desc":"A settings group name. This should match the group name used in register_setting().","required":"yes"}]},"setup_postdata":{"desc":"Set up global post data.","params":[{"param":"$post","desc":"WP_Post instance or Post ID/object.","required":"yes"}]},"setup_userdata":{"desc":"Set up global user vars.","params":[{"param":"$for_user_id","desc":" User ID to set up global data.","required":"no"}]},"set_current_screen":{"desc":"Set the current screen object","params":[{"param":"$hook_name","desc":" The hook name (also known as the hook suffix) used to determine the screen, or an existing screen object.","required":"no"}]},"set_current_user":{"desc":"Changes the current user by ID or name.","params":[{"param":"$id","desc":"User ID.","required":"yes"},{"param":"$name","desc":" The users username","required":"no"}]},"set_post_format":{"desc":"Assign a format to a post","params":[{"param":"$post","desc":"The post for which to assign a format.","required":"yes"},{"param":"$format","desc":"A format to assign. Use an empty string or array to remove all formats from the post.","required":"yes"}]},"set_post_thumbnail":{"desc":"Set a post thumbnail.","params":[{"param":"$post","desc":"Post ID or post object where thumbnail should be attached.","required":"yes"},{"param":"$thumbnail_id","desc":"Thumbnail to attach.","required":"yes"}]},"set_post_thumbnail_size":{"desc":"Registers an image size for the post thumbnail.","params":[{"param":"$width","desc":"Image width in pixels.","required":"yes"},{"param":"$height","desc":"Image height in pixels.","required":"yes"},{"param":"$crop","desc":" Whether to crop images to specified width and height or resize. An array can specify positioning of the crop area. ","required":"no"}]},"set_post_type":{"desc":"Update the post type for the post ID.","params":[{"param":"$post_id","desc":" Post ID to change post type. Default 0.","required":"no"},{"param":"$post_type","desc":" Post type. Accepts post or page to name a few. ","required":"no"}]},"set_query_var":{"desc":"Set query variable.","params":[{"param":"$var","desc":"Query variable key.","required":"yes"},{"param":"$value","desc":"Query variable value.","required":"yes"}]},"set_screen_options":{"desc":"Saves option for number of rows when listing posts, pages, comments, etc.","params":[]},"set_site_transient":{"desc":"Set/update the value of a site transient.","params":[{"param":"$transient","desc":"Transient name. Expected to not be SQL-escaped. Must be 40 characters or fewer in length.","required":"yes"},{"param":"$value","desc":"Transient value. Expected to not be SQL-escaped.","required":"yes"},{"param":"$expiration","desc":" Time until expiration in seconds. Default 0 (no expiration).","required":"no"}]},"set_theme_mod":{"desc":"Update theme modification value for the current theme.","params":[{"param":"$name","desc":"Theme modification name.","required":"yes"},{"param":"$value","desc":"Theme modification value.","required":"yes"}]},"set_transient":{"desc":"Set/update the value of a transient.","params":[{"param":"$transient","desc":"Transient name. Expected to not be SQL-escaped. Must be 172 characters or fewer in length.","required":"yes"},{"param":"$value","desc":"Transient value. Must be serializable if non-scalar. Expected to not be SQL-escaped.","required":"yes"},{"param":"$expiration","desc":" Time until expiration in seconds. Default 0 (no expiration).","required":"no"}]},"set_url_scheme":{"desc":"Sets the scheme for a URL.","params":[{"param":"$url","desc":"Absolute URL that includes a scheme","required":"yes"},{"param":"$scheme","desc":" Scheme to give $url. Currently http, https, login, login_post, admin, relative, rest, rpc, or null. ","required":"no"}]},"set_user_setting":{"desc":"Add or update user interface setting.","params":[{"param":"$name","desc":"The name of the setting.","required":"yes"},{"param":"$value","desc":"The value for the setting.","required":"yes"}]},"shortcode_atts":{"desc":"Combine user attributes with known attributes and fill in defaults when needed.","params":[{"param":"$pairs","desc":"Entire list of supported attributes and their defaults.","required":"yes"},{"param":"$atts","desc":"User defined attributes in shortcode tag.","required":"yes"},{"param":"$shortcode","desc":" The name of the shortcode, provided for context to enable filtering","required":"no"}]},"shortcode_exists":{"desc":"Whether a registered shortcode exists named $tag","params":[{"param":"$tag","desc":"Shortcode tag to check.","required":"yes"}]},"shortcode_parse_atts":{"desc":"Retrieve all attributes from the shortcodes tag.","params":[{"param":"$text","desc":"","required":"yes"}]},"shortcode_unautop":{"desc":"Don’t auto-p wrap shortcodes that stand alone","params":[{"param":"$pee","desc":"The content.","required":"yes"}]},"show_admin_bar":{"desc":"Sets the display status of the admin bar.","params":[{"param":"$show","desc":"Whether to allow the admin bar to show.","required":"yes"}]},"show_blog_form":{"desc":"Generates and displays the Signup and Create Site forms","params":[{"param":"$blogname","desc":"The new site name.","required":"no"},{"param":"$blog_title","desc":"The new site title.","required":"no"},{"param":"$errors","desc":"A WP_Error object containing existing errors. Defaults to empty string.","required":"no"}]},"show_message":{"desc":"Displays the given administration message.","params":[{"param":"$message","desc":"","required":"yes"}]},"show_user_form":{"desc":"Display user registration form","params":[{"param":"$user_name","desc":"The entered username.","required":"no"},{"param":"$user_email","desc":"The entered email address.","required":"no"},{"param":"$errors","desc":"A WP_Error object containing existing errors. Defaults to empty string.","required":"no"}]},"shutdown_action_hook":{"desc":"Runs just before PHP shuts down execution.","params":[]},"signup_another_blog":{"desc":"Allow returning users to sign up for another site","params":[{"param":"$blogname","desc":"The new site name","required":"no"},{"param":"$blog_title","desc":"The new site title.","required":"no"},{"param":"$errors","desc":"A WP_Error object containing existing errors. Defaults to empty string.","required":"no"}]},"signup_blog":{"desc":"Setup the new site signup","params":[{"param":"$user_name","desc":"The username.","required":"no"},{"param":"$user_email","desc":"The users email address.","required":"no"},{"param":"$blogname","desc":"The site name.","required":"no"},{"param":"$blog_title","desc":"The site title.","required":"no"},{"param":"$errors","desc":"A WP_Error object containing existing errors. Defaults to empty string.","required":"no"}]},"signup_get_available_languages":{"desc":"Retrieves languages available during the site/user signup process.","params":[]},"signup_nonce_check":{"desc":"Process the signup nonce created in signup_nonce_fields().","params":[{"param":"$result","desc":"","required":"yes"}]},"signup_nonce_fields":{"desc":"Add a nonce field to the signup page.","params":[]},"signup_user":{"desc":"Setup the new user signup process","params":[{"param":"$user_name","desc":"The username.","required":"no"},{"param":"$user_email","desc":"The users email.","required":"no"},{"param":"$errors","desc":"A WP_Error object containing existing errors. Defaults to empty string.","required":"no"}]},"single_cat_title":{"desc":"Display or retrieve page title for category archive.","params":[{"param":"$prefix","desc":" What to display before the title.","required":"no"},{"param":"$display","desc":" Whether to display or retrieve title.","required":"no"}]},"single_month_title":{"desc":"Display or retrieve page title for post archive based on date.","params":[{"param":"$prefix","desc":" What to display before the title.","required":"no"},{"param":"$display","desc":" Whether to display or retrieve title.","required":"no"}]},"single_post_title":{"desc":"Display or retrieve page title for post.","params":[{"param":"$prefix","desc":" What to display before the title.","required":"no"},{"param":"$display","desc":" Whether to display or retrieve title.","required":"no"}]},"single_tag_title":{"desc":"Display or retrieve page title for tag post archive.","params":[{"param":"$prefix","desc":" What to display before the title.","required":"no"},{"param":"$display","desc":" Whether to display or retrieve title.","required":"no"}]},"single_term_title":{"desc":"Display or retrieve page title for taxonomy term archive.","params":[{"param":"$prefix","desc":" What to display before the title.","required":"no"},{"param":"$display","desc":" Whether to display or retrieve title.","required":"no"}]},"site_admin_notice":{"desc":"Displays an admin notice to upgrade all sites after a core upgrade.","params":[]},"site_icon_url":{"desc":"Displays the Site Icon URL.","params":[{"param":"$size","desc":" Size of the site icon. Default 512 (pixels).","required":"no"},{"param":"$url","desc":" Fallback url if no site icon is found. ","required":"no"},{"param":"$blog_id","desc":" ID of the blog to get the site icon for. Default current blog.","required":"no"}]},"site_url":{"desc":"Retrieve the site url for the current site.","params":[{"param":"$path","desc":" Path relative to the site URL. ","required":"no"},{"param":"$scheme","desc":" Scheme to give the site URL context. See set_url_scheme().","required":"no"}]},"size_format":{"desc":"Convert number of bytes largest unit bytes will fit into.","params":[{"param":"$bytes","desc":"Number of bytes. Note max integer size for integers.","required":"yes"},{"param":"$decimals","desc":" Precision of number of decimal places. Default 0.","required":"no"}]},"smilies_init":{"desc":"Convert smiley code to the icon graphic file equivalent.","params":[]},"sort_menu":{"desc":"","params":[{"param":"$a","desc":"","required":"yes"},{"param":"$b","desc":"","required":"yes"}]},"spawn_cron":{"desc":"Sends a request to run cron through HTTP request that doesn’t halt page loading.","params":[{"param":"$gmt_time","desc":" Unix timestamp (UTC). Default 0 (current time is used).","required":"no"}]},"spl_autoload_functions":{"desc":"Retrieves the registered autoloader functions.","params":[]},"spl_autoload_register":{"desc":"Registers a function to be autoloaded.","params":[{"param":"$autoload_function","desc":"The function to register.","required":"yes"},{"param":"$throw","desc":" Whether the function should throw an exception if the function isnt callable. ","required":"no"},{"param":"$prepend","desc":"Whether the function should be prepended to the stack. ","required":"no"}]},"spl_autoload_unregister":{"desc":"Unregisters an autoloader function.","params":[{"param":"$function","desc":"The function to unregister.","required":"yes"}]},"startElement":{"desc":"XML callback function for the start of a new XML tag.","params":[{"param":"$parser","desc":"XML Parser resource.","required":"yes"},{"param":"$tagName","desc":"XML element name.","required":"yes"},{"param":"$attrs","desc":"XML element attributes.","required":"yes"}]},"start_post_rel_link":{"desc":"Display relational link for the first post.","params":[{"param":"$title","desc":" Link title format.","required":"no"},{"param":"$in_same_cat","desc":" Whether link should be in a same category.","required":"no"},{"param":"$excluded_categories","desc":" Excluded categories IDs.","required":"no"}]},"start_wp":{"desc":"Sets up the WordPress Loop.","params":[]},"status_header":{"desc":"Set HTTP status header.","params":[{"param":"$code","desc":"HTTP status code.","required":"yes"},{"param":"$description","desc":" A custom description for the HTTP status.","required":"no"}]},"sticky_class":{"desc":"Display “sticky” CSS class, if a post is sticky.","params":[{"param":"$post_id","desc":"An optional post ID.","required":"no"}]},"stick_post":{"desc":"Make a post sticky.","params":[{"param":"$post_id","desc":"Post ID.","required":"yes"}]},"stream_preview_image":{"desc":"Streams image in post to browser, along with enqueued changes in $_REQUEST[‘history’]","params":[{"param":"$post_id","desc":"","required":"yes"}]},"stripslashes_deep":{"desc":"Navigates through an array, object, or scalar, and removes slashes from the values.","params":[{"param":"$value","desc":"The value to be stripped.","required":"yes"}]},"stripslashes_from_strings_only":{"desc":"Callback function for `stripslashes_deep()` which strips slashes from strings.","params":[{"param":"$value","desc":"The array or string to be stripped.","required":"yes"}]},"strip_fragment_from_url":{"desc":"Strips the #fragment from a URL, if one is present.","params":[{"param":"$url","desc":"The URL to strip.","required":"yes"}]},"strip_shortcodes":{"desc":"Remove all shortcode tags from the given content.","params":[{"param":"$content","desc":"Content to remove shortcode tags.","required":"yes"}]},"strip_shortcode_tag":{"desc":"","params":[{"param":"$m","desc":"RegEx matches against post content.","required":"yes"}]},"submit_button":{"desc":"Echoes a submit button, with provided text and appropriate class(es).","params":[{"param":"$text","desc":"The text of the button (defaults to Save Changes)","required":"no"},{"param":"$type","desc":" The type and CSS class(es) of the button. Core values include primary, secondary, delete. Default primary","required":"no"},{"param":"$name","desc":"The HTML name of the submit button. Defaults to submit. If no id attribute is given in $other_attributes below, $name will be used as the buttons id.","required":"no"},{"param":"$wrap","desc":"True if the output button should be wrapped in a paragraph tag, false otherwise. Defaults to true","required":"no"},{"param":"$other_attributes","desc":"Other attributes that should be output with the button, mapping attributes to their values, such as setting tabindex to 1, etc. These key/value attribute pairs will be output as attribute=value, where attribute is the key. Other attributes can also be provided as a string such as tabindex=1, though the array format is preferred. ","required":"no"}]},"switch_theme":{"desc":"Switches the theme.","params":[{"param":"$stylesheet","desc":"Stylesheet name","required":"yes"}]},"switch_to_blog":{"desc":"Switch the current blog.","params":[{"param":"$new_blog","desc":"The id of the blog you want to switch to. Default: current blog","required":"yes"},{"param":"$deprecated","desc":"Deprecated argument","required":"no"}]},"switch_to_locale":{"desc":"Switches the translations according to the given locale.","params":[{"param":"$locale","desc":"The locale.","required":"yes"}]},"sync_category_tag_slugs":{"desc":"Synchronize category and post tag slugs when global terms are enabled.","params":[{"param":"$term","desc":"The term.","required":"yes"},{"param":"$taxonomy","desc":"The taxonomy for $term. Should be category or post_tag, as these are the only taxonomies which are processed by this function; anything else will be returned untouched.","required":"yes"}]},"tag_description":{"desc":"Retrieve tag description.","params":[{"param":"$tag","desc":" Tag ID. Will use global tag ID by default.","required":"no"}]},"tag_escape":{"desc":"Escape an HTML tag name.","params":[{"param":"$tag_name","desc":"","required":"yes"}]},"tag_exists":{"desc":"Check whether a post tag with a given name exists.","params":[{"param":"$tag_name","desc":"","required":"yes"}]},"taxonomy_exists":{"desc":"Checks that the taxonomy name exists.","params":[{"param":"$taxonomy","desc":"Name of taxonomy object.","required":"yes"}]},"term_description":{"desc":"Retrieve term description.","params":[{"param":"$term","desc":" Term ID. Will use global term ID by default.","required":"no"},{"param":"$taxonomy","desc":"taxonomy name. Defaults to post_tag.","required":"no"}]},"term_exists":{"desc":"Check if Term exists.","params":[{"param":"$term","desc":"The term to check. Accepts term ID, slug, or name.","required":"yes"},{"param":"$taxonomy","desc":"The taxonomy name to use","required":"no"},{"param":"$parent","desc":" ID of parent term under which to confine the exists search.","required":"no"}]},"term_is_ancestor_of":{"desc":"Check if a term is an ancestor of another term.","params":[{"param":"$term1","desc":"ID or object to check if this is the parent term.","required":"yes"},{"param":"$term2","desc":"The child term.","required":"yes"},{"param":"$taxonomy","desc":"Taxonomy name that $term1 and $term2 belong to.","required":"yes"}]},"themes_api":{"desc":"Retrieves theme installer pages from the WordPress.org Themes API.","params":[{"param":"$action","desc":"API action to perform: query_themes, theme_information, hot_tags or feature_list.","required":"yes"},{"param":"$args","desc":"Array or object of arguments to serialize for the Themes API. slug(string) The theme slug.  per_page(int) Number of themes per page. Default 24. page(int) Number of current page. Default 1. number(int) Number of tags to be queried. search(string) A search term.  tag(string) Tag to filter themes.  author(string) Username of an author to filter themes.  user(string) Username to query for their favorites.  browse(string) Browse view: featured, popular, updated, favorites. locale(string) Locale to provide context-sensitive results. Default is the value of get_locale(). fields(array) Array of fields which should or should not be returned. description(bool) Whether to return the theme full description. Default false. sections(bool) Whether to return the theme readme sections: description, installation, FAQ, screenshots, other notes, and changelog. Default false. rating(bool) Whether to return the rating in percent and total number of ratings. Default false. ratings(bool) Whether to return the number of rating for each star (1-5). Default false. downloaded(bool) Whether to return the download count. Default false. downloadlink(bool) Whether to return the download link for the package. Default false. last_updated(bool) Whether to return the date of the last update. Default false. tags(bool) Whether to return the assigned tags. Default false. homepage(bool) Whether to return the theme homepage link. Default false. screenshots(bool) Whether to return the screenshots. Default false. screenshot_count(int) Number of screenshots to return. Default 1. screenshot_url(bool) Whether to return the URL of the first screenshot. Default false. photon_screenshots(bool) Whether to return the screenshots via Photon. Default false. template(bool) Whether to return the slug of the parent theme. Default false. parent(bool) Whether to return the slug, name and homepage of the parent theme. Default false. versions(bool) Whether to return the list of all available versions. Default false. theme_url(bool) Whether to return themes URL. Default false. extended_author(bool) Whether to return nicename or nicename and display name. Default false.    ","required":"no"}]},"theme_update_available":{"desc":"Check if there is an update for a theme available.","params":[{"param":"$theme","desc":"Theme data object.","required":"yes"}]},"the_archive_description":{"desc":"Display category, tag, or term description.","params":[{"param":"$before","desc":" Content to prepend to the description. ","required":"no"},{"param":"$after","desc":" Content to append to the description. ","required":"no"}]},"the_archive_title":{"desc":"Display the archive title based on the queried object.","params":[{"param":"$before","desc":" Content to prepend to the title. ","required":"no"},{"param":"$after","desc":" Content to append to the title. ","required":"no"}]},"the_attachment_link":{"desc":"Display an attachment page link using an image or icon.","params":[{"param":"$id","desc":" Post ID or post object.","required":"no"},{"param":"$fullsize","desc":" Whether to use full size.","required":"no"},{"param":"$deprecated","desc":"Deprecated. Not used.","required":"no"},{"param":"$permalink","desc":" Whether to include permalink.","required":"no"}]},"the_attachment_links":{"desc":"This was once used to display attachment links. Now it is deprecated and stubbed.","params":[{"param":"$id","desc":"","required":"no"}]},"the_author":{"desc":"Display the name of the author of the current post.","params":[{"param":"$deprecated","desc":"Deprecated.","required":"no"},{"param":"$deprecated_echo","desc":"Deprecated. Use get_the_author(). Echo the string or return it.","required":"no"}]},"the_author_aim":{"desc":"Display the AIM address of the author of the current post.","params":[]},"the_author_description":{"desc":"Display the description of the author of the current post.","params":[]},"the_author_email":{"desc":"Display the email of the author of the current post.","params":[]},"the_author_firstname":{"desc":"Display the first name of the author of the current post.","params":[]},"the_author_icq":{"desc":"Display the ICQ number of the author of the current post.","params":[]},"the_author_ID":{"desc":"Display the ID of the author of the current post.","params":[]},"the_author_lastname":{"desc":"Display the last name of the author of the current post.","params":[]},"the_author_link":{"desc":"Display either author’s link or author’s name.","params":[]},"the_author_login":{"desc":"Display the login name of the author of the current post.","params":[]},"the_author_meta":{"desc":"Outputs the field from the user’s DB object. Defaults to current post’s author.","params":[{"param":"$field","desc":"selects the field of the users record.","required":"no"},{"param":"$user_id","desc":" User ID.","required":"no"}]},"the_author_msn":{"desc":"Display the MSN address of the author of the current post.","params":[]},"the_author_nickname":{"desc":"Display the nickname of the author of the current post.","params":[]},"the_author_posts":{"desc":"Display the number of posts by the author of the current post.","params":[]},"the_author_posts_link":{"desc":"Displays an HTML link to the author page of the current post’s author.","params":[{"param":"$deprecated","desc":"Unused.","required":"no"}]},"the_author_url":{"desc":"Display the URL to the home page of the author of the current post.","params":[]},"the_author_yim":{"desc":"Display the Yahoo! IM name of the author of the current post.","params":[]},"the_category":{"desc":"Display the category list for the post.","params":[{"param":"$separator","desc":" Separator for between the categories.","required":"no"},{"param":"$parents","desc":" How to display the parents.","required":"no"},{"param":"$post_id","desc":" Post ID to retrieve categories.","required":"no"}]},"the_category_head":{"desc":"Prints a category with optional text before and after.","params":[{"param":"$before","desc":" Text to display before the category. ","required":"no"},{"param":"$after","desc":" Text to display after the category. ","required":"no"}]},"the_category_ID":{"desc":"Return or Print Category ID.","params":[{"param":"$echo","desc":" Whether to echo the output. ","required":"no"}]},"the_category_rss":{"desc":"Display the post categories in the feed.","params":[{"param":"$type","desc":" default is the type returned by get_default_feed().","required":"no"}]},"the_comment":{"desc":"Iterate comment index in the comment loop.","params":[]},"the_comments_navigation":{"desc":"Displays navigation to next/previous set of comments, when applicable.","params":[{"param":"$args","desc":"See get_the_comments_navigation() for available arguments. ","required":"no"}]},"the_comments_pagination":{"desc":"Displays a paginated navigation to next/previous set of comments, when applicable.","params":[{"param":"$args","desc":"See get_the_comments_pagination() for available arguments. ","required":"no"}]},"the_content":{"desc":"Display the post content.","params":[{"param":"$more_link_text","desc":" Content for when there is more text.","required":"no"},{"param":"$strip_teaser","desc":" Strip teaser content before the more text. Default is false.","required":"no"}]},"the_content_feed":{"desc":"Display the post content for feeds.","params":[{"param":"$feed_type","desc":"The type of feed. rss2 | atom | rss | rdf","required":"no"}]},"the_content_rss":{"desc":"Display the post content for the feed.","params":[{"param":"$more_link_text","desc":" Text to display when more content is available but not displayed.","required":"no"},{"param":"$stripteaser","desc":" Default is 0.","required":"no"},{"param":"$more_file","desc":"","required":"no"},{"param":"$cut","desc":" Amount of words to keep for the content.","required":"no"},{"param":"$encode_html","desc":" How to encode the content.","required":"no"}]},"the_custom_header_markup":{"desc":"Print the markup for a custom header.","params":[]},"the_custom_logo":{"desc":"Displays a custom logo, linked to home.","params":[{"param":"$blog_id","desc":" ID of the blog in question. Default is the ID of the current blog.","required":"no"}]},"the_date":{"desc":"Display or Retrieve the date the current post was written (once per date)","params":[{"param":"$d","desc":" PHP date format defaults to the date_format option if not specified.","required":"no"},{"param":"$before","desc":" Output before the date.","required":"no"},{"param":"$after","desc":" Output after the date.","required":"no"},{"param":"$echo","desc":" default is display. Whether to echo the date or return it.","required":"no"}]},"the_date_xml":{"desc":"Outputs the date in iso8601 format for xml files.","params":[]},"the_editor":{"desc":"Display editor: TinyMCE, HTML, or both.","params":[{"param":"$content","desc":"Textarea content.","required":"yes"},{"param":"$id","desc":" HTML ID attribute value. ","required":"no"},{"param":"$prev_id","desc":" Unused.","required":"no"},{"param":"$media_buttons","desc":" Whether to display media buttons. ","required":"no"},{"param":"$tab_index","desc":" Unused.","required":"no"},{"param":"$extended","desc":" Unused.","required":"no"}]},"the_embed_site_title":{"desc":"Prints the necessary markup for the site title in an embed template.","params":[]},"the_excerpt":{"desc":"Display the post excerpt.","params":[]},"the_excerpt_embed":{"desc":"Displays the post excerpt for the embed template.","params":[]},"the_excerpt_rss":{"desc":"Display the post excerpt for the feed.","params":[]},"the_feed_link":{"desc":"Displays the permalink for the feed type.","params":[{"param":"$anchor","desc":"The links anchor text.","required":"yes"},{"param":"$feed","desc":" Feed type. ","required":"no"}]},"the_generator":{"desc":"Display the generator XML or Comment for RSS, ATOM, etc.","params":[{"param":"$type","desc":"The type of generator to output - (html|xhtml|atom|rss2|rdf|comment|export).","required":"yes"}]},"the_guid":{"desc":"Display the Post Global Unique Identifier (guid).","params":[{"param":"$post","desc":" Post ID or post object. Default is global $post.","required":"no"}]},"the_header_image_tag":{"desc":"Display the image markup for a custom header image.","params":[{"param":"$attr","desc":" Attributes for the image markup. ","required":"no"}]},"the_header_video_url":{"desc":"Display header video URL.","params":[]},"the_ID":{"desc":"Display the ID of the current item in the WordPress Loop.","params":[]},"the_media_upload_tabs":{"desc":"Outputs the legacy media upload tabs UI.","params":[]},"the_meta":{"desc":"Display list of post custom fields.","params":[]},"the_modified_author":{"desc":"Display the name of the author who last edited the current post, if the author’s ID is available.","params":[]},"the_modified_date":{"desc":"Display the date on which the post was last modified.","params":[{"param":"$d","desc":" PHP date format defaults to the date_format option if not specified.","required":"no"},{"param":"$before","desc":" Output before the date.","required":"no"},{"param":"$after","desc":" Output after the date.","required":"no"},{"param":"$echo","desc":" default is display. Whether to echo the date or return it.","required":"no"}]},"the_modified_time":{"desc":"Display the time at which the post was last modified.","params":[{"param":"$d","desc":"Either G, U, or php date format defaults to the value specified in the time_format option.","required":"no"}]},"the_permalink":{"desc":"Display the permalink for the current post.","params":[{"param":"$post","desc":" Post ID or post object. Default is the global $post.","required":"no"}]},"the_permalink_rss":{"desc":"Display the permalink to the post for use in feeds.","params":[]},"the_post":{"desc":"Iterate the post index in the loop.","params":[]},"the_posts_navigation":{"desc":"Display navigation to next/previous set of posts when applicable.","params":[{"param":"$args","desc":" See get_the_posts_navigation() for available arguments. ","required":"no"}]},"the_posts_pagination":{"desc":"Display a paginated navigation to next/previous set of posts, when applicable.","params":[{"param":"$args","desc":" See get_the_posts_pagination() for available arguments. ","required":"no"}]},"the_post_navigation":{"desc":"Display navigation to next/previous post when applicable.","params":[{"param":"$args","desc":" See get_the_post_navigation() for available arguments. ","required":"no"}]},"the_post_password":{"desc":"Display the post password.","params":[]},"the_post_thumbnail":{"desc":"Display the post thumbnail.","params":[{"param":"$size","desc":" Image size to use. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"},{"param":"$attr","desc":" Query string or array of attributes. ","required":"no"}]},"the_post_thumbnail_caption":{"desc":"Displays the post thumbnail caption.","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"the_post_thumbnail_url":{"desc":"Display the post thumbnail URL.","params":[{"param":"$size","desc":" Image size to use. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"}]},"the_search_query":{"desc":"Display the contents of the search query variable.","params":[]},"the_shortlink":{"desc":"Displays the shortlink for a post.","params":[{"param":"$text","desc":"The link text or HTML to be displayed. Defaults to This is the short link.","required":"no"},{"param":"$title","desc":"The tooltip for the link. Must be sanitized. Defaults to the sanitized post title.","required":"no"},{"param":"$before","desc":"HTML to display before the link. ","required":"no"},{"param":"$after","desc":"HTML to display after the link. ","required":"no"}]},"the_tags":{"desc":"Retrieve the tags for a post.","params":[{"param":"$before","desc":" Before list.","required":"no"},{"param":"$sep","desc":" Separate items using this.","required":"no"},{"param":"$after","desc":" After list.","required":"no"}]},"the_taxonomies":{"desc":"Display the taxonomies of a post with available options.","params":[{"param":"$args","desc":"Arguments about which post to use and how to format the output. Shares all of the arguments supported by get_the_taxonomies(), in addition to the following. post(int|WP_Post) Post ID or object to get taxonomies of. Default current post. before(string) Displays before the taxonomies. Default empty string. sep(string) Separates each taxonomy. Default is a space. after(string) Displays after the taxonomies. Default empty string.  ","required":"no"}]},"the_terms":{"desc":"Display the terms in a list.","params":[{"param":"$id","desc":"Post ID.","required":"yes"},{"param":"$taxonomy","desc":"Taxonomy name.","required":"yes"},{"param":"$before","desc":" Before list.","required":"no"},{"param":"$sep","desc":" Separate items using this.","required":"no"},{"param":"$after","desc":" After list.","required":"no"}]},"the_time":{"desc":"Display the time at which the post was written.","params":[{"param":"$d","desc":"Either G, U, or php date format.","required":"no"}]},"the_title":{"desc":"Display or retrieve the current post title with optional content.","params":[{"param":"$before","desc":" Markup to prepend to the title. ","required":"no"},{"param":"$after","desc":" Markup to append to the title. ","required":"no"},{"param":"$echo","desc":" Whether to echo or return the title. Default true for echo.","required":"no"}]},"the_title_attribute":{"desc":"Sanitize the current title when retrieving or displaying.","params":[{"param":"$args","desc":"Title attribute arguments. Optional. before(string) Markup to prepend to the title.  after(string) Markup to append to the title.  echo(bool) Whether to echo or return the title. Default true for echo. post(WP_Post) Current post object to retrieve the title for.  ","required":"no"}]},"the_title_rss":{"desc":"Display the post title in the feed.","params":[]},"the_weekday":{"desc":"Display the weekday on which the post was written.","params":[]},"the_weekday_date":{"desc":"Display the weekday on which the post was written.","params":[{"param":"$before","desc":"Output before the date.","required":"no"},{"param":"$after","desc":"Output after the date.","required":"no"}]},"the_widget":{"desc":"Output an arbitrary widget as a template tag.","params":[{"param":"$widget","desc":"The widgets PHP class name (see class-wp-widget.php).","required":"yes"},{"param":"$instance","desc":" The widgets instance settings. ","required":"no"},{"param":"$args","desc":"Array of arguments to configure the display of the widget. before_widget(string) HTML content that will be prepended to the widgets HTML output. Default <div class=widget %s>, where %s is the widgets class name. after_widget(string) HTML content that will be appended to the widgets HTML output. Default </div>. before_title(string) HTML content that will be prepended to the widgets title when displayed. Default <h2 class=widgettitle>. after_title(string) HTML content that will be appended to the widgets title when displayed. Default </h2>.  ","required":"no"}]},"timer_start":{"desc":"Start the WordPress micro-timer.","params":[]},"timer_stop":{"desc":"Retrieve or display the time from the page start to when function is called.","params":[{"param":"$display","desc":"Whether to echo or return the results. Accepts 0|false for return, 1|true for echo. Default 0|false.","required":"yes"},{"param":"$precision","desc":"The number of digits from the right of the decimal to display. ","required":"no"}]},"tinymce_include":{"desc":"","params":[]},"touch_time":{"desc":"Print out HTML form date elements for editing post or comment publish date.","params":[{"param":"$edit","desc":"Accepts 1|true for editing the date, 0|false for adding the date.","required":"no"},{"param":"$for_post","desc":"Accepts 1|true for applying the date to a post, 0|false for a comment.","required":"no"},{"param":"$tab_index","desc":"The tabindex attribute to add. Default 0.","required":"yes"},{"param":"$multi","desc":" Whether the additional fields and buttons should be added. Default 0|false.","required":"no"}]},"trackback":{"desc":"Send a Trackback.","params":[{"param":"$trackback_url","desc":"URL to send trackbacks.","required":"yes"},{"param":"$title","desc":"Title of post.","required":"yes"},{"param":"$excerpt","desc":"Excerpt of post.","required":"yes"},{"param":"$ID","desc":"Post ID.","required":"yes"}]},"trackback_rdf":{"desc":"Generate and display the RDF for the trackback information of current post.","params":[{"param":"$deprecated","desc":"Not used (Was $timezone = 0).","required":"no"}]},"trackback_response":{"desc":"Response to a trackback.","params":[{"param":"$error","desc":"Whether there was an error. Default 0. Accepts 0 or 1, true or false.","required":"yes"},{"param":"$error_message","desc":"Error message if an error occurred.","required":"no"}]},"trackback_url":{"desc":"Display the current post’s trackback URL.","params":[{"param":"$deprecated_echo","desc":"Not used.","required":"no"}]},"trackback_url_list":{"desc":"Do trackbacks for a list of URLs.","params":[{"param":"$tb_list","desc":"Comma separated list of URLs.","required":"yes"},{"param":"$post_id","desc":"Post ID.","required":"yes"}]},"trailingslashit":{"desc":"Appends a trailing slash.","params":[{"param":"$string","desc":"What to add the trailing slash to.","required":"yes"}]},"translate":{"desc":"Retrieve the translation of $text.","params":[{"param":"$text","desc":"Text to translate.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"translate_level_to_role":{"desc":"Translate user level to user role name.","params":[{"param":"$level","desc":"User level.","required":"yes"}]},"translate_nooped_plural":{"desc":"Translates and retrieves the singular or plural form of a string that’s been registered with _n_noop() or _nx_noop().","params":[{"param":"$nooped_plural","desc":"Array with singular, plural, and context keys, usually the result of _n_noop() or _nx_noop().","required":"yes"},{"param":"$count","desc":"Number of objects.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. If $nooped_plural contains a text domain passed to _n_noop() or _nx_noop(), it will override this value. ","required":"no"}]},"translate_smiley":{"desc":"Convert one smiley code to the icon graphic file equivalent.","params":[{"param":"$matches","desc":"Single match. Smiley code to convert to image.","required":"yes"}]},"translate_user_role":{"desc":"Translates role name.","params":[{"param":"$name","desc":"The role name.","required":"yes"}]},"translate_with_context":{"desc":"Translates $text like translate(), but assumes that the text contains a context after its last vertical bar.","params":[{"param":"$text","desc":"Text to translate","required":"yes"},{"param":"$domain","desc":"Domain to retrieve the translated text","required":"no"}]},"translate_with_gettext_context":{"desc":"Retrieve the translation of $text in the context defined in $context.","params":[{"param":"$text","desc":"Text to translate.","required":"yes"},{"param":"$context","desc":"Context information for the translators.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"translations_api":{"desc":"Retrieve translations from WordPress Translation API.","params":[{"param":"$type","desc":"Type of translations. Accepts plugins, themes, core.","required":"yes"},{"param":"$args","desc":"Translation API arguments. Optional.","required":"no"}]},"twentyeleven_admin_enqueue_scripts":{"desc":"Properly enqueue styles and scripts for our theme options page.","params":[{"param":"$hook_suffix","desc":"An admin pages hook suffix.","required":"yes"}]},"twentyeleven_admin_header_image":{"desc":"Custom header image markup displayed on the Appearance > Header admin panel.","params":[]},"twentyeleven_admin_header_style":{"desc":"Styles the header image displayed on the Appearance > Header admin panel.","params":[]},"twentyeleven_auto_excerpt_more":{"desc":"Replace “[.","params":[{"param":"$more","desc":"The Read More text.","required":"yes"}]},"twentyeleven_body_classes":{"desc":"Add two classes to the array of body classes.","params":[{"param":"$classes","desc":"Existing body classes.","required":"yes"}]},"twentyeleven_color_schemes":{"desc":"Return an array of color schemes registered for Twenty Eleven.","params":[]},"twentyeleven_comment":{"desc":"Template for comments and pingbacks.","params":[{"param":"$comment","desc":"The comment object.","required":"yes"},{"param":"$args","desc":"An array of comment arguments. @see get_comment_reply_link()","required":"yes"},{"param":"$depth","desc":"The depth of the comment.","required":"yes"}]},"twentyeleven_content_nav":{"desc":"Display navigation to next/previous pages when applicable.","params":[{"param":"$html_id","desc":"The HTML id attribute.","required":"yes"}]},"twentyeleven_continue_reading_link":{"desc":"Return a “Continue Reading” link for excerpts","params":[]},"twentyeleven_customize_preview_js":{"desc":"Bind JS handlers to make Theme Customizer preview reload changes asynchronously.","params":[]},"twentyeleven_customize_register":{"desc":"Implements Twenty Eleven theme options into Theme Customizer","params":[{"param":"$wp_customize","desc":"Theme Customizer object.","required":"yes"}]},"twentyeleven_custom_excerpt_more":{"desc":"Add a pretty “Continue Reading” link to custom post excerpts.","params":[{"param":"$output","desc":"The Continue Reading link.","required":"yes"}]},"twentyeleven_enqueue_color_scheme":{"desc":"Enqueue the styles for the current color scheme.","params":[]},"twentyeleven_excerpt_length":{"desc":"Set the post excerpt length to 40 words.","params":[{"param":"$length","desc":"The number of excerpt characters.","required":"yes"}]},"twentyeleven_footer_sidebar_class":{"desc":"Count the number of footer sidebars to enable dynamic classes for the footer.","params":[]},"twentyeleven_get_default_link_color":{"desc":"Return the default link color for Twenty Eleven, based on color scheme.","params":[{"param":"$color_scheme","desc":" Color scheme. Default null (or the active color scheme).","required":"no"}]},"twentyeleven_get_default_theme_options":{"desc":"Return the default options for Twenty Eleven.","params":[]},"twentyeleven_get_first_url":{"desc":"Return the first link from the post content. If none found, the post permalink is used as a fallback.","params":[]},"twentyeleven_get_gallery_images":{"desc":"Retrieve the IDs for images in a gallery.","params":[]},"twentyeleven_get_theme_options":{"desc":"Return the options array for Twenty Eleven.","params":[]},"twentyeleven_header_style":{"desc":"Styles the header image and text displayed on the blog.","params":[]},"twentyeleven_layouts":{"desc":"Return an array of layout options registered for Twenty Eleven.","params":[]},"twentyeleven_layout_classes":{"desc":"Add Twenty Eleven layout classes to the array of body classes.","params":[{"param":"$existing_classes","desc":"An array of existing body classes.","required":"yes"}]},"twentyeleven_option_page_capability":{"desc":"Change the capability required to save the ‘twentyeleven_options’ options group.","params":[{"param":"$capability","desc":"The capability used for the page, which is manage_options by default.","required":"yes"}]},"twentyeleven_page_menu_args":{"desc":"Show a home link for the wp_nav_menu() fallback, wp_page_menu().","params":[{"param":"$args","desc":"The page menu arguments. @see wp_page_menu()","required":"yes"}]},"twentyeleven_posted_on":{"desc":"Print HTML with meta information for the current post-date/time and author.","params":[]},"twentyeleven_print_link_color_style":{"desc":"Add a style block to the theme for the current link color.","params":[]},"twentyeleven_settings_field_color_scheme":{"desc":"Render the Color Scheme setting field.","params":[]},"twentyeleven_settings_field_layout":{"desc":"Render the Layout setting field.","params":[]},"twentyeleven_settings_field_link_color":{"desc":"Render the Link Color setting field.","params":[]},"twentyeleven_setup":{"desc":"Set up theme defaults and registers support for various WordPress features.","params":[]},"twentyeleven_theme_options_add_page":{"desc":"Add a theme options page to the admin menu, including some help documentation.","params":[]},"twentyeleven_theme_options_help":{"desc":"","params":[]},"twentyeleven_theme_options_init":{"desc":"Register the form setting for our twentyeleven_options array.","params":[]},"twentyeleven_theme_options_render_page":{"desc":"Render the theme options page for Twenty Eleven.","params":[]},"twentyeleven_theme_options_validate":{"desc":"Sanitize and validate form input.","params":[{"param":"$input","desc":"An array of form input.","required":"yes"}]},"twentyeleven_url_grabber":{"desc":"Return the URL for the first link found in the post content.","params":[]},"twentyeleven_widgets_init":{"desc":"Register sidebars and widgetized areas.","params":[]},"twentyfourteen_admin_fonts":{"desc":"Enqueue Google fonts style to admin screen for custom header display.","params":[]},"twentyfourteen_admin_header_image":{"desc":"Create the custom header image markup displayed on the Appearance > Header screen.","params":[]},"twentyfourteen_admin_header_style":{"desc":"Style the header image displayed on the Appearance > Header screen.","params":[]},"twentyfourteen_body_classes":{"desc":"Extend the default WordPress body classes.","params":[{"param":"$classes","desc":"A list of existing body class values.","required":"yes"}]},"twentyfourteen_categorized_blog":{"desc":"Find out if blog has more than one category.","params":[]},"twentyfourteen_category_transient_flusher":{"desc":"Flush out the transients used in twentyfourteen_categorized_blog.","params":[]},"twentyfourteen_content_width":{"desc":"Adjust content_width value for image attachment template.","params":[]},"twentyfourteen_contextual_help":{"desc":"Add contextual help to the Themes and Post edit screens.","params":[]},"twentyfourteen_customize":{"desc":"Prevent the Theme Customizer from being loaded on WordPress versions prior to 3.6.","params":[]},"twentyfourteen_customize_preview_js":{"desc":"Bind JS handlers to make Theme Customizer preview reload changes asynchronously.","params":[]},"twentyfourteen_customize_register":{"desc":"Implement Theme Customizer additions and adjustments.","params":[{"param":"$wp_customize","desc":"Theme Customizer object.","required":"yes"}]},"twentyfourteen_custom_header_setup":{"desc":"Set up the WordPress core custom header settings.","params":[]},"twentyfourteen_font_url":{"desc":"Register Lato Google font for Twenty Fourteen.","params":[]},"twentyfourteen_get_featured_posts":{"desc":"Getter function for Featured Content Plugin.","params":[]},"twentyfourteen_has_featured_posts":{"desc":"A helper conditional function that returns a boolean value.","params":[]},"twentyfourteen_header_style":{"desc":"Styles the header image and text displayed on the blog","params":[]},"twentyfourteen_list_authors":{"desc":"Print a list of all site contributors who published at least one post.","params":[]},"twentyfourteen_paging_nav":{"desc":"Display navigation to next/previous set of posts when applicable.","params":[]},"twentyfourteen_posted_on":{"desc":"Print HTML with meta information for the current post-date/time and author.","params":[]},"twentyfourteen_post_classes":{"desc":"Extend the default WordPress post classes.","params":[{"param":"$classes","desc":"A list of existing post class values.","required":"yes"}]},"twentyfourteen_post_nav":{"desc":"Display navigation to next/previous post when applicable.","params":[]},"twentyfourteen_post_thumbnail":{"desc":"Display an optional post thumbnail.","params":[]},"twentyfourteen_preview":{"desc":"Prevent the Theme Preview from being loaded on WordPress versions prior to 3.4.","params":[]},"twentyfourteen_sanitize_layout":{"desc":"Sanitize the Featured Content layout value.","params":[{"param":"$layout","desc":"Layout type.","required":"yes"}]},"twentyfourteen_scripts":{"desc":"Enqueue scripts and styles for the front end.","params":[]},"twentyfourteen_setup":{"desc":"Twenty Fourteen setup.","params":[]},"twentyfourteen_switch_theme":{"desc":"Prevent switching to Twenty Fourteen on old versions of WordPress.","params":[]},"twentyfourteen_the_attached_image":{"desc":"Print the attached image with a link to the next attached image.","params":[]},"twentyfourteen_upgrade_notice":{"desc":"Add message for unsuccessful theme switch.","params":[]},"twentyfourteen_widgets_init":{"desc":"Register three Twenty Fourteen widget areas.","params":[]},"twentyfourteen_wp_title":{"desc":"Create a nicely formatted and more specific title element text for output in head of document, based on current view.","params":[{"param":"$title","desc":"Default title text for current view.","required":"yes"},{"param":"$sep","desc":"separator.","required":"no"}]},"twentyten_admin_header_style":{"desc":"Style the header image displayed on the Appearance > Header admin panel.","params":[]},"twentyten_auto_excerpt_more":{"desc":"Replace “[.","params":[{"param":"$more","desc":"The Read More text.","required":"yes"}]},"twentyten_comment":{"desc":"Template for comments and pingbacks.","params":[{"param":"$comment","desc":"The comment object.","required":"yes"},{"param":"$args","desc":"An array of arguments. @see get_comment_reply_link()","required":"yes"},{"param":"$depth","desc":"The depth of the comment.","required":"yes"}]},"twentyten_continue_reading_link":{"desc":"Return a “Continue Reading” link for excerpts.","params":[]},"twentyten_custom_excerpt_more":{"desc":"Add a pretty “Continue Reading” link to custom post excerpts.","params":[{"param":"$output","desc":"The Coninue Reading link.","required":"yes"}]},"twentyten_excerpt_length":{"desc":"Set the post excerpt length to 40 characters.","params":[{"param":"$length","desc":"The number of excerpt characters.","required":"yes"}]},"twentyten_get_gallery_images":{"desc":"Retrieve the IDs for images in a gallery.","params":[]},"twentyten_page_menu_args":{"desc":"Show a home link for our wp_nav_menu() fallback, wp_page_menu().","params":[{"param":"$args","desc":"An optional array of arguments. @see wp_page_menu()","required":"yes"}]},"twentyten_posted_in":{"desc":"Print HTML with meta information for the current post (category, tags and permalink).","params":[]},"twentyten_posted_on":{"desc":"Print HTML with meta information for the current post-date/time and author.","params":[]},"twentyten_remove_gallery_css":{"desc":"Deprecated way to remove inline styles printed when the gallery shortcode is used.","params":[]},"twentyten_remove_recent_comments_style":{"desc":"Remove the default styles that are packaged with the Recent Comments widget.","params":[]},"twentyten_setup":{"desc":"Set up theme defaults and registers support for various WordPress features.","params":[]},"twentyten_widgets_init":{"desc":"Register widgetized areas, including two sidebars and four widget-ready columns in the footer.","params":[]},"twentythirteen_admin_header_image":{"desc":"Output markup to be displayed on the Appearance > Header admin panel.","params":[]},"twentythirteen_admin_header_style":{"desc":"Style the header image displayed on the Appearance > Header admin panel.","params":[]},"twentythirteen_body_class":{"desc":"Extend the default WordPress body classes.","params":[{"param":"$classes","desc":"A list of existing body class values.","required":"yes"}]},"twentythirteen_content_width":{"desc":"Adjust content_width value for video post formats and attachment templates.","params":[]},"twentythirteen_customize":{"desc":"Prevent the Theme Customizer from being loaded on WordPress versions prior to 3.6.","params":[]},"twentythirteen_customize_preview_js":{"desc":"Enqueue Javascript postMessage handlers for the Customizer.","params":[]},"twentythirteen_customize_register":{"desc":"Add postMessage support for site title and description for the Customizer.","params":[{"param":"$wp_customize","desc":"Customizer object.","required":"yes"}]},"twentythirteen_custom_header_fonts":{"desc":"Load our special font CSS files.","params":[]},"twentythirteen_custom_header_setup":{"desc":"Set up the WordPress core custom header arguments and settings.","params":[]},"twentythirteen_entry_date":{"desc":"Print HTML with date information for current post.","params":[{"param":"$echo","desc":"(optional) Whether to echo the date. ","required":"no"}]},"twentythirteen_entry_meta":{"desc":"Print HTML with meta information for current post: categories, tags, permalink, author, and date.","params":[]},"twentythirteen_fonts_url":{"desc":"Return the Google font stylesheet URL, if available.","params":[]},"twentythirteen_get_link_url":{"desc":"Return the post URL.","params":[]},"twentythirteen_header_style":{"desc":"Style the header text displayed on the blog.","params":[]},"twentythirteen_paging_nav":{"desc":"Display navigation to next/previous set of posts when applicable.","params":[]},"twentythirteen_post_nav":{"desc":"Display navigation to next/previous post when applicable.","params":[]},"twentythirteen_preview":{"desc":"Prevent the Theme Preview from being loaded on WordPress versions prior to 3.4.","params":[]},"twentythirteen_scripts_styles":{"desc":"Enqueue scripts and styles for the front end.","params":[]},"twentythirteen_setup":{"desc":"Twenty Thirteen setup.","params":[]},"twentythirteen_switch_theme":{"desc":"Prevent switching to Twenty Thirteen on old versions of WordPress.","params":[]},"twentythirteen_the_attached_image":{"desc":"Print the attached image with a link to the next attached image.","params":[]},"twentythirteen_upgrade_notice":{"desc":"Add message for unsuccessful theme switch.","params":[]},"twentythirteen_widgets_init":{"desc":"Register two widget areas.","params":[]},"twentythirteen_wp_title":{"desc":"Filter the page title.","params":[{"param":"$title","desc":"Default title text for current view.","required":"yes"},{"param":"$sep","desc":"separator.","required":"no"}]},"twentytwelve_admin_header_image":{"desc":"Output markup to be displayed on the Appearance > Header admin panel.","params":[]},"twentytwelve_admin_header_style":{"desc":"Style the header image displayed on the Appearance > Header admin panel.","params":[]},"twentytwelve_body_class":{"desc":"Extend the default WordPress body classes.","params":[{"param":"$classes","desc":"Existing class values.","required":"yes"}]},"twentytwelve_comment":{"desc":"Template for comments and pingbacks.","params":[]},"twentytwelve_content_nav":{"desc":"Displays navigation to next/previous pages when applicable.","params":[]},"twentytwelve_content_width":{"desc":"Adjust content width in certain contexts.","params":[]},"twentytwelve_customize_preview_js":{"desc":"Enqueue Javascript postMessage handlers for the Customizer.","params":[]},"twentytwelve_customize_register":{"desc":"Register postMessage support.","params":[{"param":"$wp_customize","desc":"Customizer object.","required":"yes"}]},"twentytwelve_custom_header_fonts":{"desc":"Load our special font CSS file.","params":[]},"twentytwelve_custom_header_setup":{"desc":"Set up the WordPress core custom header arguments and settings.","params":[]},"twentytwelve_entry_meta":{"desc":"Set up post entry meta.","params":[]},"twentytwelve_get_font_url":{"desc":"Return the Google font stylesheet URL if available.","params":[]},"twentytwelve_header_style":{"desc":"Style the header text displayed on the blog.","params":[]},"twentytwelve_mce_css":{"desc":"Filter TinyMCE CSS path to include Google Fonts.","params":[{"param":"$mce_css","desc":"CSS path to load in TinyMCE.","required":"yes"}]},"twentytwelve_page_menu_args":{"desc":"Filter the page menu arguments.","params":[]},"twentytwelve_scripts_styles":{"desc":"Enqueue scripts and styles for front-end.","params":[]},"twentytwelve_setup":{"desc":"Twenty Twelve setup.","params":[]},"twentytwelve_widgets_init":{"desc":"Register sidebars.","params":[]},"twentytwelve_wp_title":{"desc":"Filter the page title.","params":[{"param":"$title","desc":"Default title text for current view.","required":"yes"},{"param":"$sep","desc":"separator.","required":"no"}]},"type_url_form_audio":{"desc":"Handles retrieving the insert-from-URL form for an audio file.","params":[]},"type_url_form_file":{"desc":"Handles retrieving the insert-from-URL form for a generic file.","params":[]},"type_url_form_image":{"desc":"Handles retrieving the insert-from-URL form for an image.","params":[]},"type_url_form_video":{"desc":"Handles retrieving the insert-from-URL form for a video file.","params":[]},"undismiss_core_update":{"desc":"","params":[{"param":"$version","desc":"","required":"yes"},{"param":"$locale","desc":"","required":"yes"}]},"unescape_invalid_shortcodes":{"desc":"Remove placeholders added by do_shortcodes_in_html_tags().","params":[{"param":"$content","desc":"Content to search for placeholders.","required":"yes"}]},"uninstall_plugin":{"desc":"Uninstall a single plugin.","params":[{"param":"$plugin","desc":"Relative plugin path from Plugin Directory.","required":"yes"}]},"unload_textdomain":{"desc":"Unload translations for a text domain.","params":[{"param":"$domain","desc":"Text domain. Unique identifier for retrieving translated strings.","required":"yes"}]},"unregister_default_headers":{"desc":"Unregister default headers.","params":[{"param":"$header","desc":"The header string id (key of array) to remove, or an array thereof.","required":"yes"}]},"unregister_meta_key":{"desc":"Unregisters a meta key from the list of registered keys.","params":[{"param":"$object_type","desc":"The type of object.","required":"yes"},{"param":"$meta_key","desc":"The meta key.","required":"yes"}]},"unregister_nav_menu":{"desc":"Unregisters a navigation menu location for a theme.","params":[{"param":"$location","desc":"The menu location identifier.","required":"yes"}]},"unregister_post_type":{"desc":"Unregisters a post type.","params":[{"param":"$post_type","desc":"Post type to unregister.","required":"yes"}]},"unregister_setting":{"desc":"Unregister a setting","params":[{"param":"$option_group","desc":"The settings group name used during registration.","required":"yes"},{"param":"$option_name","desc":"The name of the option to unregister.","required":"yes"},{"param":"$deprecated","desc":"Deprecated.","required":"no"}]},"unregister_sidebar":{"desc":"Removes a sidebar from the list.","params":[{"param":"$name","desc":"The ID of the sidebar when it was added.","required":"yes"}]},"unregister_sidebar_widget":{"desc":"Alias of {@link wp_unregister_sidebar_widget()}.","params":[{"param":"$id","desc":"Widget ID.","required":"yes"}]},"unregister_taxonomy":{"desc":"Unregisters a taxonomy.","params":[{"param":"$taxonomy","desc":"Taxonomy name.","required":"yes"}]},"unregister_taxonomy_for_object_type":{"desc":"Remove an already registered taxonomy from an object type.","params":[{"param":"$taxonomy","desc":"Name of taxonomy object.","required":"yes"},{"param":"$object_type","desc":"Name of the object type.","required":"yes"}]},"unregister_widget":{"desc":"Unregisters a widget.","params":[{"param":"$widget_class","desc":"The name of a class that extends WP_Widget.","required":"yes"}]},"unregister_widget_control":{"desc":"Alias of wp_unregister_widget_control().","params":[{"param":"$id","desc":"Widget ID.","required":"yes"}]},"unstick_post":{"desc":"Un-stick a post.","params":[{"param":"$post_id","desc":"Post ID.","required":"yes"}]},"untrailingslashit":{"desc":"Removes trailing forward slashes and backslashes if they exist.","params":[{"param":"$string","desc":"What to remove the trailing slashes from.","required":"yes"}]},"unzip_file":{"desc":"Unzips a specified ZIP file to a location on the Filesystem via the WordPress Filesystem Abstraction.","params":[{"param":"$file","desc":"Full path and filename of zip archive","required":"yes"},{"param":"$to","desc":"Full path on the filesystem to extract archive to","required":"yes"}]},"update_archived":{"desc":"Update the ‘archived’ status of a particular blog.","params":[{"param":"$id","desc":"The blog id","required":"yes"},{"param":"$archived","desc":"The new status","required":"yes"}]},"update_attached_file":{"desc":"Update attachment file path based on attachment ID.","params":[{"param":"$attachment_id","desc":"Attachment ID.","required":"yes"},{"param":"$file","desc":"File path for the attachment.","required":"yes"}]},"update_blog_details":{"desc":"Update the details for a blog. Updates the blogs table for a given blog id.","params":[{"param":"$blog_id","desc":"Blog ID","required":"yes"},{"param":"$details","desc":"Array of details keyed by blogs table field names.","required":"no"}]},"update_blog_option":{"desc":"Update an option for a particular blog.","params":[{"param":"$id","desc":"The blog id.","required":"yes"},{"param":"$option","desc":"The option key.","required":"yes"},{"param":"$value","desc":"The option value.","required":"yes"},{"param":"$deprecated","desc":"Not used.","required":"no"}]},"update_blog_public":{"desc":"Update this blog’s ‘public’ setting in the global blogs table.","params":[{"param":"$old_value","desc":"","required":"yes"},{"param":"$value","desc":"The new public value","required":"yes"}]},"update_blog_status":{"desc":"Update a blog details field.","params":[{"param":"$blog_id","desc":"BLog ID","required":"yes"},{"param":"$pref","desc":"A field name","required":"yes"},{"param":"$value","desc":"Value for $pref","required":"yes"},{"param":"$deprecated","desc":"","required":"no"}]},"update_category_cache":{"desc":"Update the categories cache.","params":[]},"update_comment_cache":{"desc":"Updates the comment cache of given comments.","params":[{"param":"$comments","desc":"Array of comment row objects","required":"yes"},{"param":"$update_meta_cache","desc":"Whether to update commentmeta cache. ","required":"no"}]},"update_comment_meta":{"desc":"Update comment meta field based on comment ID.","params":[{"param":"$comment_id","desc":"Comment ID.","required":"yes"},{"param":"$meta_key","desc":"Metadata key.","required":"yes"},{"param":"$meta_value","desc":"Metadata value.","required":"yes"},{"param":"$prev_value","desc":" Previous value to check before removing.","required":"no"}]},"update_core":{"desc":"Upgrade the core of WordPress.","params":[{"param":"$from","desc":"New release unzipped path.","required":"yes"},{"param":"$to","desc":"Path to old WordPress installation.","required":"yes"}]},"update_gallery_tab":{"desc":"Adds the gallery tab back to the tabs array if post has image attachments","params":[{"param":"$tabs","desc":"","required":"yes"}]},"update_home_siteurl":{"desc":"Flushes rewrite rules if siteurl, home or page_on_front changed.","params":[{"param":"$old_value","desc":"","required":"yes"},{"param":"$value","desc":"","required":"yes"}]},"update_meta":{"desc":"Update post meta data by meta ID.","params":[{"param":"$meta_id","desc":"","required":"yes"},{"param":"$meta_key","desc":"Expect Slashed","required":"yes"},{"param":"$meta_value","desc":"Expect Slashed","required":"yes"}]},"update_metadata":{"desc":"Update metadata for the specified object. If no value already exists for the specified object ID and metadata key, the metadata will be added.","params":[{"param":"$meta_type","desc":"Type of object metadata is for (e.g., comment, post, or user)","required":"yes"},{"param":"$object_id","desc":"ID of the object metadata is for","required":"yes"},{"param":"$meta_key","desc":"Metadata key","required":"yes"},{"param":"$meta_value","desc":"Metadata value. Must be serializable if non-scalar.","required":"yes"},{"param":"$prev_value","desc":" If specified, only update existing metadata entries with    the specified value. Otherwise, update all entries.","required":"no"}]},"update_metadata_by_mid":{"desc":"Update meta data by meta ID","params":[{"param":"$meta_type","desc":"Type of object metadata is for (e.g., comment, post, or user)","required":"yes"},{"param":"$meta_id","desc":"ID for a specific meta row","required":"yes"},{"param":"$meta_value","desc":"Metadata value","required":"yes"},{"param":"$meta_key","desc":" you can provide a meta key to update it","required":"no"}]},"update_meta_cache":{"desc":"Update the metadata cache for the specified objects.","params":[{"param":"$meta_type","desc":"Type of object metadata is for (e.g., comment, post, or user)","required":"yes"},{"param":"$object_ids","desc":"Array or comma delimited list of object IDs to update cache for","required":"yes"}]},"update_nag":{"desc":"","params":[]},"update_network_cache":{"desc":"Updates the network cache of given networks.","params":[{"param":"$networks","desc":"Array of network row objects.","required":"yes"}]},"update_network_option":{"desc":"Update the value of a network option that was already added.","params":[{"param":"$network_id","desc":"ID of the network. Can be null to default to the current network ID.","required":"yes"},{"param":"$option","desc":"Name of option. Expected to not be SQL-escaped.","required":"yes"},{"param":"$value","desc":"Option value. Expected to not be SQL-escaped.","required":"yes"}]},"update_object_term_cache":{"desc":"Updates the cache for the given term object ID(s).","params":[{"param":"$object_ids","desc":"Comma-separated list or array of term object IDs.","required":"yes"},{"param":"$object_type","desc":"The taxonomy object type.","required":"yes"}]},"update_option":{"desc":"Update the value of an option that was already added.","params":[{"param":"$option","desc":"Option name. Expected to not be SQL-escaped.","required":"yes"},{"param":"$value","desc":"Option value. Must be serializable if non-scalar. Expected to not be SQL-escaped.","required":"yes"},{"param":"$autoload","desc":" Whether to load the option when WordPress starts up. For existing options, $autoload can only be updated using update_option() if $value is also changed. Accepts yes|true to enable or no|false to disable. For non-existent options, the default value is yes. ","required":"no"}]},"update_option_new_admin_email":{"desc":"Sends an email when a site administrator email address is changed.","params":[{"param":"$old_value","desc":"The old email address. Not currently used.","required":"yes"},{"param":"$value","desc":"The new email address.","required":"yes"}]},"update_page_cache":{"desc":"Alias of update_post_cache().","params":[{"param":"$pages","desc":"list of page objects","required":"yes"}]},"update_postmeta_cache":{"desc":"Updates metadata cache for list of post IDs.","params":[{"param":"$post_ids","desc":"List of post IDs.","required":"yes"}]},"update_posts_count":{"desc":"Update a blog’s post count.","params":[{"param":"$deprecated","desc":"Not used.","required":"no"}]},"update_post_cache":{"desc":"Updates posts in cache.","params":[{"param":"$posts","desc":"Array of post objects, passed by reference.","required":"yes"}]},"update_post_caches":{"desc":"Call major cache updating functions for list of Post objects.","params":[{"param":"$posts","desc":"Array of Post objects","required":"yes"},{"param":"$post_type","desc":" Post type. ","required":"no"},{"param":"$update_term_cache","desc":" Whether to update the term cache. ","required":"no"},{"param":"$update_meta_cache","desc":" Whether to update the meta cache. ","required":"no"}]},"update_post_meta":{"desc":"Update post meta field based on post ID.","params":[{"param":"$post_id","desc":"Post ID.","required":"yes"},{"param":"$meta_key","desc":"Metadata key.","required":"yes"},{"param":"$meta_value","desc":"Metadata value. Must be serializable if non-scalar.","required":"yes"},{"param":"$prev_value","desc":" Previous value to check before removing. ","required":"no"}]},"update_post_thumbnail_cache":{"desc":"Update cache for thumbnails in the current loop.","params":[{"param":"$wp_query","desc":" A WP_Query instance. Defaults to the $wp_query global.","required":"no"}]},"update_recently_edited":{"desc":"Update the “recently-edited” file for the plugin or theme editor.","params":[{"param":"$file","desc":"","required":"yes"}]},"update_right_now_message":{"desc":"","params":[]},"update_site_cache":{"desc":"Updates sites in cache.","params":[{"param":"$sites","desc":"Array of site objects.","required":"yes"}]},"update_site_option":{"desc":"Update the value of an option that was already added for the current network.","params":[{"param":"$option","desc":"Name of option. Expected to not be SQL-escaped.","required":"yes"},{"param":"$value","desc":"Option value. Expected to not be SQL-escaped.","required":"yes"}]},"update_termmeta_cache":{"desc":"Updates metadata cache for list of term IDs.","params":[{"param":"$term_ids","desc":"List of term IDs.","required":"yes"}]},"update_term_cache":{"desc":"Updates Terms to Taxonomy in cache.","params":[{"param":"$terms","desc":"List of term objects to change.","required":"yes"},{"param":"$taxonomy","desc":" Update Term to this taxonomy in cache. ","required":"no"}]},"update_term_meta":{"desc":"Updates term metadata.","params":[{"param":"$term_id","desc":"Term ID.","required":"yes"},{"param":"$meta_key","desc":"Metadata key.","required":"yes"},{"param":"$meta_value","desc":"Metadata value.","required":"yes"},{"param":"$prev_value","desc":" Previous value to check before removing.","required":"no"}]},"update_usermeta":{"desc":"Update metadata of user.","params":[{"param":"$user_id","desc":"User ID","required":"yes"},{"param":"$meta_key","desc":"Metadata key.","required":"yes"},{"param":"$meta_value","desc":"Metadata value.","required":"yes"}]},"update_user_caches":{"desc":"Update all user caches","params":[{"param":"$user","desc":"User object to be cached","required":"yes"}]},"update_user_meta":{"desc":"Update user meta field based on user ID.","params":[{"param":"$user_id","desc":"User ID.","required":"yes"},{"param":"$meta_key","desc":"Metadata key.","required":"yes"},{"param":"$meta_value","desc":"Metadata value.","required":"yes"},{"param":"$prev_value","desc":" Previous value to check before removing.","required":"no"}]},"update_user_option":{"desc":"Update user option with global blog capability.","params":[{"param":"$user_id","desc":"User ID.","required":"yes"},{"param":"$option_name","desc":"User option name.","required":"yes"},{"param":"$newvalue","desc":"User option value.","required":"yes"},{"param":"$global","desc":" Whether option name is global or blog specific. Default false (blog specific).","required":"no"}]},"update_user_status":{"desc":"Update the status of a user in the database.","params":[{"param":"$id","desc":"The user ID.","required":"yes"},{"param":"$pref","desc":"The column in the wp_users table to update the users status in (presumably user_status, spam, or deleted).","required":"yes"},{"param":"$value","desc":"The new status for the user.","required":"yes"},{"param":"$deprecated","desc":"Deprecated as of 3.0.2 and should not be used.","required":"no"}]},"upgrade_100":{"desc":"Execute changes made in WordPress 1.0.","params":[]},"upgrade_101":{"desc":"Execute changes made in WordPress 1.0.1.","params":[]},"upgrade_110":{"desc":"Execute changes made in WordPress 1.2.","params":[]},"upgrade_130":{"desc":"Execute changes made in WordPress 1.5.","params":[]},"upgrade_160":{"desc":"Execute changes made in WordPress 2.0.","params":[]},"upgrade_210":{"desc":"Execute changes made in WordPress 2.1.","params":[]},"upgrade_230":{"desc":"Execute changes made in WordPress 2.3.","params":[]},"upgrade_230_old_tables":{"desc":"Remove old categories, link2cat, and post2cat database tables.","params":[]},"upgrade_230_options_table":{"desc":"Remove old options from the database.","params":[]},"upgrade_250":{"desc":"Execute changes made in WordPress 2.5.0.","params":[]},"upgrade_252":{"desc":"Execute changes made in WordPress 2.5.2.","params":[]},"upgrade_260":{"desc":"Execute changes made in WordPress 2.6.","params":[]},"upgrade_270":{"desc":"Execute changes made in WordPress 2.7.","params":[]},"upgrade_280":{"desc":"Execute changes made in WordPress 2.8.","params":[]},"upgrade_290":{"desc":"Execute changes made in WordPress 2.9.","params":[]},"upgrade_300":{"desc":"Execute changes made in WordPress 3.0.","params":[]},"upgrade_330":{"desc":"Execute changes made in WordPress 3.3.","params":[]},"upgrade_340":{"desc":"Execute changes made in WordPress 3.4.","params":[]},"upgrade_350":{"desc":"Execute changes made in WordPress 3.5.","params":[]},"upgrade_370":{"desc":"Execute changes made in WordPress 3.7.","params":[]},"upgrade_372":{"desc":"Execute changes made in WordPress 3.7.2.","params":[]},"upgrade_380":{"desc":"Execute changes made in WordPress 3.8.0.","params":[]},"upgrade_400":{"desc":"Execute changes made in WordPress 4.0.0.","params":[]},"upgrade_420":{"desc":"Execute changes made in WordPress 4.2.0.","params":[]},"upgrade_421":{"desc":"Execute changes made in WordPress 4.2.1.","params":[]},"upgrade_422":{"desc":"Execute changes made in WordPress 4.2.2.","params":[]},"upgrade_423":{"desc":"Execute changes made in WordPress 4.2.0.","params":[]},"upgrade_430":{"desc":"Executes changes made in WordPress 4.3.0.","params":[]},"upgrade_430_fix_comments":{"desc":"Executes comments changes made in WordPress 4.3.0.","params":[]},"upgrade_431":{"desc":"Executes changes made in WordPress 4.3.1.","params":[]},"upgrade_440":{"desc":"Executes changes made in WordPress 4.4.0.","params":[]},"upgrade_all":{"desc":"Functions to be called in install and upgrade scripts.","params":[]},"upgrade_network":{"desc":"Executes network-level upgrade routines.","params":[]},"upgrade_old_slugs":{"desc":"Upgrade old slugs made in version 2.2.","params":[]},"upload_is_file_too_big":{"desc":"Check whether an upload is too big.","params":[{"param":"$upload","desc":"","required":"yes"}]},"upload_is_user_over_quota":{"desc":"Check whether a site has used its allotted upload space.","params":[{"param":"$echo","desc":" If $echo is set and the quota is exceeded, a warning message is echoed. Default is true.","required":"no"}]},"upload_size_limit_filter":{"desc":"Filters the maximum upload file size allowed, in bytes.","params":[{"param":"$size","desc":"Upload size limit in bytes.","required":"yes"}]},"upload_space_setting":{"desc":"Displays the site upload space quota setting form on the Edit Site Settings screen.","params":[{"param":"$id","desc":"The ID of the site to display the setting for.","required":"yes"}]},"urldecode_deep":{"desc":"Navigates through an array, object, or scalar, and decodes URL-encoded values","params":[{"param":"$value","desc":"The array or string to be decoded.","required":"yes"}]},"urlencode_deep":{"desc":"Navigates through an array, object, or scalar, and encodes the values to be used in a URL.","params":[{"param":"$value","desc":"The array or string to be encoded.","required":"yes"}]},"url_is_accessable_via_ssl":{"desc":"Determines if the URL can be accessed over SSL.","params":[{"param":"$url","desc":"The URL to test.","required":"yes"}]},"url_shorten":{"desc":"Shorten a URL, to be used as link text.","params":[{"param":"$url","desc":"URL to shorten.","required":"yes"},{"param":"$length","desc":" Maximum length of the shortened URL. Default 35 characters.","required":"no"}]},"url_to_postid":{"desc":"Examine a URL and try to determine the post ID it represents.","params":[{"param":"$url","desc":"Permalink to check.","required":"yes"}]},"username_exists":{"desc":"Checks whether the given username exists.","params":[{"param":"$username","desc":"Username.","required":"yes"}]},"users_can_register_signup_filter":{"desc":"Check whether users can self-register, based on Network settings.","params":[]},"user_admin_url":{"desc":"Retrieve the url to the admin area for the current user.","params":[{"param":"$path","desc":" Path relative to the admin URL. ","required":"no"},{"param":"$scheme","desc":" The scheme to use. Default is admin, which obeys force_ssl_admin() and is_ssl(). http or https can be passed to force those schemes.","required":"no"}]},"user_can":{"desc":"Whether a particular user has capability or role.","params":[{"param":"$user","desc":"User ID or object.","required":"yes"},{"param":"$capability","desc":"Capability or role name.","required":"yes"}]},"user_can_access_admin_page":{"desc":"","params":[]},"user_can_create_draft":{"desc":"Whether user can create a post.","params":[{"param":"$user_id","desc":"","required":"yes"},{"param":"$blog_id","desc":"Not Used","required":"no"},{"param":"$category_id","desc":"Not Used","required":"no"}]},"user_can_create_post":{"desc":"Whether user can create a post.","params":[{"param":"$user_id","desc":"","required":"yes"},{"param":"$blog_id","desc":"Not Used","required":"no"},{"param":"$category_id","desc":"Not Used","required":"no"}]},"user_can_delete_post":{"desc":"Whether user can delete a post.","params":[{"param":"$user_id","desc":"","required":"yes"},{"param":"$post_id","desc":"","required":"yes"},{"param":"$blog_id","desc":"Not Used","required":"no"}]},"user_can_delete_post_comments":{"desc":"Whether user can delete a post.","params":[{"param":"$user_id","desc":"","required":"yes"},{"param":"$post_id","desc":"","required":"yes"},{"param":"$blog_id","desc":"Not Used","required":"no"}]},"user_can_edit_post":{"desc":"Whether user can edit a post.","params":[{"param":"$user_id","desc":"","required":"yes"},{"param":"$post_id","desc":"","required":"yes"},{"param":"$blog_id","desc":"Not Used","required":"no"}]},"user_can_edit_post_comments":{"desc":"Whether user can delete a post.","params":[{"param":"$user_id","desc":"","required":"yes"},{"param":"$post_id","desc":"","required":"yes"},{"param":"$blog_id","desc":"Not Used","required":"no"}]},"user_can_edit_post_date":{"desc":"Whether user can delete a post.","params":[{"param":"$user_id","desc":"","required":"yes"},{"param":"$post_id","desc":"","required":"yes"},{"param":"$blog_id","desc":"Not Used","required":"no"}]},"user_can_edit_user":{"desc":"Can user can edit other user.","params":[{"param":"$user_id","desc":"","required":"yes"},{"param":"$other_user","desc":"","required":"yes"}]},"user_can_richedit":{"desc":"Whether the user can access the visual editor.","params":[]},"user_can_set_post_date":{"desc":"Whether user can set new posts’ dates.","params":[{"param":"$user_id","desc":"","required":"yes"},{"param":"$blog_id","desc":"Not Used","required":"no"},{"param":"$category_id","desc":"Not Used","required":"no"}]},"user_pass_ok":{"desc":"Check that the user login name and password is correct.","params":[{"param":"$user_login","desc":"User name.","required":"yes"},{"param":"$user_pass","desc":"User password.","required":"yes"}]},"user_trailingslashit":{"desc":"Retrieve trailing slash string, if blog set for adding trailing slashes.","params":[{"param":"$string","desc":"URL with or without a trailing slash.","required":"yes"},{"param":"$type_of_url","desc":" The type of URL being considered (e.g. single, category, etc) for use in the filter. ","required":"no"}]},"use_codepress":{"desc":"Determine whether to use CodePress.","params":[]},"use_ssl_preference":{"desc":"Optional SSL preference that can be turned on by hooking to the ‘personal_options’ action.","params":[{"param":"$user","desc":"User data object","required":"yes"}]},"utf8_uri_encode":{"desc":"Encode the Unicode values to be used in the URI.","params":[{"param":"$utf8_string","desc":"","required":"yes"},{"param":"$length","desc":"Max length of the string","required":"yes"}]},"validate_active_plugins":{"desc":"Validate active plugins","params":[]},"validate_another_blog_signup":{"desc":"Validate a new site signup.","params":[]},"validate_blog_form":{"desc":"Validate the new site signup","params":[]},"validate_blog_signup":{"desc":"Validate new site signup","params":[]},"validate_current_theme":{"desc":"Checks that current theme files ‘index.php’ and ‘style.css’ exists.","params":[]},"validate_email":{"desc":"Deprecated functionality to validate an email address.","params":[{"param":"$email","desc":"Email address to verify.","required":"yes"},{"param":"$check_domain","desc":"Deprecated.","required":"no"}]},"validate_file":{"desc":"File validates against allowed set of defined rules.","params":[{"param":"$file","desc":"File path.","required":"yes"},{"param":"$allowed_files","desc":"List of allowed files.","required":"no"}]},"validate_file_to_edit":{"desc":"Make sure that the file that was requested to edit, is allowed to be edited","params":[{"param":"$file","desc":"file the users is attempting to edit","required":"yes"},{"param":"$allowed_files","desc":"Array of allowed files to edit, $file must match an entry exactly","required":"no"}]},"validate_plugin":{"desc":"Validate the plugin path.","params":[{"param":"$plugin","desc":"Plugin Path.","required":"yes"}]},"validate_username":{"desc":"Checks whether a username is valid.","params":[{"param":"$username","desc":"Username.","required":"yes"}]},"validate_user_form":{"desc":"Validate user signup name and email","params":[]},"validate_user_signup":{"desc":"Validate the new user signup","params":[]},"valid_unicode":{"desc":"Helper function to determine if a Unicode value is valid.","params":[{"param":"$i","desc":"Unicode value","required":"yes"}]},"verify_file_md5":{"desc":"Calculates and compares the MD5 of a file to its expected value.","params":[{"param":"$filename","desc":"The filename to check the MD5 of.","required":"yes"},{"param":"$expected_md5","desc":"The expected MD5 of the file, either a base64 encoded raw md5, or a hex-encoded md5","required":"yes"}]},"walk_category_dropdown_tree":{"desc":"Retrieve HTML dropdown (select) content for category list.","params":[]},"walk_category_tree":{"desc":"Retrieve HTML list content for category list.","params":[]},"walk_nav_menu_tree":{"desc":"Retrieve the HTML list content for nav menu items.","params":[{"param":"$items","desc":"The menu items, sorted by each menu items menu order.","required":"yes"},{"param":"$depth","desc":"Depth of the item in reference to parents.","required":"yes"},{"param":"$r","desc":"An object containing wp_nav_menu() arguments.","required":"yes"}]},"walk_page_dropdown_tree":{"desc":"Retrieve HTML dropdown (select) content for page list.","params":[]},"walk_page_tree":{"desc":"Retrieve HTML list content for page list.","params":[{"param":"$pages","desc":"","required":"yes"},{"param":"$depth","desc":"","required":"yes"},{"param":"$current_page","desc":"","required":"yes"},{"param":"$r","desc":"","required":"yes"}]},"weblog_ping":{"desc":"Send a pingback.","params":[{"param":"$server","desc":"Host of blog to connect to.","required":"no"},{"param":"$path","desc":"Path to send the ping.","required":"no"}]},"welcome_user_msg_filter":{"desc":"Ensure that the welcome message is not empty. Currently unused.","params":[{"param":"$text","desc":"","required":"yes"}]},"win_is_writable":{"desc":"Workaround for Windows bug in is_writable() function","params":[{"param":"$path","desc":"Windows path to check for write-ability.","required":"yes"}]},"wlwmanifest_link":{"desc":"Display the link to the Windows Live Writer manifest file.","params":[]},"wp":{"desc":"Set up the WordPress query.","params":[{"param":"$query_vars","desc":"Default WP_Query arguments.","required":"no"}]},"wpautop":{"desc":"Replaces double line-breaks with paragraph elements.","params":[{"param":"$pee","desc":"The text which has to be formatted.","required":"yes"},{"param":"$br","desc":" If set, this will convert all remaining line-breaks after paragraphing. ","required":"no"}]},"wpmu_activate_signup":{"desc":"Activate a signup.","params":[{"param":"$key","desc":"The activation key provided to the user.","required":"yes"}]},"wpmu_activate_stylesheet":{"desc":"Loads styles specific to this page.","params":[]},"wpmu_admin_do_redirect":{"desc":"Redirect a user based on $_GET or $_POST arguments.","params":[{"param":"$url","desc":" Redirect URL. ","required":"no"}]},"wpmu_admin_redirect_add_updated_param":{"desc":"Adds an ‘updated=true’ argument to a URL.","params":[{"param":"$url","desc":" Redirect URL. ","required":"no"}]},"wpmu_checkAvailableSpace":{"desc":"Determines if the available space defined by the admin has been exceeded by the user.","params":[]},"wpmu_create_blog":{"desc":"Create a site.","params":[{"param":"$domain","desc":"The new sites domain.","required":"yes"},{"param":"$path","desc":"The new sites path.","required":"yes"},{"param":"$title","desc":"The new sites title.","required":"yes"},{"param":"$user_id","desc":"The user ID of the new sites admin.","required":"yes"},{"param":"$meta","desc":" Used to set initial site options.","required":"no"},{"param":"$site_id","desc":" Only relevant on multi-network installs.","required":"no"}]},"wpmu_create_user":{"desc":"Create a user.","params":[{"param":"$user_name","desc":"The new users login name.","required":"yes"},{"param":"$password","desc":"The new users password.","required":"yes"},{"param":"$email","desc":"The new users email address.","required":"yes"}]},"wpmu_current_site":{"desc":"This deprecated function managed much of the site and network loading in multisite.","params":[]},"wpmu_delete_blog":{"desc":"Delete a blog.","params":[{"param":"$blog_id","desc":"Site ID.","required":"yes"},{"param":"$drop","desc":"True if sites database tables should be dropped. Default is false.","required":"no"}]},"wpmu_delete_user":{"desc":"Delete a user from the network and remove from all sites.","params":[{"param":"$id","desc":"The user ID.","required":"yes"}]},"wpmu_get_blog_allowedthemes":{"desc":"Deprecated functionality for getting themes allowed on a specific site.","params":[]},"wpmu_log_new_registrations":{"desc":"Logs user registrations.","params":[{"param":"$blog_id","desc":"","required":"yes"},{"param":"$user_id","desc":"","required":"yes"}]},"wpmu_menu":{"desc":"Outputs the WPMU menu.","params":[]},"wpmu_signup_blog":{"desc":"Record site signup information for future activation.","params":[{"param":"$domain","desc":"The requested domain.","required":"yes"},{"param":"$path","desc":"The requested path.","required":"yes"},{"param":"$title","desc":"The requested site title.","required":"yes"},{"param":"$user","desc":"The users requested login name.","required":"yes"},{"param":"$user_email","desc":"The users email address.","required":"yes"},{"param":"$meta","desc":"By default, contains the requested privacy setting and lang_id.","required":"no"}]},"wpmu_signup_blog_notification":{"desc":"Notify user of signup success.","params":[{"param":"$domain","desc":"The new blog domain.","required":"yes"},{"param":"$path","desc":"The new blog path.","required":"yes"},{"param":"$title","desc":"The site title.","required":"yes"},{"param":"$user_login","desc":"The users login name.","required":"yes"},{"param":"$user_email","desc":"The users email address.","required":"yes"},{"param":"$key","desc":"The activation key created in wpmu_signup_blog()","required":"yes"},{"param":"$meta","desc":"By default, contains the requested privacy setting and lang_id.","required":"no"}]},"wpmu_signup_stylesheet":{"desc":"Prints styles for front-end Multisite signup pages","params":[]},"wpmu_signup_user":{"desc":"Record user signup information for future activation.","params":[{"param":"$user","desc":"The users requested login name.","required":"yes"},{"param":"$user_email","desc":"The users email address.","required":"yes"},{"param":"$meta","desc":"By default, this is an empty array.","required":"no"}]},"wpmu_signup_user_notification":{"desc":"Notify user of signup success.","params":[{"param":"$user_login","desc":"The users login name.","required":"yes"},{"param":"$user_email","desc":"The users email address.","required":"yes"},{"param":"$key","desc":"The activation key created in wpmu_signup_user()","required":"yes"},{"param":"$meta","desc":"By default, an empty array.","required":"no"}]},"wpmu_update_blogs_date":{"desc":"Update the last_updated field for the current site.","params":[]},"wpmu_validate_blog_signup":{"desc":"Processes new site registrations.","params":[{"param":"$blogname","desc":"The blog name provided by the user. Must be unique.","required":"yes"},{"param":"$blog_title","desc":"The blog title provided by the user.","required":"yes"},{"param":"$user","desc":" The user object to check against the new site name.","required":"no"}]},"wpmu_validate_user_signup":{"desc":"Sanitize and validate data required for a user sign-up.","params":[{"param":"$user_name","desc":"The login name provided by the user.","required":"yes"},{"param":"$user_email","desc":"The email provided by the user.","required":"yes"}]},"wpmu_welcome_notification":{"desc":"Notify a user that their blog activation has been successful.","params":[{"param":"$blog_id","desc":"","required":"yes"},{"param":"$user_id","desc":"","required":"yes"},{"param":"$password","desc":"","required":"yes"},{"param":"$title","desc":"The new blogs title","required":"yes"},{"param":"$meta","desc":" Not used in the default function, but is passed along to hooks for customization.","required":"no"}]},"wpmu_welcome_user_notification":{"desc":"Notify a user that their account activation has been successful.","params":[{"param":"$user_id","desc":"","required":"yes"},{"param":"$password","desc":"","required":"yes"},{"param":"$meta","desc":" Not used in the default function, but is passed along to hooks for customization.","required":"no"}]},"wptexturize":{"desc":"Replaces common plain text characters into formatted entities","params":[{"param":"$text","desc":"The text to be formatted","required":"yes"},{"param":"$reset","desc":"Set to true for unit testing. Translated patterns will reset.","required":"no"}]},"wptexturize_primes":{"desc":"Implements a logic tree to determine whether or not “7′.” represents seven feet, then converts the special char into either a prime char or a closing quote char.","params":[{"param":"$haystack","desc":"The plain text to be searched.","required":"yes"},{"param":"$needle","desc":"The character to search for such as or .","required":"yes"},{"param":"$prime","desc":"The prime char to use for replacement.","required":"yes"},{"param":"$open_quote","desc":"The opening quote char. Opening quote replacement must be accomplished already.","required":"yes"},{"param":"$close_quote","desc":"The closing quote char to use for replacement.","required":"yes"}]},"wpview_media_sandbox_styles":{"desc":"Returns the URLs for CSS files used in an iframe-sandbox’d TinyMCE media view.","params":[]},"wp_add_dashboard_widget":{"desc":"Adds a new dashboard widget.","params":[{"param":"$widget_id","desc":"Widget ID (used in the id attribute for the widget).","required":"yes"},{"param":"$widget_name","desc":"Title of the widget.","required":"yes"},{"param":"$callback","desc":"Function that fills the widget with the desired content. The function should echo its output.","required":"yes"},{"param":"$control_callback","desc":" Function that outputs controls for the widget. ","required":"no"},{"param":"$callback_args","desc":" Data that should be set as the $args property of the widget array (which is the second parameter passed to your callback). ","required":"no"}]},"wp_add_id3_tag_data":{"desc":"Parse ID3v2, ID3v1, and getID3 comments to extract usable data","params":[{"param":"$metadata","desc":"An existing array with data","required":"yes"},{"param":"$data","desc":"Data supplied by ID3 tags","required":"yes"}]},"wp_add_inline_script":{"desc":"Adds extra code to a registered script.","params":[{"param":"$handle","desc":"Name of the script to add the inline script to.","required":"yes"},{"param":"$data","desc":"String containing the javascript to be added.","required":"yes"},{"param":"$position","desc":" Whether to add the inline script before the handle or after. ","required":"no"}]},"wp_add_inline_style":{"desc":"Add extra CSS styles to a registered stylesheet.","params":[{"param":"$handle","desc":"Name of the stylesheet to add the extra styles to.","required":"yes"},{"param":"$data","desc":"String containing the CSS styles to be added.","required":"yes"}]},"wp_add_object_terms":{"desc":"Add term(s) associated with a given object.","params":[{"param":"$object_id","desc":"The ID of the object to which the terms will be added.","required":"yes"},{"param":"$terms","desc":"The slug(s) or ID(s) of the term(s) to add.","required":"yes"},{"param":"$taxonomy","desc":"Taxonomy name.","required":"yes"}]},"wp_add_post_tags":{"desc":"Add tags to a post.","params":[{"param":"$post_id","desc":" The Post ID. Does not default to the ID of the global $post.","required":"no"},{"param":"$tags","desc":" An array of tags to set for the post, or a string of tags separated by commas. ","required":"no"}]},"wp_add_trashed_suffix_to_post_name_for_post":{"desc":"Adds a trashed suffix for a given post.","params":[{"param":"$post","desc":"The post.","required":"yes"}]},"wp_add_trashed_suffix_to_post_name_for_trashed_posts":{"desc":"Adds a suffix if any trashed posts have a given slug.","params":[{"param":"$post_name","desc":"Slug.","required":"yes"},{"param":"$post_ID","desc":" Post ID that should be ignored. Default 0.","required":"no"}]},"wp_admin_bar_add_secondary_groups":{"desc":"Add secondary menus.","params":[{"param":"$wp_admin_bar","desc":"","required":"yes"}]},"wp_admin_bar_appearance_menu":{"desc":"Add appearance submenu items to the “Site Name” menu.","params":[{"param":"$wp_admin_bar","desc":"","required":"yes"}]},"wp_admin_bar_comments_menu":{"desc":"Add edit comments link with awaiting moderation count bubble.","params":[{"param":"$wp_admin_bar","desc":"","required":"yes"}]},"wp_admin_bar_customize_menu":{"desc":"Adds the “Customize” link to the Toolbar.","params":[{"param":"$wp_admin_bar","desc":"WP_Admin_Bar instance.","required":"yes"}]},"wp_admin_bar_dashboard_view_site_menu":{"desc":"Add the “Dashboard”/”Visit Site” menu.","params":[{"param":"$wp_admin_bar","desc":"WP_Admin_Bar instance.","required":"yes"}]},"wp_admin_bar_edit_menu":{"desc":"Provide an edit link for posts and terms.","params":[{"param":"$wp_admin_bar","desc":"","required":"yes"}]},"wp_admin_bar_header":{"desc":"Style and scripts for the admin bar.","params":[]},"wp_admin_bar_my_account_item":{"desc":"Add the “My Account” item.","params":[{"param":"$wp_admin_bar","desc":"","required":"yes"}]},"wp_admin_bar_my_account_menu":{"desc":"Add the “My Account” submenu items.","params":[{"param":"$wp_admin_bar","desc":"","required":"yes"}]},"wp_admin_bar_my_sites_menu":{"desc":"Add the “My Sites/[Site Name]” menu and all submenus.","params":[{"param":"$wp_admin_bar","desc":"","required":"yes"}]},"wp_admin_bar_new_content_menu":{"desc":"Add “Add New” menu.","params":[{"param":"$wp_admin_bar","desc":"","required":"yes"}]},"wp_admin_bar_render":{"desc":"Render the admin bar to the page based on the $wp_admin_bar->menu member var.","params":[]},"wp_admin_bar_search_menu":{"desc":"Add search form.","params":[{"param":"$wp_admin_bar","desc":"","required":"yes"}]},"wp_admin_bar_shortlink_menu":{"desc":"Provide a shortlink.","params":[{"param":"$wp_admin_bar","desc":"","required":"yes"}]},"wp_admin_bar_sidebar_toggle":{"desc":"Add the sidebar toggle button.","params":[{"param":"$wp_admin_bar","desc":"","required":"yes"}]},"wp_admin_bar_site_menu":{"desc":"Add the “Site Name” menu.","params":[{"param":"$wp_admin_bar","desc":"","required":"yes"}]},"wp_admin_bar_updates_menu":{"desc":"Provide an update link if theme/plugin/core updates are available.","params":[{"param":"$wp_admin_bar","desc":"","required":"yes"}]},"wp_admin_bar_wp_menu":{"desc":"Add the WordPress logo menu.","params":[{"param":"$wp_admin_bar","desc":"","required":"yes"}]},"wp_admin_canonical_url":{"desc":"Remove single-use URL parameters and create canonical link based on new URL.","params":[]},"wp_admin_css":{"desc":"Enqueues or directly prints a stylesheet link to the specified CSS file.","params":[{"param":"$file","desc":" Style handle name or file name (without .css extension) relative   to wp-admin/. Defaults to wp-admin.","required":"no"},{"param":"$force_echo","desc":" Force the stylesheet link to be printed rather than enqueued.","required":"no"}]},"wp_admin_css_color":{"desc":"Registers an admin colour scheme css file.","params":[{"param":"$key","desc":"The unique key for this theme.","required":"yes"},{"param":"$name","desc":"The name of the theme.","required":"yes"},{"param":"$url","desc":"The URL of the CSS file containing the color scheme.","required":"yes"},{"param":"$colors","desc":" An array of CSS color definition strings which are used to give the user a feel for the theme.","required":"no"},{"param":"$icons","desc":"CSS color definitions used to color any SVG icons. base(string) SVG icon base color. focus(string) SVG icon color on focus. current(string) SVG icon color of current admin menu link.  ","required":"no"}]},"wp_admin_css_uri":{"desc":"Displays the URL of a WordPress admin CSS file.","params":[{"param":"$file","desc":"file relative to wp-admin/ without its .css extension.","required":"no"}]},"wp_ajax_add_link_category":{"desc":"Ajax handler for adding a link category.","params":[{"param":"$action","desc":"Action to perform.","required":"yes"}]},"wp_ajax_add_menu_item":{"desc":"Ajax handler for adding a menu item.","params":[]},"wp_ajax_add_meta":{"desc":"Ajax handler for adding meta.","params":[]},"wp_ajax_add_tag":{"desc":"Ajax handler to add a tag.","params":[]},"wp_ajax_add_user":{"desc":"Ajax handler for adding a user.","params":[{"param":"$action","desc":"Action to perform.","required":"yes"}]},"wp_ajax_ajax_tag_search":{"desc":"Ajax handler for tag search.","params":[]},"wp_ajax_autocomplete_user":{"desc":"Ajax handler for user autocomplete.","params":[]},"wp_ajax_closed_postboxes":{"desc":"Ajax handler for closed post boxes.","params":[]},"wp_ajax_crop_image":{"desc":"AJAX handler for cropping an image.","params":[]},"wp_ajax_dashboard_widgets":{"desc":"Ajax handler for dashboard widgets.","params":[]},"wp_ajax_date_format":{"desc":"Ajax handler for date formatting.","params":[]},"wp_ajax_delete_comment":{"desc":"Ajax handler for deleting a comment.","params":[]},"wp_ajax_delete_inactive_widgets":{"desc":"Ajax handler for removing inactive widgets.","params":[]},"wp_ajax_delete_link":{"desc":"Ajax handler for deleting a link.","params":[]},"wp_ajax_delete_meta":{"desc":"Ajax handler for deleting meta.","params":[]},"wp_ajax_delete_page":{"desc":"","params":[{"param":"$action","desc":"","required":"yes"}]},"wp_ajax_delete_plugin":{"desc":"Ajax handler for deleting a plugin.","params":[]},"wp_ajax_delete_post":{"desc":"Ajax handler for deleting a post.","params":[{"param":"$action","desc":"Action to perform.","required":"yes"}]},"wp_ajax_delete_tag":{"desc":"Ajax handler for deleting a tag.","params":[]},"wp_ajax_delete_theme":{"desc":"Ajax handler for deleting a theme.","params":[]},"wp_ajax_destroy_sessions":{"desc":"AJAX handler for destroying multiple open sessions for a user.","params":[]},"wp_ajax_dim_comment":{"desc":"Ajax handler to dim a comment.","params":[]},"wp_ajax_dismiss_wp_pointer":{"desc":"Ajax handler for dismissing a WordPress pointer.","params":[]},"wp_ajax_edit_comment":{"desc":"Ajax handler for editing a comment.","params":[]},"wp_ajax_fetch_list":{"desc":"Ajax handler for fetching a list table.","params":[]},"wp_ajax_find_posts":{"desc":"Ajax handler for querying posts for the Find Posts modal.","params":[]},"wp_ajax_generate_password":{"desc":"Ajax handler for generating a password.","params":[]},"wp_ajax_get_attachment":{"desc":"Ajax handler for getting an attachment.","params":[]},"wp_ajax_get_comments":{"desc":"Ajax handler for getting comments.","params":[{"param":"$action","desc":"Action to perform.","required":"yes"}]},"wp_ajax_get_permalink":{"desc":"Ajax handler to retrieve a permalink.","params":[]},"wp_ajax_get_post_thumbnail_html":{"desc":"Ajax handler for retrieving HTML for the featured image.","params":[]},"wp_ajax_get_revision_diffs":{"desc":"Ajax handler for getting revision diffs.","params":[]},"wp_ajax_get_tagcloud":{"desc":"Ajax handler for getting a tagcloud.","params":[]},"wp_ajax_heartbeat":{"desc":"Ajax handler for the Heartbeat API.","params":[]},"wp_ajax_hidden_columns":{"desc":"Ajax handler for hidden columns.","params":[]},"wp_ajax_image_editor":{"desc":"Ajax handler for image editing.","params":[]},"wp_ajax_imgedit_preview":{"desc":"Ajax handler for image editor previews.","params":[]},"wp_ajax_inline_save":{"desc":"Ajax handler for Quick Edit saving a post from a list table.","params":[]},"wp_ajax_inline_save_tax":{"desc":"Ajax handler for quick edit saving for a term.","params":[]},"wp_ajax_install_plugin":{"desc":"Ajax handler for installing a plugin.","params":[]},"wp_ajax_install_theme":{"desc":"Ajax handler for installing a theme.","params":[]},"wp_ajax_logged_in":{"desc":"Ajax handler for Customizer preview logged-in status.","params":[]},"wp_ajax_menu_get_metabox":{"desc":"Ajax handler for retrieving menu meta boxes.","params":[]},"wp_ajax_menu_locations_save":{"desc":"Ajax handler for menu locations save.","params":[]},"wp_ajax_menu_quick_search":{"desc":"Ajax handler for menu quick searching.","params":[]},"wp_ajax_meta_box_order":{"desc":"Ajax handler for saving the meta box order.","params":[]},"wp_ajax_nopriv_heartbeat":{"desc":"Ajax handler for the Heartbeat API in the no-privilege context.","params":[]},"wp_ajax_oembed_cache":{"desc":"Ajax handler for oEmbed caching.","params":[]},"wp_ajax_parse_embed":{"desc":"Apply [embed] Ajax handlers to a string.","params":[]},"wp_ajax_parse_media_shortcode":{"desc":"","params":[]},"wp_ajax_press_this_add_category":{"desc":"Ajax handler for creating new category from Press This.","params":[]},"wp_ajax_press_this_save_post":{"desc":"Ajax handler for saving a post from Press This.","params":[]},"wp_ajax_query_attachments":{"desc":"Ajax handler for querying attachments.","params":[]},"wp_ajax_query_themes":{"desc":"Ajax handler for getting themes from themes_api().","params":[]},"wp_ajax_replyto_comment":{"desc":"Ajax handler for replying to a comment.","params":[{"param":"$action","desc":"Action to perform.","required":"yes"}]},"wp_ajax_sample_permalink":{"desc":"Ajax handler to retrieve a sample permalink.","params":[]},"wp_ajax_save_attachment":{"desc":"Ajax handler for updating attachment attributes.","params":[]},"wp_ajax_save_attachment_compat":{"desc":"Ajax handler for saving backwards compatible attachment attributes.","params":[]},"wp_ajax_save_attachment_order":{"desc":"Ajax handler for saving the attachment order.","params":[]},"wp_ajax_save_user_color_scheme":{"desc":"Ajax handler for auto-saving the selected color scheme for a user’s own profile.","params":[]},"wp_ajax_save_widget":{"desc":"Ajax handler for saving a widget.","params":[]},"wp_ajax_save_wporg_username":{"desc":"Ajax handler for saving the user’s WordPress.org username.","params":[]},"wp_ajax_search_install_plugins":{"desc":"Ajax handler for searching plugins to install.","params":[]},"wp_ajax_search_plugins":{"desc":"Ajax handler for searching plugins.","params":[]},"wp_ajax_send_attachment_to_editor":{"desc":"Ajax handler for sending an attachment to the editor.","params":[]},"wp_ajax_send_link_to_editor":{"desc":"Ajax handler for sending a link to the editor.","params":[]},"wp_ajax_set_attachment_thumbnail":{"desc":"Ajax handler for setting the featured image for an attachment.","params":[]},"wp_ajax_set_post_thumbnail":{"desc":"Ajax handler for setting the featured image.","params":[]},"wp_ajax_time_format":{"desc":"Ajax handler for time formatting.","params":[]},"wp_ajax_trash_post":{"desc":"Ajax handler for sending a post to the trash.","params":[{"param":"$action","desc":"Action to perform.","required":"yes"}]},"wp_ajax_untrash_post":{"desc":"Ajax handler to restore a post from the trash.","params":[{"param":"$action","desc":"Action to perform.","required":"yes"}]},"wp_ajax_update_plugin":{"desc":"Ajax handler for updating a plugin.","params":[]},"wp_ajax_update_theme":{"desc":"Ajax handler for updating a theme.","params":[]},"wp_ajax_update_welcome_panel":{"desc":"Ajax handler for updating whether to display the welcome panel.","params":[]},"wp_ajax_update_widget":{"desc":"Ajax handler for saving a widget.","params":[]},"wp_ajax_upload_attachment":{"desc":"Ajax handler for uploading attachments","params":[]},"wp_ajax_widgets_order":{"desc":"Ajax handler for saving the widgets order.","params":[]},"wp_ajax_wp_compression_test":{"desc":"Ajax handler for compression testing.","params":[]},"wp_ajax_wp_fullscreen_save_post":{"desc":"Ajax handler for saving posts from the fullscreen editor.","params":[]},"wp_ajax_wp_link_ajax":{"desc":"Ajax handler for internal linking.","params":[]},"wp_ajax_wp_remove_post_lock":{"desc":"Ajax handler for removing a post lock.","params":[]},"wp_allowed_protocols":{"desc":"Retrieve a list of protocols to allow in HTML attributes.","params":[]},"wp_allow_comment":{"desc":"Validates whether this comment is allowed to be made.","params":[{"param":"$commentdata","desc":"Contains information on the comment.","required":"yes"},{"param":"$avoid_die","desc":"When true, a disallowed comment will result in the function returning a WP_Error object, rather than executing wp_die(). ","required":"no"}]},"wp_array_slice_assoc":{"desc":"Extract a slice of an array, given a list of keys.","params":[{"param":"$array","desc":"The original array.","required":"yes"},{"param":"$keys","desc":"The list of keys.","required":"yes"}]},"wp_attachment_is":{"desc":"Verifies an attachment is of a given type.","params":[{"param":"$type","desc":"Attachment type. Accepts image, audio, or video.","required":"yes"},{"param":"$post","desc":" Attachment ID or object. Default is global $post.","required":"no"}]},"wp_attachment_is_image":{"desc":"Checks if the attachment is an image.","params":[{"param":"$post","desc":" Attachment ID or object. Default is global $post.","required":"no"}]},"wp_audio_shortcode":{"desc":"Builds the Audio shortcode output.","params":[{"param":"$attr","desc":"Attributes of the audio shortcode. src(string) URL to the source of the audio file. Default empty. loop(string) The loop attribute for the <audio> element. Default empty. autoplay(string) The autoplay attribute for the <audio> element. Default empty. preload(string) The preload attribute for the <audio> element. Default none. class(string) The class attribute for the <audio> element. Default wp-audio-shortcode. style(string) The style attribute for the <audio> element. Default width: 100%;.  ","required":"yes"},{"param":"$content","desc":"Shortcode content.","required":"no"}]},"wp_authenticate":{"desc":"Checks a user’s login information and logs them in if it checks out.","params":[{"param":"$username","desc":"Users username or email address.","required":"yes"},{"param":"$password","desc":"Users password.","required":"yes"}]},"wp_authenticate_cookie":{"desc":"Authenticate the user using the WordPress auth cookie.","params":[{"param":"$user","desc":"WP_User or WP_Error object from a previous callback. Default null.","required":"yes"},{"param":"$username","desc":"Username. If not empty, cancels the cookie authentication.","required":"yes"},{"param":"$password","desc":"Password. If not empty, cancels the cookie authentication.","required":"yes"}]},"wp_authenticate_email_password":{"desc":"Authenticates a user using the email and password.","params":[{"param":"$user","desc":"WP_User or WP_Error object if a previous callback failed authentication.","required":"yes"},{"param":"$email","desc":"Email address for authentication.","required":"yes"},{"param":"$password","desc":"Password for authentication.","required":"yes"}]},"wp_authenticate_spam_check":{"desc":"For Multisite blogs, check if the authenticated user has been marked as a spammer, or if the user’s primary blog has been marked as spam.","params":[{"param":"$user","desc":"WP_User or WP_Error object from a previous callback. Default null.","required":"yes"}]},"wp_authenticate_username_password":{"desc":"Authenticate a user, confirming the username and password are valid.","params":[{"param":"$user","desc":"WP_User or WP_Error object from a previous callback. Default null.","required":"yes"},{"param":"$username","desc":"Username for authentication.","required":"yes"},{"param":"$password","desc":"Password for authentication.","required":"yes"}]},"wp_auth_check":{"desc":"Check whether a user is still logged in, for the heartbeat.","params":[{"param":"$response","desc":"The Heartbeat response.","required":"yes"}]},"wp_auth_check_html":{"desc":"Output the HTML that shows the wp-login dialog when the user is no longer logged in.","params":[]},"wp_auth_check_load":{"desc":"Load the auth check for monitoring whether the user is still logged in.","params":[]},"wp_autosave":{"desc":"Save a post submitted with XHR","params":[{"param":"$post_data","desc":"Associative array of the submitted post data.","required":"yes"}]},"wp_basename":{"desc":"i18n friendly version of basename()","params":[{"param":"$path","desc":"A path.","required":"yes"},{"param":"$suffix","desc":"If the filename ends in suffix this will also be cut off.","required":"no"}]},"wp_blacklist_check":{"desc":"Does comment contain blacklisted characters or words.","params":[{"param":"$author","desc":"The author of the comment","required":"yes"},{"param":"$email","desc":"The email of the comment","required":"yes"},{"param":"$url","desc":"The url used in the comment","required":"yes"},{"param":"$comment","desc":"The comment content","required":"yes"},{"param":"$user_ip","desc":"The comment author IP address","required":"yes"},{"param":"$user_agent","desc":"The authors browser user agent","required":"yes"}]},"wp_cache_add":{"desc":"Adds data to the cache, if the cache key doesn’t already exist.","params":[{"param":"$key","desc":"The cache key to use for retrieval later.","required":"yes"},{"param":"$data","desc":"The data to add to the cache.","required":"yes"},{"param":"$group","desc":" The group to add the cache to. Enables the same key to be used across groups. ","required":"no"},{"param":"$expire","desc":" When the cache data should expire, in seconds. Default 0 (no expiration).","required":"no"}]},"wp_cache_add_global_groups":{"desc":"Adds a group or set of groups to the list of global groups.","params":[{"param":"$groups","desc":"A group or an array of groups to add.","required":"yes"}]},"wp_cache_add_non_persistent_groups":{"desc":"Adds a group or set of groups to the list of non-persistent groups.","params":[{"param":"$groups","desc":"A group or an array of groups to add.","required":"yes"}]},"wp_cache_close":{"desc":"Closes the cache.","params":[]},"wp_cache_decr":{"desc":"Decrements numeric cache item’s value.","params":[{"param":"$key","desc":"The cache key to decrement.","required":"yes"},{"param":"$offset","desc":" The amount by which to decrement the items value. ","required":"no"},{"param":"$group","desc":" The group the key is in. ","required":"no"}]},"wp_cache_delete":{"desc":"Removes the cache contents matching key and group.","params":[{"param":"$key","desc":"What the contents in the cache are called.","required":"yes"},{"param":"$group","desc":" Where the cache contents are grouped. ","required":"no"}]},"wp_cache_flush":{"desc":"Removes all cache items.","params":[]},"wp_cache_get":{"desc":"Retrieves the cache contents from the cache by key and group.","params":[{"param":"$key","desc":"The key under which the cache contents are stored.","required":"yes"},{"param":"$group","desc":" Where the cache contents are grouped. ","required":"no"},{"param":"$force","desc":" Whether to force an update of the local cache from the persistent cache. ","required":"no"},{"param":"$found","desc":" Whether the key was found in the cache. Disambiguates a return of false, a storable value. Passed by reference. ","required":"no"}]},"wp_cache_get_last_changed":{"desc":"Get last changed date for the specified cache group.","params":[{"param":"$group","desc":"Where the cache contents are grouped.","required":"yes"}]},"wp_cache_incr":{"desc":"Increment numeric cache item’s value","params":[{"param":"$key","desc":"The key for the cache contents that should be incremented.","required":"yes"},{"param":"$offset","desc":" The amount by which to increment the items value. ","required":"no"},{"param":"$group","desc":" The group the key is in. ","required":"no"}]},"wp_cache_init":{"desc":"Sets up Object Cache Global and assigns it.","params":[]},"wp_cache_replace":{"desc":"Replaces the contents of the cache with new data.","params":[{"param":"$key","desc":"The key for the cache data that should be replaced.","required":"yes"},{"param":"$data","desc":"The new data to store in the cache.","required":"yes"},{"param":"$group","desc":" The group for the cache data that should be replaced. ","required":"no"},{"param":"$expire","desc":" When to expire the cache contents, in seconds. Default 0 (no expiration).","required":"no"}]},"wp_cache_reset":{"desc":"Reset internal cache keys and structures.","params":[]},"wp_cache_set":{"desc":"Saves the data to the cache.","params":[{"param":"$key","desc":"The cache key to use for retrieval later.","required":"yes"},{"param":"$data","desc":"The contents to store in the cache.","required":"yes"},{"param":"$group","desc":" Where to group the cache contents. Enables the same key to be used across groups. ","required":"no"},{"param":"$expire","desc":" When to expire the cache contents, in seconds. Default 0 (no expiration).","required":"no"}]},"wp_cache_switch_to_blog":{"desc":"Switches the internal blog ID.","params":[{"param":"$blog_id","desc":"Site ID.","required":"yes"}]},"wp_calculate_image_sizes":{"desc":"Creates a ‘sizes’ attribute value for an image.","params":[{"param":"$size","desc":"Image size to retrieve. Accepts any valid image size, or an array of width and height values in pixels (in that order). Default medium.","required":"yes"},{"param":"$image_src","desc":" The URL to the image file. ","required":"no"},{"param":"$image_meta","desc":" The image meta data as returned by wp_get_attachment_metadata(). ","required":"no"},{"param":"$attachment_id","desc":" Image attachment ID. Either $image_meta or $attachment_id is needed when using the image size name as argument for $size. Default 0.","required":"no"}]},"wp_calculate_image_srcset":{"desc":"A helper function to calculate the image sources to include in a ‘srcset’ attribute.","params":[{"param":"$size_array","desc":"Array of width and height values in pixels (in that order).","required":"yes"},{"param":"$image_src","desc":"The src of the image.","required":"yes"},{"param":"$image_meta","desc":"The image meta data as returned by wp_get_attachment_metadata().","required":"yes"},{"param":"$attachment_id","desc":" The image attachment ID to pass to the filter. Default 0.","required":"no"}]},"wp_can_install_language_pack":{"desc":"Check if WordPress has access to the filesystem without asking for credentials.","params":[]},"wp_caption_input_textarea":{"desc":"Output a textarea element for inputting an attachment caption.","params":[{"param":"$edit_post","desc":"Attachment WP_Post object.","required":"yes"}]},"wp_category_checklist":{"desc":"Output an unordered list of checkbox input elements labeled with category names.","params":[{"param":"$post_id","desc":" Post to generate a categories checklist for. Default 0. $selected_cats must not be an array. Default 0.","required":"no"},{"param":"$descendants_and_self","desc":" ID of the category to output along with its descendants. Default 0.","required":"no"},{"param":"$selected_cats","desc":" List of categories to mark as checked. ","required":"no"},{"param":"$popular_cats","desc":" List of categories to receive the popular-category class. ","required":"no"},{"param":"$walker","desc":" Walker object to use to build the output. Default is a Walker_Category_Checklist instance.","required":"no"},{"param":"$checked_ontop","desc":" Whether to move checked items out of the hierarchy and to the top of the list. ","required":"no"}]},"wp_checkdate":{"desc":"Test if the supplied date is valid for the Gregorian calendar.","params":[{"param":"$month","desc":"Month number.","required":"yes"},{"param":"$day","desc":"Day number.","required":"yes"},{"param":"$year","desc":"Year number.","required":"yes"},{"param":"$source_date","desc":"The date to filter.","required":"yes"}]},"wp_check_browser_version":{"desc":"Check if the user needs a browser update","params":[]},"wp_check_comment_data_max_lengths":{"desc":"Compares the lengths of comment data against the maximum character limits.","params":[{"param":"$comment_data","desc":"Array of arguments for inserting a comment.","required":"yes"}]},"wp_check_comment_flood":{"desc":"Checks whether comment flooding is occurring.","params":[{"param":"$is_flood","desc":"Is a comment flooding occurring?","required":"yes"},{"param":"$ip","desc":"Comment IP.","required":"yes"},{"param":"$email","desc":"Comment author email address.","required":"yes"},{"param":"$date","desc":"MySQL time string.","required":"yes"},{"param":"$avoid_die","desc":"When true, a disallowed comment will result in the function returning a WP_Error object, rather than executing wp_die(). ","required":"no"}]},"wp_check_filetype":{"desc":"Retrieve the file type from the file name.","params":[{"param":"$filename","desc":"File name or path.","required":"yes"},{"param":"$mimes","desc":" Key is the file extension with value as the mime type.","required":"no"}]},"wp_check_filetype_and_ext":{"desc":"Attempt to determine the real file type of a file.","params":[{"param":"$file","desc":"Full path to the file.","required":"yes"},{"param":"$filename","desc":"The name of the file (may differ from $file due to $file being in a tmp directory).","required":"yes"},{"param":"$mimes","desc":" Key is the file extension with value as the mime type.","required":"no"}]},"wp_check_for_changed_slugs":{"desc":"Check for changed slugs for published post objects and save the old slug.","params":[{"param":"$post_id","desc":"Post ID.","required":"yes"},{"param":"$post","desc":"The Post Object","required":"yes"},{"param":"$post_before","desc":"The Previous Post Object","required":"yes"}]},"wp_check_invalid_utf8":{"desc":"Checks for invalid UTF8 in a string.","params":[{"param":"$string","desc":"The text which is to be checked.","required":"yes"},{"param":"$strip","desc":" Whether to attempt to strip out invalid UTF8. Default is false.","required":"no"}]},"wp_check_jsonp_callback":{"desc":"Checks that a JSONP callback is a valid JavaScript callback.","params":[{"param":"$callback","desc":"Supplied JSONP callback function.","required":"yes"}]},"wp_check_locked_posts":{"desc":"Check lock status for posts displayed on the Posts screen","params":[{"param":"$response","desc":"The Heartbeat response.","required":"yes"},{"param":"$data","desc":"The $_POST data sent.","required":"yes"},{"param":"$screen_id","desc":"The screen id.","required":"yes"}]},"wp_check_mysql_version":{"desc":"Checks the version of the installed MySQL binary.","params":[]},"wp_check_password":{"desc":"Checks the plaintext password against the encrypted Password.","params":[{"param":"$password","desc":"Plaintext users password","required":"yes"},{"param":"$hash","desc":"Hash of the users password to check against.","required":"yes"},{"param":"$user_id","desc":" User ID.","required":"no"}]},"wp_check_php_mysql_versions":{"desc":"Check for the required PHP version, and the MySQL extension or a database drop-in.","params":[]},"wp_check_post_hierarchy_for_loops":{"desc":"Check the given subset of the post hierarchy for hierarchy loops.","params":[{"param":"$post_parent","desc":"ID of the parent for the post were checking.","required":"yes"},{"param":"$post_ID","desc":"ID of the post were checking.","required":"yes"}]},"wp_check_post_lock":{"desc":"Check to see if the post is currently being edited by another user.","params":[{"param":"$post_id","desc":"ID of the post to check for editing","required":"yes"}]},"wp_check_term_hierarchy_for_loops":{"desc":"Checks the given subset of the term hierarchy for hierarchy loops.","params":[{"param":"$parent","desc":"term_id of the parent for the term were checking.","required":"yes"},{"param":"$term_id","desc":"The term were checking.","required":"yes"},{"param":"$taxonomy","desc":"The taxonomy of the term were checking.","required":"yes"}]},"wp_clean_plugins_cache":{"desc":"Clears the Plugins cache used by get_plugins() and by default, the Plugin Update cache.","params":[{"param":"$clear_update_cache","desc":"Whether to clear the Plugin updates cache","required":"no"}]},"wp_clean_themes_cache":{"desc":"Clears the cache held by get_theme_roots() and WP_Theme.","params":[{"param":"$clear_update_cache","desc":"Whether to clear the Theme updates cache","required":"no"}]},"wp_clean_update_cache":{"desc":"Clear existing update caches for plugins, themes, and core.","params":[]},"wp_clearcookie":{"desc":"Clears the authentication cookie, logging the user out. This function is deprecated.","params":[]},"wp_clear_auth_cookie":{"desc":"Removes all of the cookies associated with authentication.","params":[]},"wp_clear_scheduled_hook":{"desc":"Unschedule all cron jobs attached to a specific hook.","params":[{"param":"$hook","desc":"Action hook, the execution of which will be unscheduled.","required":"yes"},{"param":"$args","desc":" Arguments that were to be passed to the hooks callback function.","required":"no"}]},"wp_clone":{"desc":"Copy an object.","params":[{"param":"$object","desc":"The object to clone.","required":"yes"}]},"wp_color_scheme_settings":{"desc":"","params":[]},"wp_comment_form_unfiltered_html_nonce":{"desc":"Display form token for unfiltered comments.","params":[]},"wp_comment_reply":{"desc":"Outputs the in-line comment reply-to form in the Comments list table.","params":[{"param":"$position","desc":"","required":"no"},{"param":"$checkbox","desc":"","required":"no"},{"param":"$mode","desc":"","required":"no"},{"param":"$table_row","desc":"","required":"no"}]},"wp_comment_trashnotice":{"desc":"Output ‘undo move to trash’ text for comments","params":[]},"wp_constrain_dimensions":{"desc":"Calculates the new dimensions for a down-sampled image.","params":[{"param":"$current_width","desc":"Current width of the image.","required":"yes"},{"param":"$current_height","desc":"Current height of the image.","required":"yes"},{"param":"$max_width","desc":" Max width in pixels to constrain to. Default 0.","required":"no"},{"param":"$max_height","desc":" Max height in pixels to constrain to. Default 0.","required":"no"}]},"wp_convert_bytes_to_hr":{"desc":"Converts an integer byte value to a shorthand byte value.","params":[{"param":"$bytes","desc":"An integer byte value.","required":"yes"}]},"wp_convert_hr_to_bytes":{"desc":"Converts a shorthand byte value to an integer byte value.","params":[{"param":"$value","desc":"A (PHP ini) byte value, either shorthand or ordinary.","required":"yes"}]},"wp_convert_widget_settings":{"desc":"Convert the widget settings from single to multi-widget format.","params":[{"param":"$base_name","desc":"","required":"yes"},{"param":"$option_name","desc":"","required":"yes"},{"param":"$settings","desc":"","required":"yes"}]},"wp_cookie_constants":{"desc":"Defines cookie related WordPress constants","params":[]},"wp_count_attachments":{"desc":"Count number of attachments for the mime type(s).","params":[{"param":"$mime_type","desc":" Array or comma-separated list of MIME patterns. ","required":"no"}]},"wp_count_comments":{"desc":"Retrieve total comments for blog or single post.","params":[{"param":"$post_id","desc":" Post ID.","required":"no"}]},"wp_count_posts":{"desc":"Count number of posts of a post type and if user has permissions to view.","params":[{"param":"$type","desc":" Post type to retrieve count. ","required":"no"},{"param":"$perm","desc":" readable or empty. ","required":"no"}]},"wp_count_terms":{"desc":"Count how many terms are in Taxonomy.","params":[{"param":"$taxonomy","desc":"Taxonomy name.","required":"yes"},{"param":"$args","desc":" Array of arguments that get passed to get_terms(). ","required":"no"}]},"wp_create_categories":{"desc":"Create categories for the given post.","params":[{"param":"$categories","desc":"List of categories to create.","required":"yes"},{"param":"$post_id","desc":" The post ID. ","required":"no"}]},"wp_create_category":{"desc":"Add a new category to the database if it does not already exist.","params":[{"param":"$cat_name","desc":"","required":"yes"},{"param":"$parent","desc":"","required":"yes"}]},"wp_create_nav_menu":{"desc":"Creates a navigation menu.","params":[{"param":"$menu_name","desc":"Menu name.","required":"yes"}]},"wp_create_nonce":{"desc":"Creates a cryptographic token tied to a specific action, user, user session, and window of time.","params":[{"param":"$action","desc":"Scalar value to add context to the nonce.","required":"no"}]},"wp_create_post_autosave":{"desc":"Creates autosave data for the specified post from $_POST data.","params":[{"param":"$post_data","desc":"Associative array containing the post data or int post ID.","required":"yes"}]},"wp_create_tag":{"desc":"Add a new tag to the database if it does not already exist.","params":[{"param":"$tag_name","desc":"","required":"yes"}]},"wp_create_term":{"desc":"Add a new term to the database if it does not already exist.","params":[{"param":"$tag_name","desc":"","required":"yes"},{"param":"$taxonomy","desc":" The taxonomy for which to retrieve terms. ","required":"no"}]},"wp_create_thumbnail":{"desc":"This was once used to create a thumbnail from an Image given a maximum side size.","params":[{"param":"$file","desc":"Filename of the original image, Or attachment id.","required":"yes"},{"param":"$max_side","desc":"Maximum length of a single side for the thumbnail.","required":"yes"},{"param":"$deprecated","desc":"Never used.","required":"no"}]},"wp_create_user":{"desc":"A simpler way of inserting a user into the database.","params":[{"param":"$username","desc":"The users username.","required":"yes"},{"param":"$password","desc":"The users password.","required":"yes"},{"param":"$email","desc":" The users email. ","required":"no"}]},"wp_credits":{"desc":"Retrieve the contributor credits.","params":[]},"wp_cron":{"desc":"Run scheduled callbacks or spawn cron for all scheduled events.","params":[]},"wp_crop_image":{"desc":"Crop an Image to a given size.","params":[{"param":"$src","desc":"The source file or Attachment ID.","required":"yes"},{"param":"$src_x","desc":"The start x position to crop from.","required":"yes"},{"param":"$src_y","desc":"The start y position to crop from.","required":"yes"},{"param":"$src_w","desc":"The width to crop.","required":"yes"},{"param":"$src_h","desc":"The height to crop.","required":"yes"},{"param":"$dst_w","desc":"The destination width.","required":"yes"},{"param":"$dst_h","desc":"The destination height.","required":"yes"},{"param":"$src_abs","desc":" If the source crop points are absolute.","required":"no"},{"param":"$dst_file","desc":" The destination file to write to.","required":"no"}]},"wp_customize_support_script":{"desc":"Prints a script to check whether or not the Customizer is supported, and apply either the no-customize-support or customize-support class to the body.","params":[]},"wp_customize_url":{"desc":"Returns a URL to load the Customizer.","params":[{"param":"$stylesheet","desc":" Theme to customize. Defaults to current theme.   The themes stylesheet will be urlencoded if necessary.","required":"no"}]},"wp_custom_css_cb":{"desc":"Render the Custom CSS style element.","params":[]},"wp_dashboard":{"desc":"Displays the dashboard.","params":[]},"wp_dashboard_browser_nag":{"desc":"","params":[]},"wp_dashboard_cached_rss_widget":{"desc":"Checks to see if all of the feed url in $check_urls are cached.","params":[{"param":"$widget_id","desc":"","required":"yes"},{"param":"$callback","desc":"","required":"yes"},{"param":"$check_urls","desc":"RSS feeds","required":"no"}]},"wp_dashboard_empty":{"desc":"Empty function usable by plugins to output empty dashboard widget (to be populated later by JS).","params":[]},"wp_dashboard_incoming_links":{"desc":"Deprecated dashboard widget controls.","params":[]},"wp_dashboard_incoming_links_control":{"desc":"Deprecated dashboard incoming links control.","params":[]},"wp_dashboard_incoming_links_output":{"desc":"Deprecated dashboard widget controls.","params":[]},"wp_dashboard_plugins":{"desc":"Deprecated dashboard plugins control.","params":[]},"wp_dashboard_plugins_output":{"desc":"Display plugins text for the WordPress news widget.","params":[{"param":"$rss","desc":"The RSS feed URL.","required":"yes"},{"param":"$args","desc":"Array of arguments for this RSS feed.","required":"no"}]},"wp_dashboard_primary":{"desc":"WordPress News dashboard widget.","params":[]},"wp_dashboard_primary_control":{"desc":"Deprecated dashboard primary control.","params":[]},"wp_dashboard_primary_output":{"desc":"Display the WordPress news feeds.","params":[{"param":"$widget_id","desc":"Widget ID.","required":"yes"},{"param":"$feeds","desc":"Array of RSS feeds.","required":"yes"}]},"wp_dashboard_quick_press":{"desc":"The Quick Draft widget display and creation of drafts.","params":[{"param":"$error_msg","desc":" Error message. ","required":"no"}]},"wp_dashboard_quick_press_output":{"desc":"Output the QuickPress dashboard widget.","params":[]},"wp_dashboard_quota":{"desc":"Display file upload quota on dashboard.","params":[]},"wp_dashboard_recent_comments":{"desc":"Show Comments section.","params":[{"param":"$total_items","desc":" Number of comments to query. ","required":"no"}]},"wp_dashboard_recent_comments_control":{"desc":"Deprecated dashboard recent comments control.","params":[]},"wp_dashboard_recent_drafts":{"desc":"Show recent drafts of the user on the dashboard.","params":[{"param":"$drafts","desc":"","required":"no"}]},"wp_dashboard_recent_posts":{"desc":"Generates Publishing Soon and Recently Published sections.","params":[{"param":"$args","desc":"An array of query and display arguments. max(int) Number of posts to display. status(string) Post status. order(string) Designates ascending (ASC) or descending (DESC) order. title(string) Section title. id(string) The container id.  ","required":"yes"}]},"wp_dashboard_right_now":{"desc":"Dashboard widget that displays some basic stats about the site.","params":[]},"wp_dashboard_rss_control":{"desc":"The RSS dashboard widget control.","params":[{"param":"$widget_id","desc":"","required":"yes"},{"param":"$form_inputs","desc":"","required":"no"}]},"wp_dashboard_rss_output":{"desc":"Display generic dashboard RSS widget feed.","params":[{"param":"$widget_id","desc":"","required":"yes"}]},"wp_dashboard_secondary":{"desc":"Deprecated dashboard secondary section.","params":[]},"wp_dashboard_secondary_control":{"desc":"Deprecated dashboard secondary control.","params":[]},"wp_dashboard_secondary_output":{"desc":"Deprecated dashboard secondary output.","params":[]},"wp_dashboard_setup":{"desc":"Registers dashboard widgets.","params":[]},"wp_dashboard_site_activity":{"desc":"Callback function for Activity widget.","params":[]},"wp_dashboard_trigger_widget_control":{"desc":"Calls widget control callback.","params":[{"param":"$widget_control_id","desc":"Registered Widget ID.","required":"no"}]},"wp_debug_backtrace_summary":{"desc":"Return a comma-separated string of functions that have been called to get to the current point in code.","params":[{"param":"$ignore_class","desc":" A class to ignore all function calls within - useful when you want to just give info about the callee. ","required":"no"},{"param":"$skip_frames","desc":" A number of stack frames to skip - useful for unwinding back to the source of the issue. Default 0.","required":"no"},{"param":"$pretty","desc":" Whether or not you want a comma separated string or raw array returned. ","required":"no"}]},"wp_debug_mode":{"desc":"Set PHP error reporting based on WordPress debug settings.","params":[]},"wp_default_editor":{"desc":"Find out which editor should be displayed by default.","params":[]},"wp_default_scripts":{"desc":"Register all WordPress scripts.","params":[{"param":"$scripts","desc":"WP_Scripts object.","required":"yes"}]},"wp_default_styles":{"desc":"Assign default styles to $styles object.","params":[{"param":"$styles","desc":"","required":"yes"}]},"wp_defer_comment_counting":{"desc":"Whether to defer comment counting.","params":[{"param":"$defer","desc":"","required":"no"}]},"wp_defer_term_counting":{"desc":"Enable or disable term counting.","params":[{"param":"$defer","desc":" Enable if true, disable if false.","required":"no"}]},"wp_delete_attachment":{"desc":"Trash or delete an attachment.","params":[{"param":"$post_id","desc":"Attachment ID.","required":"yes"},{"param":"$force_delete","desc":" Whether to bypass trash and force deletion. ","required":"no"}]},"wp_delete_auto_drafts":{"desc":"Delete auto-drafts for new posts that are > 7 days old.","params":[]},"wp_delete_category":{"desc":"Deletes one existing category.","params":[{"param":"$cat_ID","desc":"","required":"yes"}]},"wp_delete_comment":{"desc":"Trashes or deletes a comment.","params":[{"param":"$comment_id","desc":"Comment ID or WP_Comment object.","required":"yes"},{"param":"$force_delete","desc":"Whether to bypass trash and force deletion. Default is false.","required":"no"}]},"wp_delete_file":{"desc":"Delete a file","params":[{"param":"$file","desc":"The path to the file to delete.","required":"yes"}]},"wp_delete_link":{"desc":"Deletes a specified link from the database.","params":[{"param":"$link_id","desc":"ID of the link to delete","required":"yes"}]},"wp_delete_nav_menu":{"desc":"Delete a Navigation Menu.","params":[{"param":"$menu","desc":"Menu ID, slug, or name.","required":"yes"}]},"wp_delete_object_term_relationships":{"desc":"Will unlink the object from the taxonomy or taxonomies.","params":[{"param":"$object_id","desc":"The term Object Id that refers to the term.","required":"yes"},{"param":"$taxonomies","desc":"List of Taxonomy Names or single Taxonomy name.","required":"yes"}]},"wp_delete_post":{"desc":"Trash or delete a post or page.","params":[{"param":"$postid","desc":" Post ID. Default 0.","required":"no"},{"param":"$force_delete","desc":" Whether to bypass trash and force deletion. ","required":"no"}]},"wp_delete_post_revision":{"desc":"Deletes a revision.","params":[{"param":"$revision_id","desc":"Revision ID or revision object.","required":"yes"}]},"wp_delete_term":{"desc":"Removes a term from the database.","params":[{"param":"$term","desc":"Term ID.","required":"yes"},{"param":"$taxonomy","desc":"Taxonomy Name.","required":"yes"},{"param":"$args","desc":"Array of arguments to override the default term ID. default(int) The term ID to make the default term. This will only override the terms found if there is only one term found. Any other and the found terms are used. force_default(bool) Optional. Whether to force the supplied term as default to be assigned even if the object was not going to be term-less. Default false.  ","required":"no"}]},"wp_delete_user":{"desc":"Remove user and optionally reassign posts and links to another user.","params":[{"param":"$id","desc":"User ID.","required":"yes"},{"param":"$reassign","desc":" Reassign posts and links to new User ID.","required":"no"}]},"wp_dependencies_unique_hosts":{"desc":"Retrieves a list of unique hosts of all enqueued scripts and styles.","params":[]},"wp_dequeue_script":{"desc":"Remove a previously enqueued script.","params":[{"param":"$handle","desc":"Name of the script to be removed.","required":"yes"}]},"wp_dequeue_style":{"desc":"Remove a previously enqueued CSS stylesheet.","params":[{"param":"$handle","desc":"Name of the stylesheet to be removed.","required":"yes"}]},"wp_deregister_script":{"desc":"Remove a registered script.","params":[{"param":"$handle","desc":"Name of the script to be removed.","required":"yes"}]},"wp_deregister_style":{"desc":"Remove a registered stylesheet.","params":[{"param":"$handle","desc":"Name of the stylesheet to be removed.","required":"yes"}]},"wp_destroy_all_sessions":{"desc":"Remove all session tokens for the current user from the database.","params":[]},"wp_destroy_current_session":{"desc":"Remove the current session token from the database.","params":[]},"wp_destroy_other_sessions":{"desc":"Remove all but the current session token for the current user for the database.","params":[]},"wp_die":{"desc":"Kill WordPress execution and display HTML message with error message.","params":[{"param":"$message","desc":" Error message. If this is a WP_Error object, and not an Ajax or XML-RPC request, the errors messages are used. ","required":"no"},{"param":"$title","desc":" Error title. If $message is a WP_Error object, error data with the key title may be used to specify the title. If $title is an integer, then it is treated as the response code. ","required":"no"},{"param":"$args","desc":"Arguments to control behavior. If $args is an integer, then it is treated as the response code. response(int) The HTTP response code. Default 200 for Ajax requests, 500 otherwise. back_link(bool) Whether to include a link to go back. Default false. text_direction(string) The text direction. This is only useful internally, when WordPress is still loading and the sites locale is not set up yet. Accepts rtl. Default is the value of is_rtl().  ","required":"no"}]},"wp_doc_link_parse":{"desc":"","params":[{"param":"$content","desc":"","required":"yes"}]},"wp_doing_ajax":{"desc":"Determines whether the current request is a WordPress Ajax request.","params":[]},"wp_download_language_pack":{"desc":"Download a language pack.","params":[{"param":"$download","desc":"Language code to download.","required":"yes"}]},"wp_dropdown_categories":{"desc":"Display or retrieve the HTML dropdown list of categories.","params":[{"param":"$args","desc":"Array or string of arguments to generate a categories drop-down element. show_option_all(string) Text to display for showing all categories.  show_option_none(string) Text to display for showing no categories.  option_none_value(string) Value to use when no category is selected.  orderby(string) Which column to use for ordering categories. See get_terms() for a list of accepted values. Default id (term_id). order(string) Whether to order terms in ascending or descending order. Accepts ASC or DESC. Default ASC. pad_counts(bool) See get_terms() for an argument description. Default false. show_count(bool|int) Whether to include post counts. Accepts 0, 1, or their bool equivalents. Default 0. hide_empty(bool|int) Whether to hide categories that dont have any posts. Accepts 0, 1, or their bool equivalents. Default 1. child_of(int) Term ID to retrieve child terms of. See get_terms(). Default 0. exclude(array|string) Array or comma/space-separated string of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. echo(bool|int) Whether to echo or return the generated markup. Accepts 0, 1, or their bool equivalents. Default 1. hierarchical(bool|int) Whether to traverse the taxonomy hierarchy. Accepts 0, 1, or their bool equivalents. Default 0. depth(int) Maximum depth. Default 0. tab_index(int) Tab index for the select element. Default 0 (no tabindex). name(string) Value for the name attribute of the select element. Default cat. id(string) Value for the id attribute of the select element. Defaults to the value of $name. class(string) Value for the class attribute of the select element. Default postform. selected(int|string) Value of the option that should be selected. Default 0. value_field(string) Term field that should be used to populate the value attribute of the option elements. Accepts any valid term field: term_id, name, slug, term_group, term_taxonomy_id, taxonomy, description, parent, count. Default term_id. taxonomy(string|array) Name of the category or categories to retrieve. Default category. hide_if_empty(bool) True to skip generating markup if no categories are found. Default false (create select element even if no categories are found). required(bool) Whether the <select> element should have the HTML5 required attribute. Default false.  ","required":"no"}]},"wp_dropdown_cats":{"desc":"Legacy function used for generating a categories drop-down control.","params":[{"param":"$currentcat","desc":" ID of the current category. Default 0.","required":"no"},{"param":"$currentparent","desc":" Current parent category ID. Default 0.","required":"no"},{"param":"$parent","desc":" Parent ID to retrieve categories for. Default 0.","required":"no"},{"param":"$level","desc":" Number of levels deep to display. Default 0.","required":"no"},{"param":"$categories","desc":" Categories to include in the control. Default 0.","required":"no"}]},"wp_dropdown_languages":{"desc":"Language selector.","params":[{"param":"$args","desc":"Array or string of arguments for outputting the language selector. id(string) ID attribute of the select element.  name(string) Name attribute of the select element.  languages(array) List of installed languages, contain only the locales.  translations(array) List of available translations. Default result of wp_get_available_translations(). selected(string) Language which should be selected.  echo(bool|int) Whether to echo the generated markup. Accepts 0, 1, or their boolean equivalents. Default 1. show_available_translations(bool) Whether to show available translations. Default true. show_option_site_default(bool) Whether to show an option to fall back to the sites locale. Default false.  ","required":"no"}]},"wp_dropdown_pages":{"desc":"Retrieve or display list of pages as a dropdown (select list).","params":[{"param":"$args","desc":"Array or string of arguments to generate a pages drop-down element. depth(int) Maximum depth. Default 0. child_of(int) Page ID to retrieve child pages of. Default 0. selected(int|string) Value of the option that should be selected. Default 0. echo(bool|int) Whether to echo or return the generated markup. Accepts 0, 1, or their bool equivalents. Default 1. name(string) Value for the name attribute of the select element. Default page_id. id(string) Value for the id attribute of the select element. class(string) Value for the class attribute of the select element. Default: none. Defaults to the value of $name. show_option_none(string) Text to display for showing no pages. Default empty (does not display). show_option_no_change(string) Text to display for no change option. Default empty (does not display). option_none_value(string) Value to use when no page is selected.  value_field(string) Post field used to populate the value attribute of the option elements. Accepts any valid post field. Default ID.  ","required":"no"}]},"wp_dropdown_roles":{"desc":"Print out option html elements for role selectors.","params":[{"param":"$selected","desc":"Slug for the role that should be already selected.","required":"no"}]},"wp_dropdown_users":{"desc":"Create dropdown HTML content of users.","params":[{"param":"$args","desc":"Array or string of arguments to generate a drop-down of users. See WP_User_Query::prepare_query() for additional available arguments. show_option_all(string) Text to show as the drop-down default (all).  show_option_none(string) Text to show as the drop-down default when no users were found.  option_none_value(int|string) Value to use for $show_option_non when no users were found. Default -1. hide_if_only_one_author(string) Whether to skip generating the drop-down if only one user was found.  orderby(string) Field to order found users by. Accepts user fields. Default display_name. order(string) Whether to order users in ascending or descending order. Accepts ASC (ascending) or DESC (descending). Default ASC. include(array|string) Array or comma-separated list of user IDs to include.  exclude(array|string) Array or comma-separated list of user IDs to exclude.  multi(bool|int) Whether to skip the ID attribute on the select element. Accepts 1|true or 0|false. Default 0|false. show(string) User data to display. If the selected item is empty then the user_login will be displayed in parentheses. Accepts any user field, or display_name_with_login to show the display name with user_login in parentheses. Default display_name. echo(int|bool) Whether to echo or return the drop-down. Accepts 1|true (echo) or 0|false (return). Default 1|true. selected(int) Which user ID should be selected. Default 0. include_selected(bool) Whether to always include the selected user ID in the drop- down. Default false. name(string) Name attribute of select element. Default user. id(string) ID attribute of the select element. Default is the value of $name. class(string) Class attribute of the select element.  blog_id(int) ID of blog (Multisite only). Default is ID of the current blog. who(string) Which type of users to query. Accepts only an empty string or authors.  role(string|array) An array or a comma-separated list of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role.  role__in(array) An array of role names. Matched users must have at least one of these roles. Default empty array. role__not_in(array) An array of role names to exclude. Users matching one or more of these roles will not be included in results. Default empty array.  ","required":"no"}]},"wp_editor":{"desc":"Renders an editor.","params":[{"param":"$content","desc":"Initial content for the editor.","required":"yes"},{"param":"$editor_id","desc":"HTML ID attribute value for the textarea and TinyMCE. Can only be /[a-z]+/.","required":"yes"},{"param":"$settings","desc":"See _WP_Editors::editor().","required":"no"}]},"wp_edit_attachments_query":{"desc":"Executes a query for attachments. An array of WP_Query arguments can be passed in, which will override the arguments set by this function.","params":[{"param":"$q","desc":"Array of query variables to use to build the query or false to use $_GET superglobal.","required":"no"}]},"wp_edit_attachments_query_vars":{"desc":"Get the query variables for the current attachments request.","params":[{"param":"$q","desc":" Array of query variables to use to build the query or false to use $_GET superglobal. ","required":"no"}]},"wp_edit_posts_query":{"desc":"Run the wp query to fetch the posts for listing on the edit posts page","params":[{"param":"$q","desc":"Array of query variables to use to build the query or false to use $_GET superglobal.","required":"no"}]},"wp_embed_defaults":{"desc":"Creates default array of embed parameters.","params":[{"param":"$url","desc":" The URL that should be embedded. ","required":"no"}]},"wp_embed_excerpt_attachment":{"desc":"Filters the post excerpt for the embed template.","params":[{"param":"$content","desc":"The current post excerpt.","required":"yes"}]},"wp_embed_excerpt_more":{"desc":"Filters the string in the ‘more’ link displayed after a trimmed excerpt.","params":[{"param":"$more_string","desc":"Default more string.","required":"yes"}]},"wp_embed_handler_audio":{"desc":"Audio embed handler callback.","params":[{"param":"$matches","desc":"The RegEx matches from the provided regex when calling wp_embed_register_handler().","required":"yes"},{"param":"$attr","desc":"Embed attributes.","required":"yes"},{"param":"$url","desc":"The original URL that was matched by the regex.","required":"yes"},{"param":"$rawattr","desc":"The original unmodified attributes.","required":"yes"}]},"wp_embed_handler_googlevideo":{"desc":"The Google Video embed handler callback.","params":[]},"wp_embed_handler_video":{"desc":"Video embed handler callback.","params":[{"param":"$matches","desc":"The RegEx matches from the provided regex when calling wp_embed_register_handler().","required":"yes"},{"param":"$attr","desc":"Embed attributes.","required":"yes"},{"param":"$url","desc":"The original URL that was matched by the regex.","required":"yes"},{"param":"$rawattr","desc":"The original unmodified attributes.","required":"yes"}]},"wp_embed_handler_youtube":{"desc":"YouTube iframe embed handler callback.","params":[{"param":"$matches","desc":"The RegEx matches from the provided regex when calling wp_embed_register_handler().","required":"yes"},{"param":"$attr","desc":"Embed attributes.","required":"yes"},{"param":"$url","desc":"The original URL that was matched by the regex.","required":"yes"},{"param":"$rawattr","desc":"The original unmodified attributes.","required":"yes"}]},"wp_embed_register_handler":{"desc":"Registers an embed handler.","params":[{"param":"$id","desc":"An internal ID/name for the handler. Needs to be unique.","required":"yes"},{"param":"$regex","desc":"The regex that will be used to see if this handler should be used for a URL.","required":"yes"},{"param":"$callback","desc":"The callback function that will be called if the regex is matched.","required":"yes"},{"param":"$priority","desc":" Used to specify the order in which the registered handlers will be tested. ","required":"no"}]},"wp_embed_unregister_handler":{"desc":"Unregisters a previously-registered embed handler.","params":[{"param":"$id","desc":"The handler ID that should be removed.","required":"yes"},{"param":"$priority","desc":" The priority of the handler to be removed. ","required":"no"}]},"wp_encode_emoji":{"desc":"Convert any 4 byte emoji in a string to their equivalent HTML entity.","params":[{"param":"$content","desc":"The content to encode.","required":"yes"}]},"wp_enqueue_media":{"desc":"Enqueues all scripts, styles, settings, and templates necessary to use all media JS APIs.","params":[{"param":"$args","desc":"Arguments for enqueuing media scripts. A(int|WP_Post) post object or ID.  ","required":"no"}]},"wp_enqueue_script":{"desc":"Enqueue a script.","params":[{"param":"$handle","desc":"Name of the script. Should be unique.","required":"yes"},{"param":"$src","desc":"Full URL of the script, or path of the script relative to the WordPress root directory. ","required":"no"},{"param":"$deps","desc":" An array of registered script handles this script depends on. ","required":"no"},{"param":"$ver","desc":" String specifying script version number, if it has one, which is added to the URL as a query string for cache busting purposes. If version is set to false, a version number is automatically added equal to current installed WordPress version. If set to null, no version is added.","required":"no"},{"param":"$in_footer","desc":" Whether to enqueue the script before </body> instead of in the <head>. Default false.","required":"no"}]},"wp_enqueue_scripts":{"desc":"Wrapper for do_action(‘wp_enqueue_scripts’)","params":[]},"wp_enqueue_style":{"desc":"Enqueue a CSS stylesheet.","params":[{"param":"$handle","desc":"Name of the stylesheet. Should be unique.","required":"yes"},{"param":"$src","desc":"Full URL of the stylesheet, or path of the stylesheet relative to the WordPress root directory. ","required":"no"},{"param":"$deps","desc":" An array of registered stylesheet handles this stylesheet depends on. ","required":"no"},{"param":"$ver","desc":" String specifying stylesheet version number, if it has one, which is added to the URL as a query string for cache busting purposes. If version is set to false, a version number is automatically added equal to current installed WordPress version. If set to null, no version is added.","required":"no"},{"param":"$media","desc":" The media for which this stylesheet has been defined. Accepts media types like all, print and screen, or media queries like (orientation: portrait) and (max-width: 640px).","required":"no"}]},"wp_exif_date2ts":{"desc":"Convert the exif date format to a unix timestamp.","params":[{"param":"$str","desc":"","required":"yes"}]},"wp_exif_frac2dec":{"desc":"Convert a fraction string to a decimal.","params":[{"param":"$str","desc":"","required":"yes"}]},"wp_expand_dimensions":{"desc":"Based on a supplied width/height example, return the biggest possible dimensions based on the max width/height.","params":[{"param":"$example_width","desc":"The width of an example embed.","required":"yes"},{"param":"$example_height","desc":"The height of an example embed.","required":"yes"},{"param":"$max_width","desc":"The maximum allowed width.","required":"yes"},{"param":"$max_height","desc":"The maximum allowed height.","required":"yes"}]},"wp_explain_nonce":{"desc":"Retrieve nonce action “Are you sure” message.","params":[{"param":"$action","desc":"Nonce action.","required":"yes"}]},"wp_ext2type":{"desc":"Retrieve the file type based on the extension name.","params":[{"param":"$ext","desc":"The extension to search.","required":"yes"}]},"wp_extract_urls":{"desc":"Use RegEx to extract URLs from arbitrary content.","params":[{"param":"$content","desc":"Content to extract URLs from.","required":"yes"}]},"wp_favicon_request":{"desc":"Don’t load all of WordPress when handling a favicon.ico request.","params":[]},"WP_Filesystem":{"desc":"Initialises and connects the WordPress Filesystem Abstraction classes.","params":[{"param":"$args","desc":" Connection args, These are passed directly to the WP_Filesystem_*() classes. ","required":"no"},{"param":"$context","desc":" Context for get_filesystem_method(). ","required":"no"},{"param":"$allow_relaxed_file_ownership","desc":" Whether to allow Group/World writable. ","required":"no"}]},"wp_filter_comment":{"desc":"Filters and sanitizes comment data.","params":[{"param":"$commentdata","desc":"Contains information on the comment.","required":"yes"}]},"wp_filter_kses":{"desc":"Sanitize content with allowed HTML Kses rules.","params":[{"param":"$data","desc":"Content to filter, expected to be escaped with slashes","required":"yes"}]},"wp_filter_nohtml_kses":{"desc":"Strips all of the HTML in the content.","params":[{"param":"$data","desc":"Content to strip all HTML from","required":"yes"}]},"wp_filter_object_list":{"desc":"Filters a list of objects, based on a set of key => value arguments.","params":[{"param":"$list","desc":"An array of objects to filter","required":"yes"},{"param":"$args","desc":" An array of key => value arguments to match against each object. ","required":"no"},{"param":"$operator","desc":" The logical operation to perform. or means only one element from the array needs to match; and means all elements must match; not means no elements may match. ","required":"no"},{"param":"$field","desc":"A field from the object to place instead of the entire object. ","required":"no"}]},"wp_filter_oembed_result":{"desc":"Filters the given oEmbed HTML.","params":[{"param":"$result","desc":"The oEmbed HTML result.","required":"yes"},{"param":"$data","desc":"A data object result from an oEmbed provider.","required":"yes"},{"param":"$url","desc":"The URL of the content to be embedded.","required":"yes"}]},"wp_filter_post_kses":{"desc":"Sanitize content for allowed HTML tags for post content.","params":[{"param":"$data","desc":"Post content to filter, expected to be escaped with slashes","required":"yes"}]},"wp_filter_pre_oembed_result":{"desc":"Filters the oEmbed result before any HTTP requests are made.","params":[{"param":"$result","desc":"The UNSANITIZED (and potentially unsafe) HTML that should be used to embed. Default null.","required":"yes"},{"param":"$url","desc":"The URL that should be inspected for discovery <link> tags.","required":"yes"},{"param":"$args","desc":"oEmbed remote get arguments.","required":"yes"}]},"wp_find_hierarchy_loop":{"desc":"Find hierarchy loops using a callback function that maps object IDs to parent IDs.","params":[{"param":"$callback","desc":"Function that accepts ( ID, $callback_args ) and outputs parent_ID.","required":"yes"},{"param":"$start","desc":"The ID to start the loop check at.","required":"yes"},{"param":"$start_parent","desc":"The parent_ID of $start to use instead of calling $callback( $start ). Use null to always use $callback","required":"yes"},{"param":"$callback_args","desc":" Additional arguments to send to $callback.","required":"no"}]},"wp_find_hierarchy_loop_tortoise_hare":{"desc":"Use the “The Tortoise and the Hare” algorithm to detect loops.","params":[{"param":"$callback","desc":"Function that accepts ( ID, callback_arg, ... ) and outputs parent_ID.","required":"yes"},{"param":"$start","desc":"The ID to start the loop check at.","required":"yes"},{"param":"$override","desc":" An array of ( ID => parent_ID, ... ) to use instead of $callback. ","required":"no"},{"param":"$callback_args","desc":" Additional arguments to send to $callback. ","required":"no"},{"param":"$_return_loop","desc":" Return loop members or just detect presence of loop? Only set to true if you already know the given $start is part of a loop (otherwise the returned array might include branches). ","required":"no"}]},"wp_fix_server_vars":{"desc":"Fix `$_SERVER` variables for various setups.","params":[]},"wp_footer":{"desc":"Fire the wp_footer action","params":[]},"wp_functionality_constants":{"desc":"Defines functionality related WordPress constants","params":[]},"wp_generate_attachment_metadata":{"desc":"Generate post thumbnail attachment meta data.","params":[{"param":"$attachment_id","desc":"Attachment Id to process.","required":"yes"},{"param":"$file","desc":"Filepath of the Attached image.","required":"yes"}]},"wp_generate_auth_cookie":{"desc":"Generate authentication cookie contents.","params":[{"param":"$user_id","desc":"User ID","required":"yes"},{"param":"$expiration","desc":"The time the cookie expires as a UNIX timestamp.","required":"yes"},{"param":"$scheme","desc":" The cookie scheme to use: auth, secure_auth, or logged_in","required":"no"},{"param":"$token","desc":"Users session token to use for this cookie","required":"no"}]},"wp_generate_password":{"desc":"Generates a random password drawn from the defined set of characters.","params":[{"param":"$length","desc":" The length of password to generate. ","required":"no"},{"param":"$special_chars","desc":" Whether to include standard special characters. ","required":"no"},{"param":"$extra_special_chars","desc":" Whether to include other special characters. Used when generating secret keys and salts. ","required":"no"}]},"wp_generate_tag_cloud":{"desc":"Generates a tag cloud (heatmap) from provided data.","params":[{"param":"$tags","desc":"List of tags.","required":"yes"},{"param":"$args","desc":"Array of string of arguments for generating a tag cloud. smallest(int) Smallest font size used to display tags. Paired with the value of $unit, to determine CSS text size unit. Default 8 (pt). largest(int) Largest font size used to display tags. Paired with the value of $unit, to determine CSS text size unit. Default 22 (pt). unit(string) CSS text size unit to use with the $smallest and $largest values. Accepts any valid CSS text size unit. Default pt. number(int) The number of tags to return. Accepts any positive integer or zero to return all. Default 0. format(string) Format to display the tag cloud in. Accepts flat (tags separated with spaces), list (tags displayed in an unordered list), or array (returns an array). Default flat. separator(string) HTML or text to separate the tags. Default n (newline). orderby(string) Value to order tags by. Accepts name or count. Default name. The tag_cloud_sort filter can also affect how tags are sorted. order(string) How to order the tags. Accepts ASC (ascending), DESC (descending), or RAND (random). Default ASC. filter(int|bool) Whether to enable filtering of the final output via wp_generate_tag_cloud. Default 1|true. topic_count_text(string) Nooped plural text from _n_noop() to supply to tag tooltips. Default null. topic_count_text_callback(callable) Callback used to generate nooped plural text for tag tooltips based on the count. Default null. topic_count_scale_callback(callable) Callback used to determine the tag count scaling value. Default default_topic_count_scale().  ","required":"no"}]},"wp_generate_uuid4":{"desc":"Generate a random UUID (version 4).","params":[]},"wp_generator":{"desc":"Displays the XHTML generator that is generated on the wp_head hook.","params":[]},"wp_get_active_and_valid_plugins":{"desc":"Retrieve an array of active and valid plugin files.","params":[]},"wp_get_active_network_plugins":{"desc":"Returns array of network plugin files to be included in global scope.","params":[]},"wp_get_additional_image_sizes":{"desc":"Retrieve additional image sizes.","params":[]},"wp_get_all_sessions":{"desc":"Retrieve a list of sessions for the current user.","params":[]},"wp_get_archives":{"desc":"Display archive links based on type and format.","params":[{"param":"$args","desc":"Default archive links arguments. Optional. type(string) Type of archive to retrieve. Accepts daily, weekly, monthly, yearly, postbypost, or alpha. Both postbypost and alpha display the same archive link list as well as post titles instead of displaying dates. The difference between the two is that alpha will order by post title and postbypost will order by post date. Default monthly. limit(string|int) Number of links to limit the query to. Default empty (no limit). format(string) Format each link should take using the $before and $after args. Accepts link (<link> tag), option (<option> tag), html (<li> tag), or a custom format, which generates a link anchor with $before preceding and $after succeeding. Default html. before(string) Markup to prepend to the beginning of each link.  after(string) Markup to append to the end of each link.  show_post_count(bool) Whether to display the post count alongside the link. Default false. echo(bool|int) Whether to echo or return the links list. Default 1|true to echo. order(string) Whether to use ascending or descending order. Accepts ASC, or DESC. Default DESC. post_type(string) Post type. Default post.  ","required":"no"}]},"wp_get_associated_nav_menu_items":{"desc":"Get the menu items associated with a particular object.","params":[{"param":"$object_id","desc":"The ID of the original object.","required":"yes"},{"param":"$object_type","desc":"The type of object, such as taxonomy or post_type.","required":"no"},{"param":"$taxonomy","desc":"If $object_type is taxonomy, $taxonomy is the name of the tax that $object_id belongs to","required":"no"}]},"wp_get_attachment_caption":{"desc":"Retrieves the caption for an attachment.","params":[{"param":"$post_id","desc":" Attachment ID. Default is the ID of the global $post.","required":"no"}]},"wp_get_attachment_id3_keys":{"desc":"Returns useful keys to use to lookup data from an attachment’s stored metadata.","params":[{"param":"$attachment","desc":"The current attachment, provided for context.","required":"yes"},{"param":"$context","desc":" The context. Accepts edit, display. ","required":"no"}]},"wp_get_attachment_image":{"desc":"Get an HTML img element representing an image attachment","params":[{"param":"$attachment_id","desc":"Image attachment ID.","required":"yes"},{"param":"$size","desc":" Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"},{"param":"$icon","desc":" Whether the image should be treated as an icon. ","required":"no"},{"param":"$attr","desc":" Attributes for the image markup. ","required":"no"}]},"wp_get_attachment_image_sizes":{"desc":"Retrieves the value for an image attachment’s ‘sizes’ attribute.","params":[{"param":"$attachment_id","desc":"Image attachment ID.","required":"yes"},{"param":"$size","desc":" Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"},{"param":"$image_meta","desc":" The image meta data as returned by wp_get_attachment_metadata(). ","required":"no"}]},"wp_get_attachment_image_src":{"desc":"Retrieve an image to represent an attachment.","params":[{"param":"$attachment_id","desc":"Image attachment ID.","required":"yes"},{"param":"$size","desc":" Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"},{"param":"$icon","desc":" Whether the image should be treated as an icon. ","required":"no"}]},"wp_get_attachment_image_srcset":{"desc":"Retrieves the value for an image attachment’s ‘srcset’ attribute.","params":[{"param":"$attachment_id","desc":"Image attachment ID.","required":"yes"},{"param":"$size","desc":" Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"},{"param":"$image_meta","desc":" The image meta data as returned by wp_get_attachment_metadata(). ","required":"no"}]},"wp_get_attachment_image_url":{"desc":"Get the URL of an image attachment.","params":[{"param":"$attachment_id","desc":"Image attachment ID.","required":"yes"},{"param":"$size","desc":" Image size to retrieve. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"},{"param":"$icon","desc":" Whether the image should be treated as an icon. ","required":"no"}]},"wp_get_attachment_link":{"desc":"Retrieve an attachment page link using an image or icon, if possible.","params":[{"param":"$id","desc":" Post ID or post object.","required":"no"},{"param":"$size","desc":" Image size. Accepts any valid image size, or an array of width and height values in pixels (in that order). ","required":"no"},{"param":"$permalink","desc":" Whether to add permalink to image. ","required":"no"},{"param":"$icon","desc":" Whether the attachment is an icon. ","required":"no"},{"param":"$text","desc":" Link text to use. Activated by passing a string, false otherwise. ","required":"no"},{"param":"$attr","desc":" Array or string of attributes. ","required":"no"}]},"wp_get_attachment_metadata":{"desc":"Retrieve attachment meta field for attachment ID.","params":[{"param":"$post_id","desc":"Attachment ID. Default 0.","required":"yes"},{"param":"$unfiltered","desc":" If true, filters are not run. ","required":"no"}]},"wp_get_attachment_thumb_file":{"desc":"Retrieve thumbnail for an attachment.","params":[{"param":"$post_id","desc":" Attachment ID. Default 0.","required":"no"}]},"wp_get_attachment_thumb_url":{"desc":"Retrieve URL for an attachment thumbnail.","params":[{"param":"$post_id","desc":" Attachment ID. Default 0.","required":"no"}]},"wp_get_attachment_url":{"desc":"Retrieve the URL for an attachment.","params":[{"param":"$post_id","desc":" Attachment ID. Default 0.","required":"no"}]},"wp_get_audio_extensions":{"desc":"Returns a filtered list of WP-supported audio formats.","params":[]},"wp_get_available_translations":{"desc":"Get available translations from the WordPress.org API.","params":[]},"wp_get_canonical_url":{"desc":"Returns the canonical URL for a post.","params":[{"param":"$post","desc":" Post ID or object. Default is global $post.","required":"no"}]},"wp_get_comment_fields_max_lengths":{"desc":"Retrieves the maximum character lengths for the comment form fields.","params":[]},"wp_get_comment_status":{"desc":"The status of a comment by ID.","params":[{"param":"$comment_id","desc":"Comment ID or WP_Comment object","required":"yes"}]},"wp_get_cookie_login":{"desc":"Gets the user cookie login. This function is deprecated.","params":[]},"wp_get_current_commenter":{"desc":"Get current commenter’s name, email, and URL.","params":[]},"wp_get_current_user":{"desc":"Retrieve the current user object.","params":[]},"wp_get_custom_css":{"desc":"Fetch the saved Custom CSS content for rendering.","params":[{"param":"$stylesheet","desc":" A theme object stylesheet name. Defaults to the current theme.","required":"no"}]},"wp_get_custom_css_post":{"desc":"Fetch the `custom_css` post for a given theme.","params":[{"param":"$stylesheet","desc":" A theme object stylesheet name. Defaults to the current theme.","required":"no"}]},"wp_get_db_schema":{"desc":"Retrieve the SQL for creating database tables.","params":[{"param":"$scope","desc":" The tables for which to retrieve SQL. Can be all, global, ms_global, or blog tables. Defaults to all.","required":"no"},{"param":"$blog_id","desc":" The site ID for which to retrieve SQL. Default is the current site ID.","required":"no"}]},"wp_get_document_title":{"desc":"Returns document title for the current page.","params":[]},"wp_get_ext_types":{"desc":"Retrieves the list of common file extensions and their types.","params":[]},"wp_get_http":{"desc":"Perform a HTTP HEAD or GET request.","params":[{"param":"$url","desc":"URL to fetch.","required":"yes"},{"param":"$file_path","desc":" File path to write request to. ","required":"no"},{"param":"$red","desc":" The number of Redirects followed, Upon 5 being hit, returns false. ","required":"no"}]},"wp_get_http_headers":{"desc":"Retrieve HTTP Headers from URL.","params":[{"param":"$url","desc":"URL to retrieve HTTP headers from.","required":"yes"},{"param":"$deprecated","desc":"Not Used.","required":"no"}]},"wp_get_image_editor":{"desc":"Returns a WP_Image_Editor instance and loads file into it.","params":[{"param":"$path","desc":"Path to the file to load.","required":"yes"},{"param":"$args","desc":" Additional arguments for retrieving the image editor. ","required":"no"}]},"wp_get_installed_translations":{"desc":"Get installed translations.","params":[{"param":"$type","desc":"What to search for. Accepts plugins, themes, core.","required":"yes"}]},"wp_get_links":{"desc":"Gets the links associated with category.","params":[{"param":"$args","desc":"a query string","required":"no"}]},"wp_get_linksbyname":{"desc":"Gets the links associated with the named category.","params":[{"param":"$category","desc":"The category to use.","required":"yes"},{"param":"$args","desc":"","required":"no"}]},"wp_get_link_cats":{"desc":"Retrieves the link categories associated with the link specified.","params":[{"param":"$link_id","desc":"Link ID to look up","required":"yes"}]},"wp_get_mime_types":{"desc":"Retrieve list of mime types and file extensions.","params":[]},"wp_get_mu_plugins":{"desc":"Retrieve an array of must-use plugin files.","params":[]},"wp_get_nav_menus":{"desc":"Returns all navigation menu objects.","params":[{"param":"$args","desc":" Array of arguments passed on to get_terms(). ","required":"no"}]},"wp_get_nav_menu_items":{"desc":"Return all menu items of a navigation menu.","params":[{"param":"$menu","desc":"Menu name, ID, or slug.","required":"yes"},{"param":"$args","desc":" Arguments to pass to get_posts().","required":"no"}]},"wp_get_nav_menu_object":{"desc":"Returns a navigation menu object.","params":[{"param":"$menu","desc":"Menu ID, slug, or name - or the menu object.","required":"yes"}]},"wp_get_nav_menu_to_edit":{"desc":"Returns the menu formatted to edit.","params":[{"param":"$menu_id","desc":" The ID of the menu to format. Default 0.","required":"no"}]},"wp_get_network":{"desc":"Retrieve an object containing information about the requested network.","params":[{"param":"$network","desc":"The networks database row or ID.","required":"yes"}]},"wp_get_nocache_headers":{"desc":"Get the header information to prevent caching.","params":[]},"wp_get_object_terms":{"desc":"Retrieves the terms associated with the given object(s), in the supplied taxonomies.","params":[{"param":"$object_ids","desc":"The ID(s) of the object(s) to retrieve.","required":"yes"},{"param":"$taxonomies","desc":"The taxonomies to retrieve terms from.","required":"yes"},{"param":"$args","desc":"See WP_Term_Query::__construct() for supported arguments.","required":"no"}]},"wp_get_original_referer":{"desc":"Retrieve original referer that was posted, if it exists.","params":[]},"wp_get_password_hint":{"desc":"Gets the text suggesting how to create strong passwords.","params":[]},"wp_get_pomo_file_data":{"desc":"Extract headers from a PO file.","params":[{"param":"$po_file","desc":"Path to PO file.","required":"yes"}]},"wp_get_popular_importers":{"desc":"Returns a list from WordPress.org of popular importer plugins.","params":[]},"wp_get_post_autosave":{"desc":"Retrieve the autosaved data of the specified post.","params":[{"param":"$post_id","desc":"The post ID.","required":"yes"},{"param":"$user_id","desc":"The post author ID.","required":"no"}]},"wp_get_post_categories":{"desc":"Retrieve the list of categories for a post.","params":[{"param":"$post_id","desc":" The Post ID. Does not default to the ID of the global $post. Default 0.","required":"no"},{"param":"$args","desc":" Category arguments. See wp_get_object_terms(). ","required":"no"}]},"wp_get_post_cats":{"desc":"Retrieves a list of post categories.","params":[{"param":"$blogid","desc":"Not Used","required":"no"},{"param":"$post_ID","desc":"","required":"yes"}]},"wp_get_post_parent_id":{"desc":"Return the post’s parent’s post_ID","params":[{"param":"$post_ID","desc":"","required":"yes"}]},"wp_get_post_revision":{"desc":"Gets a post revision.","params":[{"param":"$post","desc":"The post ID or object.","required":"yes"},{"param":"$output","desc":" The required return type. One of OBJECT, ARRAY_A, or ARRAY_N, which correspond to a WP_Post object, an associative array, or a numeric array, respectively. ","required":"no"},{"param":"$filter","desc":"sanitation filter. See sanitize_post().","required":"no"}]},"wp_get_post_revisions":{"desc":"Returns all revisions of specified post.","params":[{"param":"$post_id","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"},{"param":"$args","desc":" Arguments for retrieving post revisions. ","required":"no"}]},"wp_get_post_tags":{"desc":"Retrieve the tags for a post.","params":[{"param":"$post_id","desc":" The Post ID. Does not default to the ID of the global $post. Default 0.","required":"no"},{"param":"$args","desc":" Overwrite the defaults","required":"no"}]},"wp_get_post_terms":{"desc":"Retrieve the terms for a post.","params":[{"param":"$post_id","desc":" The Post ID. Does not default to the ID of the global $post. Default 0.","required":"no"},{"param":"$taxonomy","desc":" The taxonomy for which to retrieve terms. ","required":"no"},{"param":"$args","desc":" wp_get_object_terms() arguments. ","required":"no"}]},"wp_get_raw_referer":{"desc":"Retrieves unvalidated referer from ‘_wp_http_referer’ or HTTP referer.","params":[]},"wp_get_recent_posts":{"desc":"Retrieve a number of recent posts.","params":[{"param":"$args","desc":" Arguments to retrieve posts. ","required":"no"},{"param":"$output","desc":" The required return type. One of OBJECT or ARRAY_A, which correspond to a WP_Post object or an associative array, respectively. ","required":"no"}]},"wp_get_referer":{"desc":"Retrieve referer from ‘_wp_http_referer’ or HTTP referer.","params":[]},"wp_get_revision_ui_diff":{"desc":"Get the revision UI diff.","params":[{"param":"$post","desc":"The post object. Also accepts a post ID.","required":"yes"},{"param":"$compare_from","desc":"The revision ID to compare from.","required":"yes"},{"param":"$compare_to","desc":"The revision ID to come to.","required":"yes"}]},"wp_get_schedule":{"desc":"Retrieve the recurrence schedule for an event.","params":[{"param":"$hook","desc":"Action hook to identify the event.","required":"yes"},{"param":"$args","desc":" Arguments passed to the events callback function.","required":"no"}]},"wp_get_schedules":{"desc":"Retrieve supported and filtered Cron recurrences.","params":[]},"wp_get_server_protocol":{"desc":"Return the HTTP protocol sent by the server.","params":[]},"wp_get_session_token":{"desc":"Retrieve the current session token from the logged_in cookie.","params":[]},"wp_get_shortlink":{"desc":"Returns a shortlink for a post, page, attachment, or site.","params":[{"param":"$id","desc":" A post or site id. Default is 0, which means the current post or site.","required":"no"},{"param":"$context","desc":" Whether the id is a site id, post id, or media id. If post, the post_type of the post is consulted. If query, the current query is consulted to determine the id and context. ","required":"no"},{"param":"$allow_slugs","desc":" Whether to allow post slugs in the shortlink. It is up to the plugin how and whether to honor this. ","required":"no"}]},"wp_get_sidebars_widgets":{"desc":"Retrieve full list of sidebars and their widget instance IDs.","params":[{"param":"$deprecated","desc":"Not used (argument deprecated).","required":"no"}]},"wp_get_single_post":{"desc":"Retrieve a single post, based on post ID.","params":[{"param":"$postid","desc":"Post ID.","required":"yes"},{"param":"$mode","desc":"How to return result, either OBJECT, ARRAY_N, or ARRAY_A.","required":"no"}]},"wp_get_sites":{"desc":"Return an array of sites for a network or networks.","params":[{"param":"$args","desc":"Array of default arguments. Optional. network_id(int|array) A network ID or array of network IDs. Set to null to retrieve sites from all networks. Defaults to current network ID. public(int) Retrieve public or non-public sites. Default null, for any. archived(int) Retrieve archived or non-archived sites. Default null, for any. mature(int) Retrieve mature or non-mature sites. Default null, for any. spam(int) Retrieve spam or non-spam sites. Default null, for any. deleted(int) Retrieve deleted or non-deleted sites. Default null, for any. limit(int) Number of sites to limit the query to. Default 100. offset(int) Exclude the first x sites. Used in combination with the $limit parameter. Default 0.  ","required":"no"}]},"wp_get_split_term":{"desc":"Get the new term ID corresponding to a previously split term.","params":[{"param":"$old_term_id","desc":"Term ID. This is the old, pre-split term ID.","required":"yes"},{"param":"$taxonomy","desc":"Taxonomy that the term belongs to.","required":"yes"}]},"wp_get_split_terms":{"desc":"Get data about terms that previously shared a single term_id, but have since been split.","params":[{"param":"$old_term_id","desc":"Term ID. This is the old, pre-split term ID.","required":"yes"}]},"wp_get_term_taxonomy_parent_id":{"desc":"Returns the term’s parent’s term_ID.","params":[{"param":"$term_id","desc":"Term ID.","required":"yes"},{"param":"$taxonomy","desc":"Taxonomy name.","required":"yes"}]},"wp_get_theme":{"desc":"Gets a WP_Theme object for a theme.","params":[{"param":"$stylesheet","desc":"Directory name for the theme. Optional. Defaults to current theme.","required":"no"},{"param":"$theme_root","desc":"Absolute path of the theme root to look in. Optional. If not specified, get_raw_theme_root()   is used to calculate the theme root for the $stylesheet provided (or current theme).","required":"no"}]},"wp_get_themes":{"desc":"Returns an array of WP_Theme objects based on the arguments.","params":[{"param":"$args","desc":"The search arguments. Optional. - errors mixed True to return themes with errors, false to return themes without errors, null to return all themes. Defaults to false. - allowed mixed (Multisite) True to return only allowed themes for a site. False to return only disallowed themes for a site. site to return only site-allowed themes. network to return only network-allowed themes. Null to return all themes. Defaults to null. - blog_id int (Multisite) The blog ID used to calculate which themes are allowed. Defaults to 0, synonymous for the current blog.","required":"no"}]},"wp_get_translation_updates":{"desc":"Retrieves a list of all language updates available.","params":[]},"wp_get_update_data":{"desc":"Collect counts and UI strings for available updates","params":[]},"wp_get_upload_dir":{"desc":"Retrieves uploads directory information.","params":[]},"wp_get_users_with_no_role":{"desc":"Get the user IDs of all users with no role on this site.","params":[]},"wp_get_user_contact_methods":{"desc":"Set up the user contact methods.","params":[{"param":"$user","desc":" WP_User object.","required":"no"}]},"wp_get_video_extensions":{"desc":"Returns a filtered list of WP-supported video formats.","params":[]},"wp_get_widget_defaults":{"desc":"Retrieve default registered sidebars list.","params":[]},"wp_guess_url":{"desc":"Guess the URL for the site.","params":[]},"wp_handle_comment_submission":{"desc":"Handles the submission of a comment, usually posted to wp-comments-post.php via a comment form.","params":[{"param":"$comment_data","desc":"Comment data. comment_post_ID(string|int) The ID of the post that relates to the comment. author(string) The name of the comment author. email(string) The comment author email address. url(string) The comment author URL. comment(string) The content of the comment. comment_parent(string|int) The ID of this comments parent, if any. Default 0. _wp_unfiltered_html_comment(string) The nonce value for allowing unfiltered HTML.  ","required":"yes"}]},"wp_handle_sideload":{"desc":"Wrapper for _wp_handle_upload().","params":[{"param":"$file","desc":"An array similar to that of a PHP $_FILES POST array","required":"yes"},{"param":"$overrides","desc":" An associative array of names=>values to override default variables. ","required":"no"},{"param":"$time","desc":" Time formatted in yyyy/mm. ","required":"no"}]},"wp_handle_upload":{"desc":"Wrapper for _wp_handle_upload(), passes ‘wp_handle_upload’ action.","params":[{"param":"$file","desc":"Reference to a single element of $_FILES. Call the function once for each uploaded file.","required":"yes"},{"param":"$overrides","desc":" An associative array of names=>values to override default variables. ","required":"no"},{"param":"$time","desc":" Time formatted in yyyy/mm. ","required":"no"}]},"wp_handle_upload_error":{"desc":"","params":[]},"wp_hash":{"desc":"Get hash of given string.","params":[{"param":"$data","desc":"Plain text to hash","required":"yes"},{"param":"$scheme","desc":"Authentication scheme (auth, secure_auth, logged_in, nonce)","required":"no"}]},"wp_hash_password":{"desc":"Create a hash (encrypt) of a plain text password.","params":[{"param":"$password","desc":"Plain text user password to hash","required":"yes"}]},"wp_head":{"desc":"Fire the wp_head action","params":[]},"wp_heartbeat_settings":{"desc":"Default settings for heartbeat","params":[{"param":"$settings","desc":"","required":"yes"}]},"wp_heartbeat_set_suspension":{"desc":"Disable suspension of Heartbeat on the Add/Edit Post screens.","params":[{"param":"$settings","desc":"An array of Heartbeat settings.","required":"yes"}]},"wp_htmledit_pre":{"desc":"Formats text for the HTML editor.","params":[{"param":"$output","desc":"The text to be formatted.","required":"yes"}]},"wp_html_excerpt":{"desc":"Safely extracts not more than the first $count characters from html string.","params":[{"param":"$str","desc":"String to get the excerpt from.","required":"yes"},{"param":"$count","desc":"Maximum number of characters to take.","required":"yes"},{"param":"$more","desc":" What to append if $str needs to be trimmed. Defaults to empty string.","required":"no"}]},"wp_html_split":{"desc":"Separate HTML elements and comments from the text.","params":[{"param":"$input","desc":"The text which has to be formatted.","required":"yes"}]},"wp_http_supports":{"desc":"Determines if there is an HTTP Transport that can process this request.","params":[{"param":"$capabilities","desc":"Array of capabilities to test or a wp_remote_request() $args array.","required":"no"},{"param":"$url","desc":" If given, will check if the URL requires SSL and adds that requirement to the capabilities array.","required":"no"}]},"wp_http_validate_url":{"desc":"Validate a URL for safe use in the HTTP API.","params":[{"param":"$url","desc":"","required":"yes"}]},"wp_iframe":{"desc":"Adds the iframe to display content for the media upload page","params":[{"param":"$content_func","desc":"","required":"yes"}]},"wp_imagecreatetruecolor":{"desc":"Create new GD image resource with transparency support","params":[{"param":"$width","desc":"Image width in pixels.","required":"yes"},{"param":"$height","desc":"Image height in pixels..","required":"yes"}]},"wp_image_add_srcset_and_sizes":{"desc":"Adds ‘srcset’ and ‘sizes’ attributes to an existing ‘img’ element.","params":[{"param":"$image","desc":"An HTML img element to be filtered.","required":"yes"},{"param":"$image_meta","desc":"The image meta data as returned by wp_get_attachment_metadata().","required":"yes"},{"param":"$attachment_id","desc":"Image attachment ID.","required":"yes"}]},"wp_image_editor":{"desc":"Loads the WP image-editing interface.","params":[{"param":"$post_id","desc":"Post ID.","required":"yes"},{"param":"$msg","desc":" Message to display for image editor updates or errors. ","required":"no"}]},"wp_image_editor_supports":{"desc":"Tests whether there is an editor that supports a given mime type or methods.","params":[{"param":"$args","desc":" Array of arguments to retrieve the image editor supports. ","required":"no"}]},"wp_image_matches_ratio":{"desc":"Helper function to test if aspect ratios for two images match.","params":[{"param":"$source_width","desc":"Width of the first image in pixels.","required":"yes"},{"param":"$source_height","desc":"Height of the first image in pixels.","required":"yes"},{"param":"$target_width","desc":"Width of the second image in pixels.","required":"yes"},{"param":"$target_height","desc":"Height of the second image in pixels.","required":"yes"}]},"wp_import_cleanup":{"desc":"Cleanup importer.","params":[{"param":"$id","desc":"Importer ID.","required":"yes"}]},"wp_import_handle_upload":{"desc":"Handle importer uploading and add attachment.","params":[]},"wp_import_upload_form":{"desc":"Outputs the form used by the importers to accept the data to be imported","params":[{"param":"$action","desc":"The action attribute for the form.","required":"yes"}]},"wp_initial_constants":{"desc":"Defines initial WordPress constants","params":[]},"wp_initial_nav_menu_meta_boxes":{"desc":"Limit the amount of meta boxes to pages, posts, links, and categories for first time users.","params":[]},"wp_insert_attachment":{"desc":"Insert an attachment.","params":[{"param":"$args","desc":"Arguments for inserting an attachment.","required":"yes"},{"param":"$file","desc":" Filename.","required":"no"},{"param":"$parent","desc":" Parent post ID.","required":"no"},{"param":"$wp_error","desc":" Whether to return a WP_Error on failure. ","required":"no"}]},"wp_insert_category":{"desc":"Updates an existing Category or creates a new Category.","params":[{"param":"$catarr","desc":"Array of arguments for inserting a new category. cat_ID(int) Category ID. A non-zero value updates an existing category. Default 0. taxonomy(string) Taxonomy slug. Default category. cat_name(string) Category name. Default empty. category_description(string) Category description. Default empty. category_nicename(string) Category nice (display) name. Default empty. category_parent(int|string) Category parent ID. Default empty.  ","required":"yes"},{"param":"$wp_error","desc":" ","required":"no"}]},"wp_insert_comment":{"desc":"Inserts a comment into the database.","params":[{"param":"$commentdata","desc":"Array of arguments for inserting a new comment. comment_agent(string) The HTTP user agent of the $comment_author when the comment was submitted. Default empty. comment_approved(int|string) Whether the comment has been approved. Default 1. comment_author(string) The name of the author of the comment. Default empty. comment_author_email(string) The email address of the $comment_author. Default empty. comment_author_IP(string) The IP address of the $comment_author. Default empty. comment_author_url(string) The URL address of the $comment_author. Default empty. comment_content(string) The content of the comment. Default empty. comment_date(string) The date the comment was submitted. To set the date manually, $comment_date_gmt must also be specified. Default is the current time. comment_date_gmt(string) The date the comment was submitted in the GMT timezone. Default is $comment_date in the sites GMT timezone. comment_karma(int) The karma of the comment. Default 0. comment_parent(int) ID of this comments parent, if any. Default 0. comment_post_ID(int) ID of the post that relates to the comment, if any. Default 0. comment_type(string) Comment type. Default empty. comment_meta(array) Optional. Array of key/value pairs to be stored in commentmeta for the new comment. user_id(int) ID of the user who submitted the comment. Default 0.  ","required":"yes"}]},"wp_insert_link":{"desc":"Inserts/updates links into/in the database.","params":[{"param":"$linkdata","desc":"Elements that make up the link to insert.","required":"yes"},{"param":"$wp_error","desc":" Whether to return a WP_Error object on failure. ","required":"no"}]},"wp_insert_post":{"desc":"Insert or update a post.","params":[{"param":"$postarr","desc":"An array of elements that make up a post to update or insert. ID(int) The post ID. If equal to something other than 0, the post with that ID will be updated. Default 0. post_author(int) The ID of the user who added the post. Default is the current user ID. post_date(string) The date of the post. Default is the current time. post_date_gmt(string) The date of the post in the GMT timezone. Default is the value of $post_date. post_content(mixed) The post content. Default empty. post_content_filtered(string) The filtered post content. Default empty. post_title(string) The post title. Default empty. post_excerpt(string) The post excerpt. Default empty. post_status(string) The post status. Default draft. post_type(string) The post type. Default post. comment_status(string) Whether the post can accept comments. Accepts open or closed. Default is the value of default_comment_status option. ping_status(string) Whether the post can accept pings. Accepts open or closed. Default is the value of default_ping_status option. post_password(string) The password to access the post. Default empty. post_name(string) The post name. Default is the sanitized post title when creating a new post. to_ping(string) Space or carriage return-separated list of URLs to ping. Default empty. pinged(string) Space or carriage return-separated list of URLs that have been pinged. Default empty. post_modified(string) The date when the post was last modified. Default is the current time. post_modified_gmt(string) The date when the post was last modified in the GMT timezone. Default is the current time. post_parent(int) Set this for the post it belongs to, if any. Default 0. menu_order(int) The order the post should be displayed in. Default 0. post_mime_type(string) The mime type of the post. Default empty. guid(string) Global Unique ID for referencing the post. Default empty. post_category(array) Array of category names, slugs, or IDs. Defaults to value of the default_category option. tax_input(array) Array of taxonomy terms keyed by their taxonomy name. Default empty. meta_input(array) Array of post meta values keyed by their post meta key. Default empty.  ","required":"yes"},{"param":"$wp_error","desc":" Whether to return a WP_Error on failure. ","required":"no"}]},"wp_insert_term":{"desc":"Add a new term to the database.","params":[{"param":"$term","desc":"The term to add or update.","required":"yes"},{"param":"$taxonomy","desc":"The taxonomy to which to add the term.","required":"yes"},{"param":"$args","desc":"Array or string of arguments for inserting a term. alias_of(string) Slug of the term to make this term an alias of. Default empty string. Accepts a term slug. description(string) The term description. Default empty string. parent(int) The id of the parent term. Default 0. slug(string) The term slug to use. Default empty string.  ","required":"no"}]},"wp_insert_user":{"desc":"Insert a user into the database.","params":[{"param":"$userdata","desc":"An array, object, or WP_User object of user data arguments. ID(int) User ID. If supplied, the user will be updated. user_pass(string) The plain-text user password. user_login(string) The users login username. user_nicename(string) The URL-friendly user name. user_url(string) The user URL. user_email(string) The user email address. display_name(string) The users display name. Default is the users username. nickname(string) The users nickname. Default is the users username. first_name(string) The users first name. For new users, will be used to build the first part of the users display name if $display_name is not specified. last_name(string) The users last name. For new users, will be used to build the second part of the users display name if $display_name is not specified. description(string) The users biographical description. rich_editing(string|bool) Whether to enable the rich-editor for the user. False if not empty. comment_shortcuts(string|bool) Whether to enable comment moderation keyboard shortcuts for the user. Default false. admin_color(string) Admin color scheme for the user. Default fresh. use_ssl(bool) Whether the user should always access the admin over https. Default false. user_registered(string) Date the user registered. Format is Y-m-d H:i:s. show_admin_bar_front(string|bool) Whether to display the Admin Bar for the user on the sites front end. Default true. role(string) Users role. locale(string) Users locale. Default empty.  ","required":"yes"}]},"wp_install":{"desc":"Installs the site.","params":[{"param":"$blog_title","desc":"Site title.","required":"yes"},{"param":"$user_name","desc":"Users username.","required":"yes"},{"param":"$user_email","desc":"Users email.","required":"yes"},{"param":"$public","desc":"Whether site is public.","required":"yes"},{"param":"$deprecated","desc":" Not used.","required":"no"},{"param":"$user_password","desc":" Users chosen password. Default empty (random password).","required":"no"},{"param":"$language","desc":" Language chosen. ","required":"no"}]},"wp_installing":{"desc":"Check or set whether WordPress is in “installation” mode.","params":[{"param":"$is_installing","desc":" True to set WP into Installing mode, false to turn Installing mode off. Omit this parameter if you only want to fetch the current status.","required":"no"}]},"wp_install_defaults":{"desc":"Creates the initial content for a newly-installed site.","params":[{"param":"$user_id","desc":"User ID.","required":"yes"}]},"wp_install_language_form":{"desc":"Output the select form for the language selection on the installation screen.","params":[{"param":"$languages","desc":"Array of available languages (populated via the Translation API).","required":"yes"}]},"wp_install_maybe_enable_pretty_permalinks":{"desc":"Maybe enable pretty permalinks on install.","params":[]},"wp_iso_descrambler":{"desc":"Convert to ASCII from email subjects.","params":[{"param":"$string","desc":"Subject line","required":"yes"}]},"wp_is_ini_value_changeable":{"desc":"Determines whether a PHP ini value is changeable at runtime.","params":[{"param":"$setting","desc":"The name of the ini setting to check.","required":"yes"}]},"wp_is_large_network":{"desc":"Whether or not we have a large network.","params":[{"param":"$using","desc":"sites or users. Default is sites.","required":"no"}]},"wp_is_mobile":{"desc":"Test if the current browser runs on a mobile device (smart phone, tablet, etc.)","params":[]},"wp_is_numeric_array":{"desc":"Determines if the variable is a numeric-indexed array.","params":[{"param":"$data","desc":"Variable to check.","required":"yes"}]},"wp_is_post_autosave":{"desc":"Determines if the specified post is an autosave.","params":[{"param":"$post","desc":"Post ID or post object.","required":"yes"}]},"wp_is_post_revision":{"desc":"Determines if the specified post is a revision.","params":[{"param":"$post","desc":"Post ID or post object.","required":"yes"}]},"wp_is_stream":{"desc":"Test if a given path is a stream URL","params":[{"param":"$path","desc":"The resource path or URL.","required":"yes"}]},"wp_is_writable":{"desc":"Determine if a directory is writable.","params":[{"param":"$path","desc":"Path to check for write-ability.","required":"yes"}]},"wp_json_encode":{"desc":"Encode a variable into JSON, with some sanity checks.","params":[{"param":"$data","desc":"Variable (usually an array or object) to encode as JSON.","required":"yes"},{"param":"$options","desc":" Options to be passed to json_encode(). Default 0.","required":"no"},{"param":"$depth","desc":" Maximum depth to walk through $data. Must be greater than 0. ","required":"no"}]},"wp_just_in_time_script_localization":{"desc":"Load localized data on print rather than initialization.","params":[]},"wp_kses":{"desc":"Filters content and keeps only allowable HTML elements.","params":[{"param":"$string","desc":"Content to filter through kses","required":"yes"},{"param":"$allowed_html","desc":"List of allowed HTML elements","required":"yes"},{"param":"$allowed_protocols","desc":" Allowed protocol in links.","required":"no"}]},"wp_kses_allowed_html":{"desc":"Return a list of allowed tags and attributes for a given context.","params":[{"param":"$context","desc":"The context for which to retrieve tags. Allowed values are post, strip, data,entities, or the name of a field filter such as pre_user_description.","required":"no"}]},"wp_kses_array_lc":{"desc":"Goes through an array and changes the keys to all lower case.","params":[{"param":"$inarray","desc":"Unfiltered array","required":"yes"}]},"wp_kses_attr":{"desc":"Removes all attributes, if none are allowed for this element.","params":[{"param":"$element","desc":"HTML element/tag","required":"yes"},{"param":"$attr","desc":"HTML attributes from HTML element to closing HTML element tag","required":"yes"},{"param":"$allowed_html","desc":"Allowed HTML elements","required":"yes"},{"param":"$allowed_protocols","desc":"Allowed protocols to keep","required":"yes"}]},"wp_kses_attr_check":{"desc":"Determine whether an attribute is allowed.","params":[{"param":"$name","desc":"The attribute name. Returns empty string when not allowed.","required":"yes"},{"param":"$value","desc":"The attribute value. Returns a filtered value.","required":"yes"},{"param":"$whole","desc":"The name=value input. Returns filtered input.","required":"yes"},{"param":"$vless","desc":"y when attribute like enabled, otherwise n.","required":"yes"},{"param":"$element","desc":"The name of the element to which this attribute belongs.","required":"yes"},{"param":"$allowed_html","desc":"The full list of allowed elements and attributes.","required":"yes"}]},"wp_kses_attr_parse":{"desc":"Finds all attributes of an HTML element.","params":[{"param":"$element","desc":"HTML element/tag","required":"yes"}]},"wp_kses_bad_protocol":{"desc":"Sanitize string from bad protocols.","params":[{"param":"$string","desc":"Content to filter bad protocols from","required":"yes"},{"param":"$allowed_protocols","desc":"Allowed protocols to keep","required":"yes"}]},"wp_kses_bad_protocol_once":{"desc":"Sanitizes content from bad protocols and other characters.","params":[{"param":"$string","desc":"Content to check for bad protocols","required":"yes"},{"param":"$allowed_protocols","desc":"Allowed protocols","required":"yes"}]},"wp_kses_bad_protocol_once2":{"desc":"Callback for wp_kses_bad_protocol_once() regular expression.","params":[{"param":"$string","desc":"URI scheme to check against the whitelist","required":"yes"},{"param":"$allowed_protocols","desc":"Allowed protocols","required":"yes"}]},"wp_kses_check_attr_val":{"desc":"Performs different checks for attribute values.","params":[{"param":"$value","desc":"Attribute value","required":"yes"},{"param":"$vless","desc":"Whether the value is valueless. Use y or n","required":"yes"},{"param":"$checkname","desc":"What $checkvalue is checking for.","required":"yes"},{"param":"$checkvalue","desc":"What constraint the value should pass","required":"yes"}]},"wp_kses_data":{"desc":"Sanitize content with allowed HTML Kses rules.","params":[{"param":"$data","desc":"Content to filter, expected to not be escaped","required":"yes"}]},"wp_kses_decode_entities":{"desc":"Convert all entities to their character counterparts.","params":[{"param":"$string","desc":"Content to change entities","required":"yes"}]},"wp_kses_hair":{"desc":"Builds an attribute list from string containing attributes.","params":[{"param":"$attr","desc":"Attribute list from HTML element to closing HTML element tag","required":"yes"},{"param":"$allowed_protocols","desc":"Allowed protocols to keep","required":"yes"}]},"wp_kses_hair_parse":{"desc":"Builds an attribute list from string containing attributes.","params":[{"param":"$attr","desc":"Attribute list from HTML element to closing HTML element tag","required":"yes"}]},"wp_kses_hook":{"desc":"You add any kses hooks here.","params":[{"param":"$string","desc":"Content to filter through kses","required":"yes"},{"param":"$allowed_html","desc":"List of allowed HTML elements","required":"yes"},{"param":"$allowed_protocols","desc":"Allowed protocol in links","required":"yes"}]},"wp_kses_html_error":{"desc":"Handles parsing errors in wp_kses_hair().","params":[{"param":"$string","desc":"","required":"yes"}]},"wp_kses_js_entities":{"desc":"Removes the HTML JavaScript entities found in early versions of Netscape 4.","params":[{"param":"$string","desc":"","required":"yes"}]},"wp_kses_named_entities":{"desc":"Callback for wp_kses_normalize_entities() regular expression.","params":[{"param":"$matches","desc":"preg_replace_callback() matches array","required":"yes"}]},"wp_kses_normalize_entities":{"desc":"Converts and fixes HTML entities.","params":[{"param":"$string","desc":"Content to normalize entities","required":"yes"}]},"wp_kses_normalize_entities2":{"desc":"Callback for wp_kses_normalize_entities() regular expression.","params":[{"param":"$matches","desc":"preg_replace_callback() matches array","required":"yes"}]},"wp_kses_normalize_entities3":{"desc":"Callback for wp_kses_normalize_entities() for regular expression.","params":[{"param":"$matches","desc":"preg_replace_callback() matches array","required":"yes"}]},"wp_kses_no_null":{"desc":"Removes any invalid control characters in $string.","params":[{"param":"$string","desc":"","required":"yes"},{"param":"$options","desc":"Set slash_zero => keep when is allowed. Default is remove.","required":"no"}]},"wp_kses_one_attr":{"desc":"Filters one attribute only and ensures its value is allowed.","params":[{"param":"$string","desc":"The whole attribute, including name and value.","required":"yes"},{"param":"$element","desc":"The element name to which the attribute belongs.","required":"yes"}]},"wp_kses_post":{"desc":"Sanitize content for allowed HTML tags for post content.","params":[{"param":"$data","desc":"Post content to filter","required":"yes"}]},"wp_kses_post_deep":{"desc":"Navigates through an array, object, or scalar, and sanitizes content for allowed HTML tags for post content.","params":[{"param":"$data","desc":"The array, object, or scalar value to inspect.","required":"yes"}]},"wp_kses_split":{"desc":"Searches for HTML tags, no matter how malformed.","params":[{"param":"$string","desc":"Content to filter","required":"yes"},{"param":"$allowed_html","desc":"Allowed HTML elements","required":"yes"},{"param":"$allowed_protocols","desc":"Allowed protocols to keep","required":"yes"}]},"wp_kses_split2":{"desc":"Callback for wp_kses_split for fixing malformed HTML tags.","params":[{"param":"$string","desc":"Content to filter","required":"yes"},{"param":"$allowed_html","desc":"Allowed HTML elements","required":"yes"},{"param":"$allowed_protocols","desc":"Allowed protocols to keep","required":"yes"}]},"wp_kses_stripslashes":{"desc":"Strips slashes from in front of quotes.","params":[{"param":"$string","desc":"String to strip slashes","required":"yes"}]},"wp_kses_version":{"desc":"This function returns kses’ version number.","params":[]},"wp_link_category_checklist":{"desc":"Outputs a link category checklist element.","params":[{"param":"$link_id","desc":"","required":"yes"}]},"wp_link_manager_disabled_message":{"desc":"Outputs the ‘disabled’ message for the WordPress Link Manager.","params":[]},"wp_link_pages":{"desc":"The formatted output of a list of pages.","params":[{"param":"$args","desc":"Array or string of default arguments. before(string) HTML or text to prepend to each link. Default is <p> Pages:. after(string) HTML or text to append to each link. Default is </p>. link_before(string) HTML or text to prepend to each link, inside the <a> tag. Also prepended to the current item, which is not linked.  link_after(string) HTML or text to append to each Pages link inside the <a> tag. Also appended to the current item, which is not linked.  next_or_number(string) Indicates whether page numbers should be used. Valid values are number and next. Default is number. separator(string) Text between pagination links. Default is . nextpagelink(string) Link text for the next page link, if available. Default is Next Page. previouspagelink(string) Link text for the previous page link, if available. Default is Previous Page. pagelink(string) Format string for page numbers. The % in the parameter string will be replaced with the page number, so Page % generates Page 1, Page 2, etc. Defaults to %, just the page number. echo(int|bool) Whether to echo or not. Accepts 1|true or 0|false. Default 1|true.  ","required":"no"}]},"wp_list_authors":{"desc":"List all the authors of the site, with several options available.","params":[{"param":"$args","desc":"Array or string of default arguments. orderby(string) How to sort the authors. Accepts nicename, email, url, registered, user_nicename, user_email, user_url, user_registered, name, display_name, post_count, ID, meta_value, user_login. Default name. order(string) Sorting direction for $orderby. Accepts ASC, DESC. Default ASC. number(int) Maximum authors to return or display. Default empty (all authors). optioncount(bool) Show the count in parenthesis next to the authors name. Default false. exclude_admin(bool) Whether to exclude the admin account, if it exists. Default false. show_fullname(bool) Whether to show the authors full name. Default false. hide_empty(bool) Whether to hide any authors with no posts. Default true. feed(string) If not empty, show a link to the authors feed and use this text as the alt parameter of the link.  feed_image(string) If not empty, show a link to the authors feed and use this image URL as clickable anchor.  feed_type(string) The feed type to link to, such as rss2. Defaults to default feed type. echo(bool) Whether to output the result or instead return it. Default true. style(string) If list, each author is wrapped in an <li> element, otherwise the authors will be separated by commas. html(bool) Whether to list the items in HTML form or plaintext. Default true. exclude(array|string) Array or comma/space-separated list of author IDs to exclude.  include(array|string) Array or comma/space-separated list of author IDs to include.   ","required":"no"}]},"wp_list_bookmarks":{"desc":"Retrieve or echo all of the bookmarks.","params":[{"param":"$args","desc":"String or array of arguments to list bookmarks. orderby(string) How to order the links by. Accepts post fields. Default name. order(string) Whether to order bookmarks in ascending or descending order. Accepts ASC (ascending) or DESC (descending). Default ASC. limit(int) Amount of bookmarks to display. Accepts 1+ or -1 for all. Default -1. category(string) Comma-separated list of category ids to include links from.  category_name(string) Category to retrieve links for by name.  hide_invisible(int|bool) Whether to show or hide links marked as invisible. Accepts 1|true or 0|false. Default 1|true. show_updated(int|bool) Whether to display the time the bookmark was last updated. Accepts 1|true or 0|false. Default 0|false. echo(int|bool) Whether to echo or return the formatted bookmarks. Accepts 1|true (echo) or 0|false (return). Default 1|true. categorize(int|bool) Whether to show links listed by category or in a single column. Accepts 1|true (by category) or 0|false (one column). Default 1|true. show_description(int|bool) Whether to show the bookmark descriptions. Accepts 1|true or 0|false. Default 0|false. title_li(string) What to show before the links appear. Default Bookmarks. title_before(string) The HTML or text to prepend to the $title_li string. Default <h2>. title_after(string) The HTML or text to append to the $title_li string. Default </h2>. class(string) The CSS class to use for the $title_li. Default linkcat. category_before(string) The HTML or text to prepend to $title_before if $categorize is true. String must contain %id and %class to inherit the category ID and the $class argument used for formatting in themes. Default <li id=%id class=%class>. category_after(string) The HTML or text to append to $title_after if $categorize is true. Default </li>. category_orderby(string) How to order the bookmark category based on term scheme if $categorize is true. Default name. category_order(string) Whether to order categories in ascending or descending order if $categorize is true. Accepts ASC (ascending) or DESC (descending). Default ASC.  ","required":"no"}]},"wp_list_categories":{"desc":"Display or retrieve the HTML list of categories.","params":[{"param":"$args","desc":"Array of optional arguments. child_of(int) Term ID to retrieve child terms of. See get_terms(). Default 0. current_category(int|array) ID of category, or array of IDs of categories, that should get the current-cat class. Default 0. depth(int) Category depth. Used for tab indentation. Default 0. echo(bool|int) True to echo markup, false to return it. Default 1. exclude(array|string) Array or comma/space-separated string of term IDs to exclude. If $hierarchical is true, descendants of $exclude terms will also be excluded; see $exclude_tree. See get_terms().  exclude_tree(array|string) Array or comma/space-separated string of term IDs to exclude, along with their descendants. See get_terms().  feed(string) Text to use for the feed link. Default Feed for all posts filed under [cat name]. feed_image(string) URL of an image to use for the feed link.  feed_type(string) Feed type. Used to build feed link. See get_term_feed_link(). Default empty string (default feed). hide_empty(bool|int) Whether to hide categories that dont have any posts attached to them. Default 1. hide_title_if_empty(bool) Whether to hide the $title_li element if there are no terms in the list. Default false (title will always be shown). hierarchical(bool) Whether to include terms that have non-empty descendants. See get_terms(). Default true. order(string) Which direction to order categories. Accepts ASC or DESC. Default ASC. orderby(string) The column to use for ordering categories. Default ID. separator(string) Separator between links. Default <br />. show_count(bool|int) Whether to show how many posts are in the category. Default 0. show_option_all(string) Text to display for showing all categories.  show_option_none(string) Text to display for the no categories option. Default No categories. style(string) The style used to display the categories list. If list, categories will be output as an unordered list. If left empty or another value, categories will be output separated by <br> tags. Default list. taxonomy(string) Taxonomy name. Default category. title_li(string) Text to use for the list title <li> element. Pass an empty string to disable. Default Categories. use_desc_for_title(bool|int) Whether to use the category description as the title attribute. Default 1.  ","required":"no"}]},"wp_list_cats":{"desc":"Lists categories.","params":[{"param":"$args","desc":"","required":"no"}]},"wp_list_comments":{"desc":"List comments.","params":[{"param":"$args","desc":"Formatting options. walker(object) Instance of a Walker class to list comments. Default null. max_depth(int) The maximum comments depth.  style(string) The style of list ordering. Default ul. Accepts ul, ol. callback(string) Callback function to use. Default null. end-callback(string) Callback function to use at the end. Default null. type(string) Type of comments to list. Default all. Accepts all, comment, pingback, trackback, pings. page(int) Page ID to list comments for.  per_page(int) Number of comments to list per page.  avatar_size(int) Height and width dimensions of the avatar size. Default 32. reverse_top_level(bool) Ordering of the listed comments. If true, will display newest comments first. reverse_children(bool) Whether to reverse child comments in the list. Default null. format(string) How to format the comments list. Default html5 if the theme supports it. Accepts html5, xhtml. short_ping(bool) Whether to output short pings. Default false. echo(bool) Whether to echo the output or return it. Default true.  ","required":"no"},{"param":"$comments","desc":" Array of WP_Comment objects.","required":"no"}]},"wp_list_filter":{"desc":"Filters a list of objects, based on a set of key => value arguments.","params":[{"param":"$list","desc":"An array of objects to filter.","required":"yes"},{"param":"$args","desc":" An array of key => value arguments to match against each object. ","required":"no"},{"param":"$operator","desc":" The logical operation to perform. AND means all elements from the array must match. OR means only one element needs to match. NOT means no elements may match. ","required":"no"}]},"wp_list_pages":{"desc":"Retrieve or display list of pages in list (li) format.","params":[{"param":"$args","desc":"Array or string of arguments. Optional. child_of(int) Display only the sub-pages of a single page by ID. Default 0 (all pages). authors(string) Comma-separated list of author IDs. Default empty (all authors). date_format(string) PHP date format to use for the listed pages. Relies on the show_date parameter. Default is the value of date_format option. depth(int) Number of levels in the hierarchy of pages to include in the generated list. Accepts -1 (any depth), 0 (all pages), 1 (top-level pages only), and n (pages to the given n depth). Default 0. echo(bool) Whether or not to echo the list of pages. Default true. exclude(string) Comma-separated list of page IDs to exclude.  include(array) Comma-separated list of page IDs to include.  link_after(string) Text or HTML to follow the page link label. Default null. link_before(string) Text or HTML to precede the page link label. Default null. post_type(string) Post type to query for. Default page. post_status(string|array) Comma-separated list or array of post statuses to include. Default publish. show_date(string) Whether to display the page publish or modified date for each page. Accepts modified or any other value. An empty value hides the date.  sort_column(string) Comma-separated list of column names to sort the pages by. Accepts post_author, post_date, post_title, post_name, post_modified, post_modified_gmt, menu_order, post_parent, ID, rand, or comment_count. Default post_title. title_li(string) List heading. Passing a null or empty value will result in no heading, and the list will not be wrapped with unordered list <ul> tags. Default Pages. item_spacing(string) Whether to preserve whitespace within the menus HTML. Accepts preserve or discard. Default preserve. walker(Walker) Walker instance to use for listing pages. Default empty (Walker_Page).  ","required":"no"}]},"wp_list_pluck":{"desc":"Pluck a certain field out of each object in a list.","params":[{"param":"$list","desc":"List of objects or arrays","required":"yes"},{"param":"$field","desc":"Field from the object to place instead of the entire object","required":"yes"},{"param":"$index_key","desc":" Field from the object to use as keys for the new array. ","required":"no"}]},"wp_list_post_revisions":{"desc":"Display list of a post’s revisions.","params":[{"param":"$post_id","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"},{"param":"$type","desc":"all (default), revision or autosave","required":"no"}]},"wp_list_sort":{"desc":"Sorts a list of objects, based on one or more orderby arguments.","params":[{"param":"$list","desc":"An array of objects to filter.","required":"yes"},{"param":"$orderby","desc":" Either the field name to order by or an array of multiple orderby fields as $orderby => $order.","required":"no"},{"param":"$order","desc":" Either ASC or DESC. Only used if $orderby is a string.","required":"no"},{"param":"$preserve_keys","desc":" Whether to preserve keys. ","required":"no"}]},"wp_list_widgets":{"desc":"Display list of the available widgets.","params":[]},"wp_list_widget_controls":{"desc":"Show the widgets and their settings for a sidebar.","params":[{"param":"$sidebar","desc":"Sidebar ID.","required":"yes"},{"param":"$sidebar_name","desc":" Sidebar name. ","required":"no"}]},"wp_list_widget_controls_dynamic_sidebar":{"desc":"Retrieves the widget control arguments.","params":[{"param":"$params","desc":"","required":"yes"}]},"wp_load_alloptions":{"desc":"Loads and caches all autoloaded options, if available or all options.","params":[]},"wp_load_core_site_options":{"desc":"Loads and caches certain often requested site options if is_multisite() and a persistent cache is not being used.","params":[{"param":"$site_id","desc":"site ID for which to query the options. Defaults to the current site.","required":"no"}]},"wp_load_image":{"desc":"Load an image from a string, if PHP supports it.","params":[{"param":"$file","desc":"Filename of the image to load.","required":"yes"}]},"wp_load_translations_early":{"desc":"Attempt an early load of translations.","params":[]},"wp_localize_jquery_ui_datepicker":{"desc":"Localizes the jQuery UI datepicker.","params":[]},"wp_localize_script":{"desc":"Localize a script.","params":[{"param":"$handle","desc":"Script handle the data will be attached to.","required":"yes"},{"param":"$object_name","desc":"Name for the JavaScript object. Passed directly, so it should be qualified JS variable. Example: /[a-zA-Z0-9_]+/.","required":"yes"},{"param":"$l10n","desc":"The data itself. The data can be either a single or multi-dimensional array.","required":"yes"}]},"wp_login":{"desc":"Checks a users login information and logs them in if it checks out. This function is deprecated.","params":[{"param":"$username","desc":"Users username","required":"yes"},{"param":"$password","desc":"Users password","required":"yes"},{"param":"$deprecated","desc":"Not used","required":"no"}]},"wp_loginout":{"desc":"Display the Log In/Out link.","params":[{"param":"$redirect","desc":"path to redirect to on login/logout.","required":"no"},{"param":"$echo","desc":"Default to echo and not return the link.","required":"no"}]},"wp_login_form":{"desc":"Provides a simple login form for use anywhere within WordPress.","params":[{"param":"$args","desc":"Array of options to control the form output. echo(bool) Whether to display the login form or return the form HTML code. Default true (echo). redirect(string) URL to redirect to. Must be absolute, as in <a href=https://example.com/mypage/>https://example.com/mypage/</a>. Default is to redirect back to the request URI. form_id(string) ID attribute value for the form. Default loginform. label_username(string) Label for the username or email address field. Default Username or Email Address. label_password(string) Label for the password field. Default Password. label_remember(string) Label for the remember field. Default Remember Me. label_log_in(string) Label for the submit button. Default Log In. id_username(string) ID attribute value for the username field. Default user_login. id_password(string) ID attribute value for the password field. Default user_pass. id_remember(string) ID attribute value for the remember field. Default rememberme. id_submit(string) ID attribute value for the submit button. Default wp-submit. remember(bool) Whether to display the rememberme checkbox in the form. value_username(string) Default value for the username field.  value_remember(bool) Whether the Remember Me checkbox should be checked by default. Default false (unchecked).  ","required":"no"}]},"wp_login_url":{"desc":"Retrieves the login URL.","params":[{"param":"$redirect","desc":"Path to redirect to on log in.","required":"no"},{"param":"$force_reauth","desc":"Whether to force reauthorization, even if a cookie is present. ","required":"no"}]},"wp_login_viewport_meta":{"desc":"","params":[]},"wp_logout":{"desc":"Log the current user out.","params":[]},"wp_logout_url":{"desc":"Retrieves the logout URL.","params":[{"param":"$redirect","desc":"Path to redirect to on logout.","required":"no"}]},"wp_lostpassword_url":{"desc":"Returns the URL that allows the user to retrieve the lost password","params":[{"param":"$redirect","desc":"Path to redirect to on login.","required":"no"}]},"wp_magic_quotes":{"desc":"Add magic quotes to `$_GET`, `$_POST`, `$_COOKIE`, and `$_SERVER`.","params":[]},"wp_mail":{"desc":"Send mail, similar to PHP’s mail","params":[{"param":"$to","desc":"Array or comma-separated list of email addresses to send message.","required":"yes"},{"param":"$subject","desc":"Email subject","required":"yes"},{"param":"$message","desc":"Message contents","required":"yes"},{"param":"$headers","desc":" Additional headers.","required":"no"},{"param":"$attachments","desc":" Files to attach.","required":"no"}]},"wp_maintenance":{"desc":"Die with a maintenance message when conditions are met.","params":[]},"wp_make_content_images_responsive":{"desc":"Filters ‘img’ elements in post content to add ‘srcset’ and ‘sizes’ attributes.","params":[{"param":"$content","desc":"The raw post content to be filtered.","required":"yes"}]},"wp_make_link_relative":{"desc":"Convert full URL paths to absolute paths.","params":[{"param":"$link","desc":"Full URL path.","required":"yes"}]},"wp_match_mime_types":{"desc":"Check a MIME-Type against a list.","params":[{"param":"$wildcard_mime_types","desc":"Mime types, e.g. audio/mpeg or image (same as image/*) or flash (same as *flash*).","required":"yes"},{"param":"$real_mime_types","desc":"Real post mime type values.","required":"yes"}]},"wp_max_upload_size":{"desc":"Determines the maximum upload size allowed in php.ini.","params":[]},"wp_maybe_auto_update":{"desc":"Performs WordPress automatic background updates.","params":[]},"wp_maybe_decline_date":{"desc":"Determines if the date should be declined.","params":[{"param":"$date","desc":"Formatted date string.","required":"yes"}]},"wp_maybe_generate_attachment_metadata":{"desc":"Maybe attempts to generate attachment metadata, if missing.","params":[{"param":"$attachment","desc":"Attachment object.","required":"yes"}]},"wp_maybe_load_embeds":{"desc":"Determines if default embed handlers should be loaded.","params":[]},"wp_maybe_load_widgets":{"desc":"Determines if Widgets library should be loaded.","params":[]},"wp_maybe_update_network_site_counts":{"desc":"Update the count of sites for the current network.","params":[]},"wp_maybe_update_network_user_counts":{"desc":"Update the network-wide users count.","params":[]},"wp_mediaelement_fallback":{"desc":"Provides a No-JS Flash fallback as a last resort for audio / video.","params":[{"param":"$url","desc":"The media element URL.","required":"yes"}]},"wp_media_attach_action":{"desc":"Encapsulate logic for Attach/Detach actions","params":[{"param":"$parent_id","desc":"Attachment parent ID.","required":"yes"},{"param":"$action","desc":" Attach/detach action. Accepts attach or detach. ","required":"no"}]},"wp_media_insert_url_form":{"desc":"Creates the form for external url","params":[{"param":"$default_view","desc":"","required":"no"}]},"wp_media_upload_handler":{"desc":"Handles the process of uploading media.","params":[]},"wp_meta":{"desc":"Theme container function for the ‘wp_meta’ action.","params":[]},"wp_metadata_lazyloader":{"desc":"Retrieves the queue for lazy-loading metadata.","params":[]},"wp_mime_type_icon":{"desc":"Retrieve the icon for a MIME type.","params":[{"param":"$mime","desc":"MIME type or attachment ID.","required":"yes"}]},"wp_mkdir_p":{"desc":"Recursive directory creation based on full path.","params":[{"param":"$target","desc":"Full path to attempt to create.","required":"yes"}]},"wp_nav_menu":{"desc":"Displays a navigation menu.","params":[{"param":"$args","desc":"Array of nav menu arguments. menu(int|string|WP_Term) Desired menu. Accepts (matching in order) id, slug, name, menu object.  menu_class(string) CSS class to use for the ul element which forms the menu. Default menu. menu_id(string) The ID that is applied to the ul element which forms the menu. Default is the menu slug, incremented. container(string) Whether to wrap the ul, and what to wrap it with. Default div. container_class(string) Class that is applied to the container. Default menu-{menu slug}-container. container_id(string) The ID that is applied to the container.  fallback_cb(callable|bool) If the menu doesnt exists, a callback function will fire. Default is wp_page_menu. Set to false for no fallback. before(string) Text before the link markup.  after(string) Text after the link markup.  link_before(string) Text before the link text.  link_after(string) Text after the link text.  echo(bool) Whether to echo the menu or return it. Default true. depth(int) How many levels of the hierarchy are to be included. 0 means all. Default 0. walker(object) Instance of a custom walker class.  theme_location(string) Theme location to be used. Must be registered with register_nav_menu() in order to be selectable by the user. items_wrap(string) How the list items should be wrapped. Default is a ul with an id and class. Uses printf() format with numbered placeholders. item_spacing(string) Whether to preserve whitespace within the menus HTML. Accepts preserve or discard. Default preserve.  ","required":"no"}]},"wp_nav_menu_disabled_check":{"desc":"Check whether to disable the Menu Locations meta box submit button","params":[{"param":"$nav_menu_selected_id","desc":"(id, name or slug) of the currently-selected menu","required":"yes"}]},"wp_nav_menu_item_link_meta_box":{"desc":"Displays a meta box for the custom links menu item.","params":[]},"wp_nav_menu_item_post_type_meta_box":{"desc":"Displays a meta box for a post type menu item.","params":[{"param":"$object","desc":"Not used.","required":"yes"},{"param":"$box","desc":"Post type menu item meta box arguments. id(string) Meta box id attribute. title(string) Meta box title. callback(string) Meta box display callback. args(WP_Post_Type) Extra meta box arguments (the post type object for this meta box).  ","required":"yes"}]},"wp_nav_menu_item_taxonomy_meta_box":{"desc":"Displays a meta box for a taxonomy menu item.","params":[{"param":"$object","desc":"Not used.","required":"yes"},{"param":"$box","desc":"Taxonomy menu item meta box arguments. id(string) Meta box id attribute. title(string) Meta box title. callback(string) Meta box display callback. args(object) Extra meta box arguments (the taxonomy object for this meta box).  ","required":"yes"}]},"wp_nav_menu_locations_meta_box":{"desc":"This was once used to display a meta box for the nav menu theme locations.","params":[]},"wp_nav_menu_manage_columns":{"desc":"Returns the columns for the nav menus page.","params":[]},"wp_nav_menu_max_depth":{"desc":"","params":[{"param":"$classes","desc":"","required":"yes"}]},"wp_nav_menu_post_type_meta_boxes":{"desc":"Creates meta boxes for any post type menu item.","params":[]},"wp_nav_menu_setup":{"desc":"Register nav menu meta boxes and advanced menu items.","params":[]},"wp_nav_menu_taxonomy_meta_boxes":{"desc":"Creates meta boxes for any taxonomy menu item.","params":[]},"wp_nav_menu_update_menu_items":{"desc":"Saves nav menu items","params":[{"param":"$nav_menu_selected_id","desc":"(id, slug, or name ) of the currently-selected menu","required":"yes"},{"param":"$nav_menu_selected_title","desc":"Title of the currently-selected menu","required":"yes"}]},"wp_network_dashboard_right_now":{"desc":"","params":[]},"wp_new_blog_notification":{"desc":"Notifies the site admin that the setup is complete.","params":[{"param":"$blog_title","desc":"Site title.","required":"yes"},{"param":"$blog_url","desc":"Site url.","required":"yes"},{"param":"$user_id","desc":"User ID.","required":"yes"},{"param":"$password","desc":"Users Password.","required":"yes"}]},"wp_new_comment":{"desc":"Adds a new comment to the database.","params":[{"param":"$commentdata","desc":"Comment data. comment_author(string) The name of the comment author. comment_author_email(string) The comment author email address. comment_author_url(string) The comment author URL. comment_content(string) The content of the comment. comment_date(string) The date the comment was submitted. Default is the current time. comment_date_gmt(string) The date the comment was submitted in the GMT timezone. Default is $comment_date in the GMT timezone. comment_parent(int) The ID of this comments parent, if any. Default 0. comment_post_ID(int) The ID of the post that relates to the comment. user_id(int) The ID of the user who submitted the comment. Default 0. user_ID(int) Kept for backward-compatibility. Use $user_id instead. comment_agent(string) Comment author user agent. Default is the value of HTTP_USER_AGENT in the $_SERVER superglobal sent in the original request. comment_author_IP(string) Comment author IP address in IPv4 format. Default is the value of REMOTE_ADDR in the $_SERVER superglobal sent in the original request.  ","required":"yes"},{"param":"$avoid_die","desc":"Should errors be returned as WP_Error objects instead of executing wp_die()? ","required":"no"}]},"wp_new_comment_notify_moderator":{"desc":"Send a comment moderation notification to the comment moderator.","params":[{"param":"$comment_ID","desc":"ID of the comment.","required":"yes"}]},"wp_new_comment_notify_postauthor":{"desc":"Send a notification of a new comment to the post author.","params":[{"param":"$comment_ID","desc":"Comment ID.","required":"yes"}]},"wp_new_user_notification":{"desc":"Email login credentials to a newly-registered user.","params":[{"param":"$user_id","desc":"User ID.","required":"yes"},{"param":"$deprecated","desc":"Not used (argument deprecated).","required":"no"},{"param":"$notify","desc":" Type of notification that should happen. Accepts admin or an empty string (admin only), user, or both (admin and user). ","required":"no"}]},"wp_next_scheduled":{"desc":"Retrieve the next timestamp for a cron event.","params":[{"param":"$hook","desc":"Action hook to execute when event is run.","required":"yes"},{"param":"$args","desc":" Arguments to pass to the hooks callback function.","required":"no"}]},"wp_nonce_ays":{"desc":"Display “Are You Sure” message to confirm the action being taken.","params":[{"param":"$action","desc":"The nonce action.","required":"yes"}]},"wp_nonce_field":{"desc":"Retrieve or display nonce hidden field for forms.","params":[{"param":"$action","desc":" Action name. ","required":"no"},{"param":"$name","desc":" Nonce name. Default _wpnonce.","required":"no"},{"param":"$referer","desc":" Whether to set the referer field for validation. ","required":"no"},{"param":"$echo","desc":" Whether to display or return hidden form field. ","required":"no"}]},"wp_nonce_tick":{"desc":"Get the time-dependent variable for nonce creation.","params":[]},"wp_nonce_url":{"desc":"Retrieve URL with nonce added to URL query.","params":[{"param":"$actionurl","desc":"URL to add nonce action.","required":"yes"},{"param":"$action","desc":" Nonce action name. ","required":"no"},{"param":"$name","desc":" Nonce name. ","required":"no"}]},"wp_normalize_path":{"desc":"Normalize a filesystem path.","params":[{"param":"$path","desc":"Path to normalize.","required":"yes"}]},"wp_notify_moderator":{"desc":"Notifies the moderator of the site about a new comment that is awaiting approval.","params":[{"param":"$comment_id","desc":"Comment ID.","required":"yes"}]},"wp_notify_postauthor":{"desc":"Notify an author (and/or others) of a comment/trackback/pingback on a post.","params":[{"param":"$comment_id","desc":"Comment ID or WP_Comment object.","required":"yes"},{"param":"$deprecated","desc":"Not used","required":"no"}]},"wp_not_installed":{"desc":"Redirect to the installer if WordPress is not installed.","params":[]},"wp_no_robots":{"desc":"Display a noindex meta tag.","params":[]},"wp_ob_end_flush_all":{"desc":"Flush all output buffers for PHP 5.2.","params":[]},"wp_oembed_add_discovery_links":{"desc":"Adds oEmbed discovery links in the website .","params":[]},"wp_oembed_add_host_js":{"desc":"Adds the necessary JavaScript to communicate with the embedded iframes.","params":[]},"wp_oembed_add_provider":{"desc":"Adds a URL format and oEmbed provider URL pair.","params":[{"param":"$format","desc":"The format of URL that this provider can handle. You can use asterisks as wildcards.","required":"yes"},{"param":"$provider","desc":"The URL to the oEmbed provider.","required":"yes"},{"param":"$regex","desc":" Whether the $format parameter is in a RegEx format. ","required":"no"}]},"wp_oembed_ensure_format":{"desc":"Ensures that the specified format is either ‘json’ or ‘xml’.","params":[{"param":"$format","desc":"The oEmbed response format. Accepts json or xml.","required":"yes"}]},"wp_oembed_get":{"desc":"Attempts to fetch the embed HTML for a provided URL using oEmbed.","params":[{"param":"$url","desc":"The URL that should be embedded.","required":"yes"},{"param":"$args","desc":" Additional arguments and parameters for retrieving embed HTML. ","required":"no"}]},"wp_oembed_register_route":{"desc":"Registers the oEmbed REST API route.","params":[]},"wp_oembed_remove_provider":{"desc":"Removes an oEmbed provider.","params":[{"param":"$format","desc":"The URL format for the oEmbed provider to remove.","required":"yes"}]},"wp_old_slug_redirect":{"desc":"Redirect old slugs to the correct permalink.","params":[]},"wp_original_referer_field":{"desc":"Retrieve or display original referer hidden field for forms.","params":[{"param":"$echo","desc":" Whether to echo the original http referer. ","required":"no"},{"param":"$jump_back_to","desc":" Can be previous or page you want to jump back to. ","required":"no"}]},"wp_page_menu":{"desc":"Display or retrieve list of pages with optional home link.","params":[{"param":"$args","desc":"Arguments to generate a page menu. See wp_list_pages() for additional arguments. sort_column(string) How to short the list of pages. Accepts post column names. Default menu_order, post_title. menu_id(string) ID for the div containing the page list. Default is empty string. menu_class(string) Class to use for the element containing the page list. Default menu. container(string) Element to use for the element containing the page list. Default div. echo(bool) Whether to echo the list or return it. Accepts true (echo) or false (return). Default true. show_home(int|bool|string) Whether to display the link to the home page. Can just enter the text youd like shown for the home link. 1|true defaults to Home. link_before(string) The HTML or text to prepend to $show_home text.  link_after(string) The HTML or text to append to $show_home text.  before(string) The HTML or text to prepend to the menu. Default is <ul>. after(string) The HTML or text to append to the menu. Default is </ul>. item_spacing(string) Whether to preserve whitespace within the menus HTML. Accepts preserve or discard. Default discard. walker(Walker) Walker instance to use for listing pages. Default empty (Walker_Page).  ","required":"no"}]},"wp_page_reload_on_back_button_js":{"desc":"Outputs JS that reloads the page if the user navigated to it with the Back or Forward button.","params":[]},"wp_parse_args":{"desc":"Merge user defined arguments into defaults array.","params":[{"param":"$args","desc":"Value to merge with $defaults.","required":"yes"},{"param":"$defaults","desc":" Array that serves as the defaults. ","required":"no"}]},"wp_parse_auth_cookie":{"desc":"Parse a cookie into its components","params":[{"param":"$cookie","desc":"","required":"no"},{"param":"$scheme","desc":" The cookie scheme to use: auth, secure_auth, or logged_in","required":"no"}]},"wp_parse_id_list":{"desc":"Clean up an array, comma- or space-separated list of IDs.","params":[{"param":"$list","desc":"List of ids.","required":"yes"}]},"wp_parse_slug_list":{"desc":"Clean up an array, comma- or space-separated list of slugs.","params":[{"param":"$list","desc":"List of slugs.","required":"yes"}]},"wp_parse_str":{"desc":"Parses a string into variables to be stored in an array.","params":[{"param":"$string","desc":"The string to be parsed.","required":"yes"},{"param":"$array","desc":"Variables will be stored in this array.","required":"yes"}]},"wp_parse_url":{"desc":"A wrapper for PHP’s parse_url() function that handles consistency in the return values across PHP versions.","params":[{"param":"$url","desc":"The URL to parse.","required":"yes"},{"param":"$component","desc":"The specific component to retrieve. Use one of the PHP predefined constants to specify which one. Defaults to -1 (= return all parts as an array). @see <a href=http://php.net/manual/en/function.parse-url.php>http://php.net/manual/en/function.parse-url.php</a>","required":"no"}]},"wp_password_change_notification":{"desc":"Notify the blog admin of a user changing password, normally via email.","params":[{"param":"$user","desc":"User object.","required":"yes"}]},"wp_playlist_scripts":{"desc":"Outputs and enqueue default scripts and styles for playlists.","params":[{"param":"$type","desc":"Type of playlist. Accepts audio or video.","required":"yes"}]},"wp_playlist_shortcode":{"desc":"Builds the Playlist shortcode output.","params":[{"param":"$attr","desc":"Array of default playlist attributes. type(string) Type of playlist to display. Accepts audio or video. Default audio. order(string) Designates ascending or descending order of items in the playlist. Accepts ASC, DESC. Default ASC. orderby(string) Any column, or columns, to sort the playlist. If $ids are passed, this defaults to the order of the $ids array (post__in). Otherwise default is menu_order ID. id(int) If an explicit $ids array is not present, this parameter will determine which attachments are used for the playlist. Default is the current post ID. ids(array) Create a playlist out of these explicit attachment IDs. If empty, a playlist will be created from all $type attachments of $id. Default empty. exclude(array) List of specific attachment IDs to exclude from the playlist. Default empty. style(string) Playlist style to use. Accepts light or dark. Default light. tracklist(bool) Whether to show or hide the playlist. Default true. tracknumbers(bool) Whether to show or hide the numbers next to entries in the playlist. Default true. images(bool) Show or hide the video or audio thumbnail (Featured Image/post thumbnail). Default true. artists(bool) Whether to show or hide artist name in the playlist. Default true.  ","required":"yes"}]},"wp_plugin_directory_constants":{"desc":"Defines plugin directory WordPress constants","params":[]},"wp_plugin_update_row":{"desc":"","params":[{"param":"$file","desc":"Plugin basename.","required":"yes"},{"param":"$plugin_data","desc":"Plugin information.","required":"yes"}]},"wp_plugin_update_rows":{"desc":"","params":[]},"wp_plupload_default_settings":{"desc":"Prints default Plupload arguments.","params":[]},"wp_popular_terms_checklist":{"desc":"Retrieve a list of the most popular terms from the specified taxonomy.","params":[{"param":"$taxonomy","desc":"Taxonomy to retrieve terms from.","required":"yes"},{"param":"$default","desc":"Not used.","required":"yes"},{"param":"$number","desc":"Number of terms to retrieve. Defaults to 10.","required":"no"},{"param":"$echo","desc":"y output the list as well. Defaults to true.","required":"no"}]},"wp_post_mime_type_where":{"desc":"Convert MIME types into SQL.","params":[{"param":"$post_mime_types","desc":"List of mime types or comma separated string of mime types.","required":"yes"},{"param":"$table_alias","desc":" Specify a table alias, if needed. ","required":"no"}]},"wp_post_preview_js":{"desc":"Outputs a small JS snippet on preview tabs/windows to remove `window.name` on unload.","params":[]},"wp_post_revision_title":{"desc":"Retrieve formatted date timestamp of a revision (linked to that revisions’s page).","params":[{"param":"$revision","desc":"Revision ID or revision object.","required":"yes"},{"param":"$link","desc":" Link to revisionss page?","required":"no"}]},"wp_post_revision_title_expanded":{"desc":"Retrieve formatted date timestamp of a revision (linked to that revisions’s page).","params":[{"param":"$revision","desc":"Revision ID or revision object.","required":"yes"},{"param":"$link","desc":" Link to revisionss page?","required":"no"}]},"wp_preload_dialogs":{"desc":"Preloads TinyMCE dialogs.","params":[]},"wp_prepare_attachment_for_js":{"desc":"Prepares an attachment post object for JS, where it is expected to be JSON-encoded and fit into an Attachment model.","params":[{"param":"$attachment","desc":"Attachment ID or object.","required":"yes"}]},"wp_prepare_revisions_for_js":{"desc":"Prepare revisions for JavaScript.","params":[{"param":"$post","desc":"The post object. Also accepts a post ID.","required":"yes"},{"param":"$selected_revision_id","desc":"The selected revision ID.","required":"yes"},{"param":"$from","desc":" The revision ID to compare from.","required":"no"}]},"wp_prepare_themes_for_js":{"desc":"Prepare themes for JavaScript.","params":[{"param":"$themes","desc":" Array of WP_Theme objects to prepare. Defaults to all allowed themes.","required":"no"}]},"wp_pre_kses_less_than":{"desc":"Convert lone less than signs.","params":[{"param":"$text","desc":"Text to be converted.","required":"yes"}]},"wp_pre_kses_less_than_callback":{"desc":"Callback function used by preg_replace.","params":[{"param":"$matches","desc":"Populated by matches to preg_replace.","required":"yes"}]},"wp_print_admin_notice_templates":{"desc":"Prints the JavaScript templates for update admin notices.","params":[]},"wp_print_editor_js":{"desc":"Prints TinyMCE editor JS.","params":[]},"wp_print_footer_scripts":{"desc":"Hooks to print the scripts and styles in the footer.","params":[]},"wp_print_head_scripts":{"desc":"Prints the script queue in the HTML head on the front end.","params":[]},"wp_print_media_templates":{"desc":"Prints the templates used in the media manager.","params":[]},"wp_print_request_filesystem_credentials_modal":{"desc":"Print the filesystem credentials modal when needed.","params":[]},"wp_print_revision_templates":{"desc":"Print JavaScript templates required for the revisions experience.","params":[]},"wp_print_scripts":{"desc":"Print scripts in document head that are in the $handles queue.","params":[{"param":"$handles","desc":" Scripts to be printed. Default false.","required":"no"}]},"wp_print_styles":{"desc":"Display styles that are in the $handles queue.","params":[{"param":"$handles","desc":"Styles to be printed. Default false.","required":"no"}]},"wp_print_update_row_templates":{"desc":"Prints the JavaScript templates for update and deletion rows in list tables.","params":[]},"wp_protect_special_option":{"desc":"Protect WordPress special option from being modified.","params":[{"param":"$option","desc":"Option name.","required":"yes"}]},"wp_prototype_before_jquery":{"desc":"Reorder JavaScript scripts array to place prototype before jQuery.","params":[{"param":"$js_array","desc":"JavaScript scripts array","required":"yes"}]},"wp_publish_post":{"desc":"Publish a post by transitioning the post status.","params":[{"param":"$post","desc":"Post ID or post object.","required":"yes"}]},"wp_queue_comments_for_comment_meta_lazyload":{"desc":"Queues comments for metadata lazy-loading.","params":[{"param":"$comments","desc":"Array of comment objects.","required":"yes"}]},"wp_queue_posts_for_term_meta_lazyload":{"desc":"Queues posts for lazy-loading of term meta.","params":[{"param":"$posts","desc":"Array of WP_Post objects.","required":"yes"}]},"wp_quicktags":{"desc":"Handles quicktags.","params":[]},"wp_raise_memory_limit":{"desc":"Attempts to raise the PHP memory limit for memory intensive processes.","params":[{"param":"$context","desc":" Context in which the function is called. Accepts either admin, image, or an arbitrary other context. If an arbitrary context is passed, the similarly arbitrary {$context_memory_limit} filter will be invoked. ","required":"no"}]},"wp_rand":{"desc":"Generates a random number","params":[{"param":"$min","desc":"Lower limit for the generated number","required":"yes"},{"param":"$max","desc":"Upper limit for the generated number","required":"yes"}]},"wp_read_audio_metadata":{"desc":"Retrieve metadata from a audio file’s ID3 tags","params":[{"param":"$file","desc":"Path to file.","required":"yes"}]},"wp_read_image_metadata":{"desc":"Get extended image metadata, exif or iptc as available.","params":[{"param":"$file","desc":"","required":"yes"}]},"wp_read_video_metadata":{"desc":"Retrieve metadata from a video file’s ID3 tags","params":[{"param":"$file","desc":"Path to file.","required":"yes"}]},"wp_redirect":{"desc":"Redirects to another page.","params":[{"param":"$location","desc":"The path to redirect to.","required":"yes"},{"param":"$status","desc":"Status code to use.","required":"no"}]},"wp_redirect_admin_locations":{"desc":"Redirects a variety of shorthand URLs to the admin.","params":[]},"wp_referer_field":{"desc":"Retrieve or display referer hidden field for forms.","params":[{"param":"$echo","desc":" Whether to echo or return the referer field. ","required":"no"}]},"wp_refresh_post_lock":{"desc":"Check lock status on the New/Edit Post screen and refresh the lock","params":[{"param":"$response","desc":"The Heartbeat response.","required":"yes"},{"param":"$data","desc":"The $_POST data sent.","required":"yes"},{"param":"$screen_id","desc":"The screen id.","required":"yes"}]},"wp_refresh_post_nonces":{"desc":"Check nonce expiration on the New/Edit Post screen and refresh if needed","params":[{"param":"$response","desc":"The Heartbeat response.","required":"yes"},{"param":"$data","desc":"The $_POST data sent.","required":"yes"},{"param":"$screen_id","desc":"The screen id.","required":"yes"}]},"wp_register":{"desc":"Display the Registration or Admin link.","params":[{"param":"$before","desc":"Text to output before the link. Default <li>.","required":"no"},{"param":"$after","desc":"Text to output after the link. Default </li>.","required":"no"},{"param":"$echo","desc":"Default to echo and not return the link.","required":"no"}]},"wp_register_plugin_realpath":{"desc":"Register a plugin’s real path.","params":[{"param":"$file","desc":"Known path to the file.","required":"yes"}]},"wp_register_script":{"desc":"Register a new script.","params":[{"param":"$handle","desc":"Name of the script. Should be unique.","required":"yes"},{"param":"$src","desc":"Full URL of the script, or path of the script relative to the WordPress root directory.","required":"yes"},{"param":"$deps","desc":" An array of registered script handles this script depends on. ","required":"no"},{"param":"$ver","desc":" String specifying script version number, if it has one, which is added to the URL as a query string for cache busting purposes. If version is set to false, a version number is automatically added equal to current installed WordPress version. If set to null, no version is added.","required":"no"},{"param":"$in_footer","desc":" Whether to enqueue the script before </body> instead of in the <head>. Default false.","required":"no"}]},"wp_register_sidebar_widget":{"desc":"Register an instance of a widget.","params":[{"param":"$id","desc":"Widget ID.","required":"yes"},{"param":"$name","desc":"Widget display title.","required":"yes"},{"param":"$output_callback","desc":"Run when widget is called.","required":"yes"},{"param":"$options","desc":"An array of supplementary widget options for the instance. classname(string) Class name for the widgets HTML container. Default is a shortened version of the output callback name. description(string) Widget description for display in the widget administration panel and/or theme.  ","required":"no"}]},"wp_register_style":{"desc":"Register a CSS stylesheet.","params":[{"param":"$handle","desc":"Name of the stylesheet. Should be unique.","required":"yes"},{"param":"$src","desc":"Full URL of the stylesheet, or path of the stylesheet relative to the WordPress root directory.","required":"yes"},{"param":"$deps","desc":" An array of registered stylesheet handles this stylesheet depends on. ","required":"no"},{"param":"$ver","desc":" String specifying stylesheet version number, if it has one, which is added to the URL as a query string for cache busting purposes. If version is set to false, a version number is automatically added equal to current installed WordPress version. If set to null, no version is added.","required":"no"},{"param":"$media","desc":" The media for which this stylesheet has been defined. Accepts media types like all, print and screen, or media queries like (orientation: portrait) and (max-width: 640px).","required":"no"}]},"wp_register_widget_control":{"desc":"Registers widget control callback for customizing options.","params":[{"param":"$id","desc":"Sidebar ID.","required":"yes"},{"param":"$name","desc":"Sidebar display name.","required":"yes"},{"param":"$control_callback","desc":"Run when sidebar is displayed.","required":"yes"},{"param":"$options","desc":"Array or string of control options. height(int) Never used. Default 200. width(int) Width of the fully expanded control form (but try hard to use the default width). Default 250. id_base(int|string) Required for multi-widgets, i.e widgets that allow multiple instances such as the text widget. The widget id will end up looking like {$id_base}-{$unique_number}.  ","required":"no"}]},"wp_registration_url":{"desc":"Returns the URL that allows the user to register on the site.","params":[]},"wp_rel_nofollow":{"desc":"Adds rel nofollow string to all HTML A elements in content.","params":[{"param":"$text","desc":"Content that may contain HTML A elements.","required":"yes"}]},"wp_rel_nofollow_callback":{"desc":"Callback to add rel=nofollow string to HTML A element.","params":[{"param":"$matches","desc":"Single Match","required":"yes"}]},"wp_remote_fopen":{"desc":"HTTP request for URI to retrieve content.","params":[{"param":"$uri","desc":"URI/URL of web page to retrieve.","required":"yes"}]},"wp_remote_get":{"desc":"Retrieve the raw response from the HTTP request using the GET method.","params":[{"param":"$url","desc":"Site URL to retrieve.","required":"yes"},{"param":"$args","desc":" Request arguments. ","required":"no"}]},"wp_remote_head":{"desc":"Retrieve the raw response from the HTTP request using the HEAD method.","params":[{"param":"$url","desc":"Site URL to retrieve.","required":"yes"},{"param":"$args","desc":" Request arguments. ","required":"no"}]},"wp_remote_post":{"desc":"Retrieve the raw response from the HTTP request using the POST method.","params":[{"param":"$url","desc":"Site URL to retrieve.","required":"yes"},{"param":"$args","desc":" Request arguments. ","required":"no"}]},"wp_remote_request":{"desc":"Retrieve the raw response from the HTTP request.","params":[{"param":"$url","desc":"Site URL to retrieve.","required":"yes"},{"param":"$args","desc":" Request arguments. ","required":"no"}]},"wp_remote_retrieve_body":{"desc":"Retrieve only the body from the raw response.","params":[{"param":"$response","desc":"HTTP response.","required":"yes"}]},"wp_remote_retrieve_cookie":{"desc":"Retrieve a single cookie by name from the raw response.","params":[{"param":"$response","desc":"HTTP response.","required":"yes"},{"param":"$name","desc":"The name of the cookie to retrieve.","required":"yes"}]},"wp_remote_retrieve_cookies":{"desc":"Retrieve only the cookies from the raw response.","params":[{"param":"$response","desc":"HTTP response.","required":"yes"}]},"wp_remote_retrieve_cookie_value":{"desc":"Retrieve a single cookie’s value by name from the raw response.","params":[{"param":"$response","desc":"HTTP response.","required":"yes"},{"param":"$name","desc":"The name of the cookie to retrieve.","required":"yes"}]},"wp_remote_retrieve_header":{"desc":"Retrieve a single header by name from the raw response.","params":[{"param":"$response","desc":"","required":"yes"},{"param":"$header","desc":"Header name to retrieve value from.","required":"yes"}]},"wp_remote_retrieve_headers":{"desc":"Retrieve only the headers from the raw response.","params":[{"param":"$response","desc":"HTTP response.","required":"yes"}]},"wp_remote_retrieve_response_code":{"desc":"Retrieve only the response code from the raw response.","params":[{"param":"$response","desc":"HTTP response.","required":"yes"}]},"wp_remote_retrieve_response_message":{"desc":"Retrieve only the response message from the raw response.","params":[{"param":"$response","desc":"HTTP response.","required":"yes"}]},"wp_removable_query_args":{"desc":"Returns an array of single-use query variable names that can be removed from a URL.","params":[]},"wp_remove_object_terms":{"desc":"Remove term(s) associated with a given object.","params":[{"param":"$object_id","desc":"The ID of the object from which the terms will be removed.","required":"yes"},{"param":"$terms","desc":"The slug(s) or ID(s) of the term(s) to remove.","required":"yes"},{"param":"$taxonomy","desc":"Taxonomy name.","required":"yes"}]},"wp_replace_in_html_tags":{"desc":"Replace characters or phrases within HTML elements only.","params":[{"param":"$haystack","desc":"The text which has to be formatted.","required":"yes"},{"param":"$replace_pairs","desc":"In the form array(from => to, ...).","required":"yes"}]},"wp_reschedule_event":{"desc":"Reschedule a recurring event.","params":[{"param":"$timestamp","desc":"Unix timestamp (UTC) for when to run the event.","required":"yes"},{"param":"$recurrence","desc":"How often the event should recur.","required":"yes"},{"param":"$hook","desc":"Action hook to execute when event is run.","required":"yes"},{"param":"$args","desc":" Arguments to pass to the hooks callback function.","required":"no"}]},"wp_reset_postdata":{"desc":"After looping through a separate query, this function restores the $post global to the current post in the main query.","params":[]},"wp_reset_query":{"desc":"Destroy the previous query and set up a new query.","params":[]},"wp_reset_vars":{"desc":"Resets global variables based on $_GET and $_POST","params":[{"param":"$vars","desc":"An array of globals to reset.","required":"yes"}]},"wp_resolve_numeric_slug_conflicts":{"desc":"Resolve numeric slugs that collide with date permalinks.","params":[{"param":"$query_vars","desc":" Query variables for setting up the loop, as determined in WP::parse_request(). ","required":"no"}]},"wp_resource_hints":{"desc":"Prints resource hints to browsers for pre-fetching, pre-rendering and pre-connecting to web sites.","params":[]},"wp_restore_image":{"desc":"Restores the metadata for a given attachment.","params":[{"param":"$post_id","desc":"Attachment post ID.","required":"yes"}]},"wp_restore_post_revision":{"desc":"Restores a post to the specified revision.","params":[{"param":"$revision_id","desc":"Revision ID or revision object.","required":"yes"},{"param":"$fields","desc":" What fields to restore from. Defaults to all.","required":"no"}]},"wp_revisions_enabled":{"desc":"Determine if revisions are enabled for a given post.","params":[{"param":"$post","desc":"The post object.","required":"yes"}]},"wp_revisions_to_keep":{"desc":"Determine how many revisions to retain for a given post.","params":[{"param":"$post","desc":"The post object.","required":"yes"}]},"wp_revoke_user":{"desc":"Remove all capabilities from user.","params":[{"param":"$id","desc":"User ID.","required":"yes"}]},"wp_richedit_pre":{"desc":"Formats text for the rich text editor.","params":[{"param":"$text","desc":"The text to be formatted.","required":"yes"}]},"wp_roles":{"desc":"Retrieves the global WP_Roles instance and instantiates it if necessary.","params":[]},"wp_rss":{"desc":"Display all RSS items in a HTML ordered list.","params":[{"param":"$url","desc":"URL of feed to display. Will not auto sense feed URL.","required":"yes"},{"param":"$num_items","desc":" Number of items to display, default is all.","required":"no"}]},"wp_safe_redirect":{"desc":"Performs a safe (local) redirect, using wp_redirect().","params":[{"param":"$location","desc":"The path to redirect to.","required":"yes"},{"param":"$status","desc":"Status code to use.","required":"no"}]},"wp_safe_remote_get":{"desc":"Retrieve the raw response from a safe HTTP request using the GET method.","params":[{"param":"$url","desc":"Site URL to retrieve.","required":"yes"},{"param":"$args","desc":" Request arguments. ","required":"no"}]},"wp_safe_remote_head":{"desc":"Retrieve the raw response from a safe HTTP request using the HEAD method.","params":[{"param":"$url","desc":"Site URL to retrieve.","required":"yes"},{"param":"$args","desc":" Request arguments. ","required":"no"}]},"wp_safe_remote_post":{"desc":"Retrieve the raw response from a safe HTTP request using the POST method.","params":[{"param":"$url","desc":"Site URL to retrieve.","required":"yes"},{"param":"$args","desc":" Request arguments. ","required":"no"}]},"wp_safe_remote_request":{"desc":"Retrieve the raw response from a safe HTTP request.","params":[{"param":"$url","desc":"Site URL to retrieve.","required":"yes"},{"param":"$args","desc":" Request arguments. ","required":"no"}]},"wp_salt":{"desc":"Get salt to add to hashes.","params":[{"param":"$scheme","desc":"Authentication scheme (auth, secure_auth, logged_in, nonce)","required":"no"}]},"wp_sanitize_redirect":{"desc":"Sanitizes a URL for use in a redirect.","params":[{"param":"$location","desc":"The path to redirect to.","required":"yes"}]},"wp_save_image":{"desc":"Saves image to post along with enqueued changes in $_REQUEST[‘history’]","params":[{"param":"$post_id","desc":"","required":"yes"}]},"wp_save_image_file":{"desc":"Saves Image to File","params":[{"param":"$filename","desc":"","required":"yes"},{"param":"$image","desc":"","required":"yes"},{"param":"$mime_type","desc":"","required":"yes"},{"param":"$post_id","desc":"","required":"yes"}]},"wp_save_nav_menu_items":{"desc":"Save posted nav menu item data.","params":[{"param":"$menu_id","desc":"The menu ID for which to save this item. $menu_id of 0 makes a draft, orphaned menu item.","required":"yes"},{"param":"$menu_data","desc":"The unsanitized posted menu item data.","required":"no"}]},"wp_save_post_revision":{"desc":"Creates a revision for the current version of a post.","params":[{"param":"$post_id","desc":"The ID of the post to save as a revision.","required":"yes"}]},"wp_scheduled_delete":{"desc":"Permanently delete comments or posts of any type that have held a status of ‘trash’ for the number of days defined in EMPTY_TRASH_DAYS.","params":[]},"wp_schedule_event":{"desc":"Schedule a periodic event.","params":[{"param":"$timestamp","desc":"Unix timestamp (UTC) for when to run the event.","required":"yes"},{"param":"$recurrence","desc":"How often the event should recur.","required":"yes"},{"param":"$hook","desc":"Action hook to execute when event is run.","required":"yes"},{"param":"$args","desc":" Arguments to pass to the hooks callback function.","required":"no"}]},"wp_schedule_single_event":{"desc":"Schedules a hook to run only once.","params":[{"param":"$timestamp","desc":"Unix timestamp (UTC) for when to run the event.","required":"yes"},{"param":"$hook","desc":"Action hook to execute when event is run.","required":"yes"},{"param":"$args","desc":" Arguments to pass to the hooks callback function.","required":"no"}]},"wp_schedule_update_checks":{"desc":"Schedule core, theme, and plugin update checks.","params":[]},"wp_schedule_update_network_counts":{"desc":"Schedule update of the network-wide counts for the current network.","params":[]},"wp_scripts":{"desc":"Initialize $wp_scripts if it has not been set.","params":[]},"wp_script_add_data":{"desc":"Add metadata to a script.","params":[{"param":"$handle","desc":"Name of the script.","required":"yes"},{"param":"$key","desc":"Name of data point for which were storing a value.","required":"yes"},{"param":"$value","desc":"String containing the data to be added.","required":"yes"}]},"wp_script_is":{"desc":"Check whether a script has been added to the queue.","params":[{"param":"$handle","desc":"Name of the script.","required":"yes"},{"param":"$list","desc":" Status of the script to check. Accepts enqueued, registered, queue, to_do, and done.","required":"no"}]},"wp_send_json":{"desc":"Send a JSON response back to an Ajax request.","params":[{"param":"$response","desc":"Variable (usually an array or object) to encode as JSON, then print and die.","required":"yes"},{"param":"$status_code","desc":"The HTTP status code to output.","required":"no"}]},"wp_send_json_error":{"desc":"Send a JSON response back to an Ajax request, indicating failure.","params":[{"param":"$data","desc":"Data to encode as JSON, then print and die.","required":"no"},{"param":"$status_code","desc":"The HTTP status code to output.","required":"no"}]},"wp_send_json_success":{"desc":"Send a JSON response back to an Ajax request, indicating success.","params":[{"param":"$data","desc":"Data to encode as JSON, then print and die.","required":"no"},{"param":"$status_code","desc":"The HTTP status code to output.","required":"no"}]},"wp_send_new_user_notifications":{"desc":"Initiate email notifications related to the creation of new users.","params":[{"param":"$user_id","desc":"ID of the newly created user.","required":"yes"},{"param":"$notify","desc":" Type of notification that should happen. Accepts admin or an empty string (admin only), user, or both (admin and user). ","required":"no"}]},"wp_setcookie":{"desc":"Sets a cookie for a user who just logged in. This function is deprecated.","params":[{"param":"$username","desc":"The users username","required":"yes"},{"param":"$password","desc":" The users password","required":"no"},{"param":"$already_md5","desc":" Whether the password has already been through MD5","required":"no"},{"param":"$home","desc":" Will be used instead of COOKIEPATH if set","required":"no"},{"param":"$siteurl","desc":" Will be used instead of SITECOOKIEPATH if set","required":"no"},{"param":"$remember","desc":" Remember that the user is logged in","required":"no"}]},"wp_setup_nav_menu_item":{"desc":"Decorates a menu item object with the shared navigation menu item properties.","params":[{"param":"$menu_item","desc":"The menu item to modify.","required":"yes"}]},"wp_set_all_user_settings":{"desc":"Private. Set all user interface settings.","params":[{"param":"$user_settings","desc":"User settings.","required":"yes"}]},"wp_set_auth_cookie":{"desc":"Log in a user by setting authentication cookies.","params":[{"param":"$user_id","desc":"User ID","required":"yes"},{"param":"$remember","desc":"Whether to remember the user","required":"no"},{"param":"$secure","desc":"Whether the admin cookies should only be sent over HTTPS. Default is_ssl().","required":"no"},{"param":"$token","desc":" Users session token to use for this cookie.","required":"no"}]},"wp_set_comment_cookies":{"desc":"Sets the cookies used to store an unauthenticated commentator’s identity. Typically used to recall previous comments by this commentator that are still held in moderation.","params":[{"param":"$comment","desc":"Comment object.","required":"yes"},{"param":"$user","desc":"Comment authors object.","required":"yes"}]},"wp_set_comment_status":{"desc":"Sets the status of a comment.","params":[{"param":"$comment_id","desc":"Comment ID or WP_Comment object.","required":"yes"},{"param":"$comment_status","desc":"New comment status, either hold, approve, spam, or trash.","required":"yes"},{"param":"$wp_error","desc":"Whether to return a WP_Error object if there is a failure. Default is false.","required":"no"}]},"wp_set_current_user":{"desc":"Changes the current user by ID or name.","params":[{"param":"$id","desc":"User ID","required":"yes"},{"param":"$name","desc":"Users username","required":"no"}]},"wp_set_internal_encoding":{"desc":"Set internal encoding.","params":[]},"wp_set_lang_dir":{"desc":"Set the location of the language directory.","params":[]},"wp_set_link_cats":{"desc":"Update link with the specified link categories.","params":[{"param":"$link_id","desc":"ID of the link to update.","required":"yes"},{"param":"$link_categories","desc":"Array of link categories to add the link to.","required":"no"}]},"wp_set_object_terms":{"desc":"Create Term and Taxonomy Relationships.","params":[{"param":"$object_id","desc":"The object to relate to.","required":"yes"},{"param":"$terms","desc":"A single term slug, single term id, or array of either term slugs or ids. Will replace all existing related terms in this taxonomy.","required":"yes"},{"param":"$taxonomy","desc":"The context in which to relate the term to the object.","required":"yes"},{"param":"$append","desc":" If false will delete difference of terms. ","required":"no"}]},"wp_set_password":{"desc":"Updates the user’s password with a new encrypted one.","params":[{"param":"$password","desc":"The plaintext new user password","required":"yes"},{"param":"$user_id","desc":"User ID","required":"yes"}]},"wp_set_post_categories":{"desc":"Set categories for a post.","params":[{"param":"$post_ID","desc":" The Post ID. Does not default to the ID of the global $post. Default 0.","required":"no"},{"param":"$post_categories","desc":" List of categories or ID of category. ","required":"no"},{"param":"$append","desc":"If true, dont delete existing categories, just add on. If false, replace the categories with the new categories.","required":"no"}]},"wp_set_post_cats":{"desc":"Sets the categories that the post id belongs to.","params":[{"param":"$blogid","desc":"Not used","required":"no"},{"param":"$post_ID","desc":"","required":"yes"},{"param":"$post_categories","desc":"","required":"no"}]},"wp_set_post_lock":{"desc":"Mark the post as currently being edited by the current user","params":[{"param":"$post_id","desc":"ID of the post to being edited","required":"yes"}]},"wp_set_post_tags":{"desc":"Set the tags for a post.","params":[{"param":"$post_id","desc":" The Post ID. Does not default to the ID of the global $post.","required":"no"},{"param":"$tags","desc":" An array of tags to set for the post, or a string of tags separated by commas. ","required":"no"},{"param":"$append","desc":" If true, dont delete existing tags, just add on. If false, replace the tags with the new tags. ","required":"no"}]},"wp_set_post_terms":{"desc":"Set the terms for a post.","params":[{"param":"$post_id","desc":" The Post ID. Does not default to the ID of the global $post.","required":"no"},{"param":"$tags","desc":" An array of terms to set for the post, or a string of terms separated by commas. ","required":"no"},{"param":"$taxonomy","desc":" Taxonomy name. ","required":"no"},{"param":"$append","desc":" If true, dont delete existing terms, just add on. If false, replace the terms with the new terms. ","required":"no"}]},"wp_set_sidebars_widgets":{"desc":"Set the sidebar widget option to update sidebars.","params":[{"param":"$sidebars_widgets","desc":"Sidebar widgets and their settings.","required":"yes"}]},"wp_set_wpdb_vars":{"desc":"Set the database table prefix and the format specifiers for database table columns.","params":[]},"wp_shake_js":{"desc":"","params":[]},"wp_shortlink_header":{"desc":"Sends a Link: rel=shortlink header if a shortlink is defined for the current page.","params":[]},"wp_shortlink_wp_head":{"desc":"Injects rel=shortlink into the head if a shortlink is defined for the current page.","params":[]},"wp_should_upgrade_global_tables":{"desc":"Determine if global tables should be upgraded.","params":[]},"wp_shrink_dimensions":{"desc":"Calculates the new dimensions for a downsampled image.","params":[{"param":"$width","desc":"Current width of the image","required":"yes"},{"param":"$height","desc":"Current height of the image","required":"yes"},{"param":"$wmax","desc":"Maximum wanted width","required":"no"},{"param":"$hmax","desc":"Maximum wanted height","required":"no"}]},"wp_sidebar_description":{"desc":"Retrieve description for a sidebar.","params":[{"param":"$id","desc":"sidebar ID.","required":"yes"}]},"wp_signon":{"desc":"Authenticates and logs a user in with ‘remember’ capability.","params":[{"param":"$credentials","desc":" User info in order to sign on.","required":"no"},{"param":"$secure_cookie","desc":" Whether to use secure cookie.","required":"no"}]},"wp_site_icon":{"desc":"Display site icon meta tags.","params":[]},"wp_slash":{"desc":"Add slashes to a string or array of strings.","params":[{"param":"$value","desc":"String or array of strings to slash.","required":"yes"}]},"wp_spaces_regexp":{"desc":"Returns the regexp for common whitespace characters.","params":[]},"wp_spam_comment":{"desc":"Marks a comment as Spam","params":[{"param":"$comment_id","desc":"Comment ID or WP_Comment object.","required":"yes"}]},"wp_specialchars":{"desc":"Escaping for HTML blocks.","params":[{"param":"$string","desc":"String to escape.","required":"yes"},{"param":"$quote_style","desc":"Unused.","required":"no"},{"param":"$charset","desc":"Unused.","required":"no"},{"param":"$double_encode","desc":"Whether to double encode. Unused.","required":"no"}]},"wp_specialchars_decode":{"desc":"Converts a number of HTML entities into their special characters.","params":[{"param":"$string","desc":"The text which is to be decoded.","required":"yes"},{"param":"$quote_style","desc":" Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old _wp_specialchars() values; converting single quotes if set to single, double if set to double or both if otherwise set. Default is ENT_NOQUOTES.","required":"no"}]},"wp_sprintf":{"desc":"WordPress implementation of PHP sprintf() with filters.","params":[{"param":"$pattern","desc":"The string which formatted args are inserted.","required":"yes"},{"param":"$args","desc":",... Arguments to be formatted into the $pattern string.","required":"yes"}]},"wp_sprintf_l":{"desc":"Localize list items before the rest of the content.","params":[{"param":"$pattern","desc":"Content containing %l at the beginning.","required":"yes"},{"param":"$args","desc":"List items to prepend to the content and replace %l.","required":"yes"}]},"wp_ssl_constants":{"desc":"Defines cookie related WordPress constants","params":[]},"wp_start_object_cache":{"desc":"Start the WordPress object cache.","params":[]},"wp_star_rating":{"desc":"Output a HTML element with a star rating for a given rating.","params":[{"param":"$args","desc":"Array of star ratings arguments. rating(int) The rating to display, expressed in either a 0.5 rating increment, or percentage. Default 0. type(string) Format that the $rating is in. Valid values are rating (default), or, percent. Default rating. number(int) The number of ratings that makes up this rating. Default 0. echo(bool) Whether to echo the generated markup. False to return the markup instead of echoing it. Default true.  ","required":"no"}]},"wp_staticize_emoji":{"desc":"Convert emoji to a static img element.","params":[{"param":"$text","desc":"The content to encode.","required":"yes"}]},"wp_staticize_emoji_for_email":{"desc":"Convert emoji in emails into static images.","params":[{"param":"$mail","desc":"The email data array.","required":"yes"}]},"wp_stream_image":{"desc":"Streams image in WP_Image_Editor to browser.","params":[{"param":"$image","desc":"","required":"yes"},{"param":"$mime_type","desc":"","required":"yes"},{"param":"$post_id","desc":"","required":"yes"}]},"wp_strip_all_tags":{"desc":"Properly strip all HTML tags including script and style","params":[{"param":"$string","desc":"String containing HTML tags","required":"yes"},{"param":"$remove_breaks","desc":" Whether to remove left over line breaks and white space chars","required":"no"}]},"wp_styles":{"desc":"Initialize $wp_styles if it has not been set.","params":[]},"wp_style_add_data":{"desc":"Add metadata to a CSS stylesheet.","params":[{"param":"$handle","desc":"Name of the stylesheet.","required":"yes"},{"param":"$key","desc":"Name of data point for which were storing a value. Accepts conditional, rtl and suffix, alt and title.","required":"yes"},{"param":"$value","desc":"String containing the CSS data to be added.","required":"yes"}]},"wp_style_is":{"desc":"Check whether a CSS stylesheet has been added to the queue.","params":[{"param":"$handle","desc":"Name of the stylesheet.","required":"yes"},{"param":"$list","desc":" Status of the stylesheet to check. Accepts enqueued, registered, queue, to_do, and done.","required":"no"}]},"wp_style_loader_src":{"desc":"Administration Screen CSS for changing the styles.","params":[{"param":"$src","desc":"Source URL.","required":"yes"},{"param":"$handle","desc":"Either colors or colors-rtl.","required":"yes"}]},"wp_suspend_cache_addition":{"desc":"Temporarily suspend cache additions.","params":[{"param":"$suspend","desc":" Suspends additions if true, re-enables them if false.","required":"no"}]},"wp_suspend_cache_invalidation":{"desc":"Suspend cache invalidation.","params":[{"param":"$suspend","desc":" Whether to suspend or enable cache invalidation. ","required":"no"}]},"wp_tag_cloud":{"desc":"Display tag cloud.","params":[{"param":"$args","desc":" Override default arguments.","required":"no"}]},"wp_templating_constants":{"desc":"Defines templating related WordPress constants","params":[]},"wp_tempnam":{"desc":"Returns a filename of a Temporary unique file.","params":[{"param":"$filename","desc":" Filename to base the Unique file off. ","required":"no"},{"param":"$dir","desc":" Directory to store the file in. ","required":"no"}]},"wp_terms_checklist":{"desc":"Output an unordered list of checkbox input elements labelled with term names.","params":[{"param":"$post_id","desc":" Post ID. Default 0.","required":"no"},{"param":"$args","desc":"Array or string of arguments for generating a terms checklist. descendants_and_self(int) ID of the category to output along with its descendants. Default 0. selected_cats(array) List of categories to mark as checked. Default false. popular_cats(array) List of categories to receive the popular-category class. Default false. walker(object) Walker object to use to build the output. Default is a Walker_Category_Checklist instance. taxonomy(string) Taxonomy to generate the checklist for. Default category. checked_ontop(bool) Whether to move checked items out of the hierarchy and to the top of the list. Default true. echo(bool) Whether to echo the generated markup. False to return the markup instead of echoing it. Default true.  ","required":"no"}]},"wp_term_is_shared":{"desc":"Determine whether a term is shared between multiple taxonomies.","params":[{"param":"$term_id","desc":"","required":"yes"}]},"wp_text_diff":{"desc":"Displays a human readable HTML representation of the difference between two strings.","params":[{"param":"$left_string","desc":"old (left) version of string","required":"yes"},{"param":"$right_string","desc":"new (right) version of string","required":"yes"},{"param":"$args","desc":" Change title, title_left, and title_right defaults.","required":"no"}]},"wp_theme_update_row":{"desc":"","params":[{"param":"$theme_key","desc":"Theme stylesheet.","required":"yes"},{"param":"$theme","desc":"Theme object.","required":"yes"}]},"wp_theme_update_rows":{"desc":"","params":[]},"wp_throttle_comment_flood":{"desc":"Whether a comment should be blocked because of comment flood.","params":[{"param":"$block","desc":"Whether plugin has already blocked comment.","required":"yes"},{"param":"$time_lastcomment","desc":"Timestamp for last comment.","required":"yes"},{"param":"$time_newcomment","desc":"Timestamp for new comment.","required":"yes"}]},"wp_timezone_choice":{"desc":"Gives a nicely-formatted list of timezone strings.","params":[{"param":"$selected_zone","desc":"Selected timezone.","required":"yes"},{"param":"$locale","desc":" Locale to load the timezones in. Default current site locale.","required":"no"}]},"wp_timezone_override_offset":{"desc":"gmt_offset modification for smart timezone handling.","params":[]},"wp_timezone_supported":{"desc":"Check for PHP timezone support","params":[]},"wp_tiny_mce":{"desc":"Outputs the TinyMCE editor.","params":[]},"wp_title":{"desc":"Display or retrieve page title for all areas of blog.","params":[{"param":"$sep","desc":" default is ». How to separate the various items within the page title.","required":"no"},{"param":"$display","desc":" Whether to display or retrieve title.","required":"no"},{"param":"$seplocation","desc":" Direction to display title, right.","required":"no"}]},"wp_title_rss":{"desc":"Display the blog title for display of the feed title.","params":[{"param":"$deprecated","desc":"Unused.","required":"no"}]},"wp_transition_comment_status":{"desc":"Call hooks for when a comment status transition occurs.","params":[{"param":"$new_status","desc":"New comment status.","required":"yes"},{"param":"$old_status","desc":"Previous comment status.","required":"yes"},{"param":"$comment","desc":"Comment data.","required":"yes"}]},"wp_transition_post_status":{"desc":"Fires actions related to the transitioning of a post’s status.","params":[{"param":"$new_status","desc":"Transition to this post status.","required":"yes"},{"param":"$old_status","desc":"Previous post status.","required":"yes"},{"param":"$post","desc":"Post data.","required":"yes"}]},"wp_trash_comment":{"desc":"Moves a comment to the Trash","params":[{"param":"$comment_id","desc":"Comment ID or WP_Comment object.","required":"yes"}]},"wp_trash_post":{"desc":"Move a post or page to the Trash","params":[{"param":"$post_id","desc":" Post ID. Default is ID of the global $post if EMPTY_TRASH_DAYS equals true.","required":"no"}]},"wp_trash_post_comments":{"desc":"Moves comments for a post to the trash.","params":[{"param":"$post","desc":" Post ID or post object. Defaults to global $post.","required":"no"}]},"wp_trim_excerpt":{"desc":"Generates an excerpt from the content, if needed.","params":[{"param":"$text","desc":" The excerpt. If set to empty, an excerpt is generated.","required":"no"}]},"wp_trim_words":{"desc":"Trims text to a certain number of words.","params":[{"param":"$text","desc":"Text to trim.","required":"yes"},{"param":"$num_words","desc":"Number of words. ","required":"no"},{"param":"$more","desc":" What to append if $text needs to be trimmed. Default ….","required":"no"}]},"wp_underscore_audio_template":{"desc":"Output the markup for a audio tag to be used in an Underscore template when data.model is passed.","params":[]},"wp_underscore_playlist_templates":{"desc":"Outputs the templates used by playlists.","params":[]},"wp_underscore_video_template":{"desc":"Output the markup for a video tag to be used in an Underscore template when data.model is passed.","params":[]},"wp_unique_filename":{"desc":"Get a filename that is sanitized and unique for the given directory.","params":[{"param":"$dir","desc":"Directory.","required":"yes"},{"param":"$filename","desc":"File name.","required":"yes"},{"param":"$unique_filename_callback","desc":"Callback. ","required":"no"}]},"wp_unique_post_slug":{"desc":"Computes a unique slug for the post, when given the desired slug and some post details.","params":[{"param":"$slug","desc":"The desired slug (post_name).","required":"yes"},{"param":"$post_ID","desc":"Post ID.","required":"yes"},{"param":"$post_status","desc":"No uniqueness checks are made if the post is still draft or pending.","required":"yes"},{"param":"$post_type","desc":"Post type.","required":"yes"},{"param":"$post_parent","desc":"Post parent ID.","required":"yes"}]},"wp_unique_term_slug":{"desc":"Will make slug unique, if it isn’t already.","params":[{"param":"$slug","desc":"The string that will be tried for a unique slug.","required":"yes"},{"param":"$term","desc":"The term object that the $slug will belong to.","required":"yes"}]},"wp_unregister_GLOBALS":{"desc":"Turn register globals off.","params":[]},"wp_unregister_sidebar_widget":{"desc":"Remove widget from sidebar.","params":[{"param":"$id","desc":"Widget ID.","required":"yes"}]},"wp_unregister_widget_control":{"desc":"Remove control callback for widget.","params":[{"param":"$id","desc":"Widget ID.","required":"yes"}]},"wp_unschedule_event":{"desc":"Unschedule a previously scheduled cron job.","params":[{"param":"$timestamp","desc":"Unix timestamp (UTC) for when to run the event.","required":"yes"},{"param":"$hook","desc":"Action hook, the execution of which will be unscheduled.","required":"yes"},{"param":"$args","desc":"Arguments to pass to the hooks callback function. Although not passed to a callback function, these arguments are used to uniquely identify the scheduled event, so they should be the same as those used when originally scheduling the event.","required":"no"}]},"wp_unslash":{"desc":"Remove slashes from a string or array of strings.","params":[{"param":"$value","desc":"String or array of strings to unslash.","required":"yes"}]},"wp_unspam_comment":{"desc":"Removes a comment from the Spam","params":[{"param":"$comment_id","desc":"Comment ID or WP_Comment object.","required":"yes"}]},"wp_untrash_comment":{"desc":"Removes a comment from the Trash","params":[{"param":"$comment_id","desc":"Comment ID or WP_Comment object.","required":"yes"}]},"wp_untrash_post":{"desc":"Restore a post or page from the Trash.","params":[{"param":"$post_id","desc":" Post ID. Default is ID of the global $post.","required":"no"}]},"wp_untrash_post_comments":{"desc":"Restore comments for a post from the trash.","params":[{"param":"$post","desc":" Post ID or post object. Defaults to global $post.","required":"no"}]},"wp_update_attachment_metadata":{"desc":"Update metadata for an attachment.","params":[{"param":"$post_id","desc":"Attachment ID.","required":"yes"},{"param":"$data","desc":"Attachment data.","required":"yes"}]},"wp_update_category":{"desc":"Aliases wp_insert_category() with minimal args.","params":[{"param":"$catarr","desc":"The cat_ID value is required. All other keys are optional.","required":"yes"}]},"wp_update_comment":{"desc":"Updates an existing comment in the database.","params":[{"param":"$commentarr","desc":"Contains information on the comment.","required":"yes"}]},"wp_update_comment_count":{"desc":"Updates the comment count for post(s).","params":[{"param":"$post_id","desc":"Post ID.","required":"yes"},{"param":"$do_deferred","desc":" Whether to process previously deferred post comment counts. ","required":"no"}]},"wp_update_comment_count_now":{"desc":"Updates the comment count for the post.","params":[{"param":"$post_id","desc":"Post ID","required":"yes"}]},"wp_update_core":{"desc":"This was once used to kick-off the Core Updater.","params":[]},"wp_update_custom_css_post":{"desc":"Update the `custom_css` post for a given theme.","params":[{"param":"$css","desc":"CSS, stored in post_content.","required":"yes"},{"param":"$args","desc":"Args. preprocessed(string) Pre-processed CSS, stored in post_content_filtered. Normally empty string. Optional. stylesheet(string) Stylesheet (child theme) to update. Optional, defaults to current theme/stylesheet.  ","required":"no"}]},"wp_update_link":{"desc":"Updates a link in the database.","params":[{"param":"$linkdata","desc":"Link data to update.","required":"yes"}]},"wp_update_nav_menu_item":{"desc":"Save the properties of a menu item or create a new one.","params":[{"param":"$menu_id","desc":"The ID of the menu. Required. If 0, makes the menu item a draft orphan.","required":"yes"},{"param":"$menu_item_db_id","desc":"The ID of the menu item. If 0, creates a new menu item.","required":"yes"},{"param":"$menu_item_data","desc":"The menu items data.","required":"no"}]},"wp_update_nav_menu_object":{"desc":"Save the properties of a menu or create a new menu with those properties.","params":[{"param":"$menu_id","desc":"The ID of the menu or 0 to create a new menu.","required":"yes"},{"param":"$menu_data","desc":"The array of menu data.","required":"no"}]},"wp_update_network_counts":{"desc":"Update the network-wide counts for the current network.","params":[]},"wp_update_network_site_counts":{"desc":"Update the network-wide site count.","params":[]},"wp_update_network_user_counts":{"desc":"Update the network-wide user count.","params":[]},"wp_update_plugin":{"desc":"This was once used to kick-off the Plugin Updater.","params":[]},"wp_update_plugins":{"desc":"Check plugin versions against the latest versions hosted on WordPress.org.","params":[{"param":"$extra_stats","desc":"Extra statistics to report to the WordPress.org API.","required":"no"}]},"wp_update_post":{"desc":"Update a post with new post data.","params":[{"param":"$postarr","desc":" Post data. Arrays are expected to be escaped, objects are not. Default array.","required":"no"},{"param":"$wp_error","desc":" Allow return of WP_Error on failure. ","required":"no"}]},"wp_update_term":{"desc":"Update term based on arguments provided.","params":[{"param":"$term_id","desc":"The ID of the term","required":"yes"},{"param":"$taxonomy","desc":"The context in which to relate the term to the object.","required":"yes"},{"param":"$args","desc":" Array of get_terms() arguments. ","required":"no"}]},"wp_update_term_count":{"desc":"Updates the amount of terms in taxonomy.","params":[{"param":"$terms","desc":"The term_taxonomy_id of the terms.","required":"yes"},{"param":"$taxonomy","desc":"The context of the term.","required":"yes"},{"param":"$do_deferred","desc":"Whether to flush the deferred term counts too. ","required":"no"}]},"wp_update_term_count_now":{"desc":"Perform term count update immediately.","params":[{"param":"$terms","desc":"The term_taxonomy_id of terms to update.","required":"yes"},{"param":"$taxonomy","desc":"The context of the term.","required":"yes"}]},"wp_update_theme":{"desc":"This was once used to kick-off the Theme Updater.","params":[]},"wp_update_themes":{"desc":"Check theme versions against the latest versions hosted on WordPress.org.","params":[{"param":"$extra_stats","desc":"Extra statistics to report to the WordPress.org API.","required":"no"}]},"wp_update_user":{"desc":"Update a user in the database.","params":[{"param":"$userdata","desc":"An array of user data or a user object of type stdClass or WP_User.","required":"yes"}]},"wp_upgrade":{"desc":"Runs WordPress Upgrade functions.","params":[]},"wp_upload_bits":{"desc":"Create a file in the upload folder with given content.","params":[{"param":"$name","desc":"Filename.","required":"yes"},{"param":"$deprecated","desc":"Never used. Set to null.","required":"yes"},{"param":"$bits","desc":"File content","required":"yes"},{"param":"$time","desc":" Time formatted in yyyy/mm. ","required":"no"}]},"wp_upload_dir":{"desc":"Get an array containing the current upload directory’s path and url.","params":[{"param":"$time","desc":" Time formatted in yyyy/mm. ","required":"no"},{"param":"$create_dir","desc":" Whether to check and create the uploads directory. Default true for backward compatibility.","required":"no"},{"param":"$refresh_cache","desc":" Whether to refresh the cache. ","required":"no"}]},"wp_user_settings":{"desc":"Saves and restores user interface settings stored in a cookie.","params":[]},"wp_using_ext_object_cache":{"desc":"Toggle `$_wp_using_ext_object_cache` on and off without directly touching global.","params":[{"param":"$using","desc":"Whether external object cache is being used.","required":"no"}]},"wp_validate_auth_cookie":{"desc":"Validates authentication cookie.","params":[{"param":"$cookie","desc":" If used, will validate contents instead of cookies","required":"no"},{"param":"$scheme","desc":" The cookie scheme to use: auth, secure_auth, or logged_in","required":"no"}]},"wp_validate_boolean":{"desc":"Filter/validate a variable as a boolean.","params":[{"param":"$var","desc":"Boolean value to validate.","required":"yes"}]},"wp_validate_logged_in_cookie":{"desc":"Validates the logged-in cookie.","params":[{"param":"$user_id","desc":"The user ID (or false) as received from the determine_current_user filter.","required":"yes"}]},"wp_validate_redirect":{"desc":"Validates a URL for use in a redirect.","params":[{"param":"$location","desc":"The redirect to validate","required":"yes"},{"param":"$default","desc":"The value to return if $location is not allowed","required":"no"}]},"wp_verify_nonce":{"desc":"Verify that correct nonce was used with time limit.","params":[{"param":"$nonce","desc":"Nonce that was used in the form to verify","required":"yes"},{"param":"$action","desc":"Should give context to what is taking place and be the same when nonce was created.","required":"no"}]},"wp_version_check":{"desc":"Check WordPress version against the newest version.","params":[{"param":"$extra_stats","desc":"Extra statistics to report to the WordPress.org API.","required":"no"},{"param":"$force_check","desc":"Whether to bypass the transient cache and force a fresh update check. Defaults to false, true if $extra_stats is set.","required":"no"}]},"wp_video_shortcode":{"desc":"Builds the Video shortcode output.","params":[{"param":"$attr","desc":"Attributes of the shortcode. src(string) URL to the source of the video file. Default empty. height(int) Height of the video embed in pixels. Default 360. width(int) Width of the video embed in pixels. Default $content_width or 640. poster(string) The poster attribute for the <video> element. Default empty. loop(string) The loop attribute for the <video> element. Default empty. autoplay(string) The autoplay attribute for the <video> element. Default empty. preload(string) The preload attribute for the <video> element. Default metadata. class(string) The class attribute for the <video> element. Default wp-video-shortcode.  ","required":"yes"},{"param":"$content","desc":"Shortcode content.","required":"no"}]},"wp_welcome_panel":{"desc":"Displays a welcome panel to introduce users to WordPress.","params":[]},"wp_widgets_access_body_class":{"desc":"","params":[{"param":"$classes","desc":"","required":"yes"}]},"wp_widgets_add_menu":{"desc":"Append the Widgets menu to the themes main menu.","params":[]},"wp_widgets_init":{"desc":"Register all of the default WordPress widgets on startup.","params":[]},"wp_widget_control":{"desc":"Meta widget used to display the control form for a widget.","params":[{"param":"$sidebar_args","desc":"","required":"yes"}]},"wp_widget_description":{"desc":"Retrieve description for widget.","params":[{"param":"$id","desc":"Widget ID.","required":"yes"}]},"wp_widget_rss_form":{"desc":"Display RSS widget options form.","params":[{"param":"$args","desc":"Values for input fields.","required":"yes"},{"param":"$inputs","desc":"Override default display options.","required":"no"}]},"wp_widget_rss_output":{"desc":"Display the RSS entries in a list.","params":[{"param":"$rss","desc":"RSS url.","required":"yes"},{"param":"$args","desc":"Widget arguments.","required":"no"}]},"wp_widget_rss_process":{"desc":"Process RSS feed widget data and optionally retrieve feed items.","params":[{"param":"$widget_rss","desc":"RSS widget feed data. Expects unescaped data.","required":"yes"},{"param":"$check_feed","desc":" Whether to check feed for errors.","required":"no"}]},"wp_write_post":{"desc":"Creates a new post from the “Write Post” form using $_POST information.","params":[]},"write_post":{"desc":"Calls wp_write_post() and handles the errors.","params":[]},"wxr_authors_list":{"desc":"Output list of authors with posts","params":[{"param":"$post_ids","desc":"Array of post IDs to filter the query by. Optional.","required":"no"}]},"wxr_category_description":{"desc":"Output a category_description XML tag from a given category object","params":[{"param":"$category","desc":"Category Object","required":"yes"}]},"wxr_cat_name":{"desc":"Output a cat_name XML tag from a given category object","params":[{"param":"$category","desc":"Category Object","required":"yes"}]},"wxr_cdata":{"desc":"Wrap given string in XML CDATA tag.","params":[{"param":"$str","desc":"String to wrap in XML CDATA tag.","required":"yes"}]},"wxr_filter_postmeta":{"desc":"","params":[{"param":"$return_me","desc":"","required":"yes"},{"param":"$meta_key","desc":"","required":"yes"}]},"wxr_nav_menu_terms":{"desc":"Output all navigation menu terms","params":[]},"wxr_post_taxonomy":{"desc":"Output list of taxonomy terms, in XML tag format, associated with a post","params":[]},"wxr_site_url":{"desc":"Return the URL of the site","params":[]},"wxr_tag_description":{"desc":"Output a tag_description XML tag from a given tag object","params":[{"param":"$tag","desc":"Tag Object","required":"yes"}]},"wxr_tag_name":{"desc":"Output a tag_name XML tag from a given tag object","params":[{"param":"$tag","desc":"Tag Object","required":"yes"}]},"wxr_term_description":{"desc":"Output a term_description XML tag from a given term object","params":[{"param":"$term","desc":"Term Object","required":"yes"}]},"wxr_term_meta":{"desc":"Output term meta XML tags for a given term object.","params":[{"param":"$term","desc":"Term object.","required":"yes"}]},"wxr_term_name":{"desc":"Output a term_name XML tag from a given term object","params":[{"param":"$term","desc":"Term Object","required":"yes"}]},"xfn_check":{"desc":"Display checked checkboxes attribute for xfn microformat options.","params":[{"param":"$class","desc":"","required":"yes"},{"param":"$value","desc":"","required":"no"},{"param":"$deprecated","desc":"Never used.","required":"no"}]},"xmlrpc_getpostcategory":{"desc":"Retrieve the post category or categories from XMLRPC XML.","params":[{"param":"$content","desc":"XMLRPC XML Request content","required":"yes"}]},"xmlrpc_getposttitle":{"desc":"Retrieve post title from XMLRPC XML.","params":[{"param":"$content","desc":"XMLRPC XML Request content","required":"yes"}]},"xmlrpc_pingback_error":{"desc":"Default filter attached to xmlrpc_pingback_error.","params":[{"param":"$ixr_error","desc":"","required":"yes"}]},"xmlrpc_removepostdata":{"desc":"XMLRPC XML content without title and category elements.","params":[{"param":"$content","desc":"XML-RPC XML Request content.","required":"yes"}]},"zeroise":{"desc":"Add leading zeros when necessary.","params":[{"param":"$number","desc":"Number to append zeros to if not greater than threshold.","required":"yes"},{"param":"$threshold","desc":"Digit places number needs to be to not have zeros added.","required":"yes"}]},"_":{"desc":"","params":[]},"_access_denied_splash":{"desc":"Displays an access denied message when a user tries to view a site’s dashboard they do not have access to.","params":[]},"_add_post_type_submenus":{"desc":"Add submenus for post types.","params":[]},"_add_themes_utility_last":{"desc":"Adds the (theme) ‘Editor’ link to the bottom of the Appearance menu.","params":[]},"_admin_bar_bump_cb":{"desc":"Default admin bar callback.","params":[]},"_admin_notice_post_locked":{"desc":"Outputs the HTML for the notice to say that someone else is editing or has taken over editing of this post.","params":[]},"_admin_search_query":{"desc":"Displays the search query.","params":[]},"_ajax_wp_die_handler":{"desc":"Kill WordPress ajax execution.","params":[{"param":"$message","desc":"Error message.","required":"yes"},{"param":"$title","desc":" Error title (unused). ","required":"no"},{"param":"$args","desc":" Arguments to control behavior. ","required":"no"}]},"_autop_newline_preservation_helper":{"desc":"Newline preservation help function for wpautop","params":[{"param":"$matches","desc":"preg_replace_callback matches array","required":"yes"}]},"_c":{"desc":"Retrieve translated string with vertical bar context","params":[{"param":"$text","desc":"Text to translate","required":"yes"},{"param":"$domain","desc":" Domain to retrieve the translated text","required":"no"}]},"_canonical_charset":{"desc":"Retrieve a canonical form of the provided charset appropriate for passing to PHP functions such as htmlspecialchars() and charset html attributes.","params":[{"param":"$charset","desc":"A charset name.","required":"yes"}]},"_cleanup_header_comment":{"desc":"Strip close comment and close php tags from file headers used by WP.","params":[{"param":"$str","desc":"Header comment to clean up.","required":"yes"}]},"_cleanup_image_add_caption":{"desc":"Private preg_replace callback used in image_add_caption()","params":[]},"_clear_modified_cache_on_transition_comment_status":{"desc":"Clear the lastcommentmodified cached value when a comment status is changed.","params":[{"param":"$new_status","desc":"The new comment status.","required":"yes"},{"param":"$old_status","desc":"The old comment status.","required":"yes"}]},"_close_comments_for_old_post":{"desc":"Close comments on an old post. Hooked to comments_open and pings_open.","params":[{"param":"$open","desc":"Comments open or closed","required":"yes"},{"param":"$post_id","desc":"Post ID","required":"yes"}]},"_close_comments_for_old_posts":{"desc":"Close comments on old posts on the fly, without any extra DB queries. Hooked to the_posts.","params":[{"param":"$posts","desc":"Post data object.","required":"yes"},{"param":"$query","desc":"Query object.","required":"yes"}]},"_config_wp_home":{"desc":"Retrieve the WordPress home page URL.","params":[{"param":"$url","desc":"URL for the home location.","required":"no"}]},"_config_wp_siteurl":{"desc":"Retrieve the WordPress site URL.","params":[{"param":"$url","desc":"URL to set the WordPress site location.","required":"no"}]},"_convert_urlencoded_to_entities":{"desc":"Preview fix for JavaScript bug with foreign languages.","params":[{"param":"$match","desc":"Match array from preg_replace_callback.","required":"yes"}]},"_copy_image_file":{"desc":"Copy an existing image file.","params":[{"param":"$attachment_id","desc":"Attachment ID.","required":"yes"}]},"_count_posts_cache_key":{"desc":"Return the cache key for wp_count_posts() based on the passed arguments.","params":[{"param":"$type","desc":" Post type to retrieve count ","required":"no"},{"param":"$perm","desc":" readable or empty. ","required":"no"}]},"_crop_image_resource":{"desc":"","params":[{"param":"$img","desc":"","required":"yes"},{"param":"$x","desc":"","required":"yes"},{"param":"$y","desc":"","required":"yes"},{"param":"$w","desc":"","required":"yes"},{"param":"$h","desc":"","required":"yes"}]},"_custom_background_cb":{"desc":"Default custom background callback.","params":[]},"_custom_header_background_just_in_time":{"desc":"Registers the internal custom header and background routines.","params":[]},"_custom_logo_header_styles":{"desc":"Adds CSS to hide header text for custom logo, based on Customizer setting.","params":[]},"_deep_replace":{"desc":"Perform a deep string replace operation to ensure the values in $search are no longer present","params":[{"param":"$search","desc":"The value being searched for, otherwise known as the needle. An array may be used to designate multiple needles.","required":"yes"},{"param":"$subject","desc":"The string being searched and replaced on, otherwise known as the haystack.","required":"yes"}]},"_default_wp_die_handler":{"desc":"Kills WordPress execution and display HTML message with error message.","params":[{"param":"$message","desc":"Error message or WP_Error object.","required":"yes"},{"param":"$title","desc":" Error title. ","required":"no"},{"param":"$args","desc":" Arguments to control behavior. ","required":"no"}]},"_delete_attachment_theme_mod":{"desc":"Checks an attachment being deleted to see if it’s a header or background image.","params":[{"param":"$id","desc":"The attachment id.","required":"yes"}]},"_delete_option_fresh_site":{"desc":"Delete the fresh site option.","params":[]},"_deprecated_argument":{"desc":"Mark a function argument as deprecated and inform when it has been used.","params":[{"param":"$function","desc":"The function that was called.","required":"yes"},{"param":"$version","desc":"The version of WordPress that deprecated the argument used.","required":"yes"},{"param":"$message","desc":" A message regarding the change. ","required":"no"}]},"_deprecated_constructor":{"desc":"Marks a constructor as deprecated and informs when it has been used.","params":[{"param":"$class","desc":"The class containing the deprecated constructor.","required":"yes"},{"param":"$version","desc":"The version of WordPress that deprecated the function.","required":"yes"},{"param":"$parent_class","desc":" The parent class calling the deprecated constructor. ","required":"no"}]},"_deprecated_file":{"desc":"Mark a file as deprecated and inform when it has been used.","params":[{"param":"$file","desc":"The file that was included.","required":"yes"},{"param":"$version","desc":"The version of WordPress that deprecated the file.","required":"yes"},{"param":"$replacement","desc":" The file that should have been included based on ABSPATH. ","required":"no"},{"param":"$message","desc":" A message regarding the change. ","required":"no"}]},"_deprecated_function":{"desc":"Mark a function as deprecated and inform when it has been used.","params":[{"param":"$function","desc":"The function that was called.","required":"yes"},{"param":"$version","desc":"The version of WordPress that deprecated the function.","required":"yes"},{"param":"$replacement","desc":" The function that should have been called. ","required":"no"}]},"_deprecated_hook":{"desc":"Marks a deprecated action or filter hook as deprecated and throws a notice.","params":[{"param":"$hook","desc":"The hook that was used.","required":"yes"},{"param":"$version","desc":"The version of WordPress that deprecated the hook.","required":"yes"},{"param":"$replacement","desc":" The hook that should have been used.","required":"no"},{"param":"$message","desc":" A message regarding the change.","required":"no"}]},"_device_can_upload":{"desc":"Test if the current device has the capability to upload files.","params":[]},"_doing_it_wrong":{"desc":"Mark something as being incorrectly called.","params":[{"param":"$function","desc":"The function that was called.","required":"yes"},{"param":"$message","desc":"A message explaining what has been done incorrectly.","required":"yes"},{"param":"$version","desc":"The version of WordPress where the message was added.","required":"yes"}]},"_draft_or_post_title":{"desc":"Get the post title.","params":[{"param":"$post","desc":" Post ID or WP_Post object. Default is global $post.","required":"no"}]},"_e":{"desc":"Display translated text.","params":[{"param":"$text","desc":"Text to translate.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"_ex":{"desc":"Display translated string with gettext context.","params":[{"param":"$text","desc":"Text to translate.","required":"yes"},{"param":"$context","desc":"Context information for the translators.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"_fetch_remote_file":{"desc":"Retrieve URL headers and content using WP HTTP Request API.","params":[{"param":"$url","desc":"URL to retrieve","required":"yes"},{"param":"$headers","desc":" Headers to send to the URL.","required":"no"}]},"_filter_query_attachment_filenames":{"desc":"Filter the SQL clauses of an attachment query to include filenames.","params":[{"param":"$clauses","desc":"An array including WHERE, GROUP BY, JOIN, ORDER BY, DISTINCT, fields (SELECT), and LIMITS clauses.","required":"yes"}]},"_fix_attachment_links":{"desc":"Replace hrefs of attachment anchors with up-to-date permalinks.","params":[{"param":"$post","desc":"Post ID or post object.","required":"yes"}]},"_flip_image_resource":{"desc":"","params":[{"param":"$img","desc":"","required":"yes"},{"param":"$horz","desc":"","required":"yes"},{"param":"$vert","desc":"","required":"yes"}]},"_future_post_hook":{"desc":"Hook used to schedule publication for a post marked for the future.","params":[{"param":"$deprecated","desc":"Not used. Can be set to null. Never implemented. Not marked as deprecated with _deprecated_argument() as it conflicts with wp_transition_post_status() and the default filter for _future_post_hook().","required":"yes"},{"param":"$post","desc":"Post object.","required":"yes"}]},"_get_additional_user_keys":{"desc":"Returns a list of meta keys to be (maybe) populated in wp_update_user().","params":[{"param":"$user","desc":"WP_User instance.","required":"yes"}]},"_get_admin_bar_pref":{"desc":"Retrieve the admin bar display preference of a user.","params":[{"param":"$context","desc":"Context of this preference check. Defaults to front. The admin  preference is no longer used.","required":"no"},{"param":"$user","desc":" ID of the user to check, defaults to 0 for current user.","required":"no"}]},"_get_component_from_parsed_url_array":{"desc":"Retrieve a specific component from a parsed URL array.","params":[{"param":"$url_parts","desc":"The parsed URL. Can be false if the URL failed to parse.","required":"yes"},{"param":"$component","desc":"The specific component to retrieve. Use one of the PHP predefined constants to specify which one. Defaults to -1 (= return all parts as an array). @see <a href=http://php.net/manual/en/function.parse-url.php>http://php.net/manual/en/function.parse-url.php</a>","required":"no"}]},"_get_cron_array":{"desc":"Retrieve cron info array option.","params":[]},"_get_cron_lock":{"desc":"","params":[]},"_get_custom_object_labels":{"desc":"Build an object with custom-something object (post type, taxonomy) labels out of a custom-something object","params":[{"param":"$object","desc":"A custom-something object.","required":"yes"},{"param":"$nohier_vs_hier_defaults","desc":"Hierarchical vs non-hierarchical default labels.","required":"yes"}]},"_get_dropins":{"desc":"Returns drop-ins that WordPress uses.","params":[]},"_get_last_post_time":{"desc":"Get the timestamp of the last time any post was modified or published.","params":[{"param":"$timezone","desc":"The timezone for the timestamp. See get_lastpostdate(). for information on accepted values.","required":"yes"},{"param":"$field","desc":"Post field to check. Accepts date or modified.","required":"yes"},{"param":"$post_type","desc":" The post type to check. ","required":"no"}]},"_get_list_table":{"desc":"Fetch an instance of a WP_List_Table class.","params":[{"param":"$class","desc":"The type of the list table, which is the class name.","required":"yes"},{"param":"$args","desc":" Arguments to pass to the class. Accepts screen.","required":"no"}]},"_get_meta_table":{"desc":"Retrieve the name of the metadata table for the specified object type.","params":[{"param":"$type","desc":"Type of object to get metadata table for (e.g., comment, post, or user)","required":"yes"}]},"_get_non_cached_ids":{"desc":"Retrieve ids that are not already present in the cache.","params":[{"param":"$object_ids","desc":"ID list.","required":"yes"},{"param":"$cache_key","desc":"The cache bucket to check against.","required":"yes"}]},"_get_page_link":{"desc":"Retrieves the page permalink.","params":[{"param":"$post","desc":" Post ID or object. Default uses the global $post.","required":"no"},{"param":"$leavename","desc":" Whether to keep the page name. ","required":"no"},{"param":"$sample","desc":" Whether it should be treated as a sample permalink. ","required":"no"}]},"_get_path_to_translation":{"desc":"Gets the path to a translation file for loading a textdomain just in time.","params":[{"param":"$domain","desc":"Text domain. Unique identifier for retrieving translated strings.","required":"yes"},{"param":"$reset","desc":"Whether to reset the internal cache. Used by the switch to locale functionality.","required":"no"}]},"_get_path_to_translation_from_lang_dir":{"desc":"Gets the path to a translation file in the languages directory for the current locale.","params":[{"param":"$domain","desc":"Text domain. Unique identifier for retrieving translated strings.","required":"yes"}]},"_get_plugin_data_markup_translate":{"desc":"Sanitizes plugin data, optionally adds markup, optionally translates.","params":[]},"_get_post_ancestors":{"desc":"Retrieve post ancestors.","params":[]},"_get_random_header_data":{"desc":"Get random header image data from registered images in theme.","params":[]},"_get_template_edit_filename":{"desc":"Tidies a filename for url display by the theme editor.","params":[{"param":"$fullpath","desc":"Full path to the theme file","required":"yes"},{"param":"$containingfolder","desc":"Path of the theme parent folder","required":"yes"}]},"_get_term_children":{"desc":"Get the subset of $terms that are descendants of $term_id.","params":[{"param":"$term_id","desc":"The ancestor term: all returned terms should be descendants of $term_id.","required":"yes"},{"param":"$terms","desc":"The set of terms - either an array of term objects or term IDs - from which those that are descendants of $term_id will be chosen.","required":"yes"},{"param":"$taxonomy","desc":"The taxonomy which determines the hierarchy of the terms.","required":"yes"},{"param":"$ancestors","desc":" Term ancestors that have already been identified. Passed by reference, to keep track of found terms when recursing the hierarchy. The array of located ancestors is used to prevent infinite recursion loops. For performance, term_ids are used as array keys, with 1 as value. ","required":"no"}]},"_get_term_hierarchy":{"desc":"Retrieves children of taxonomy as Term IDs.","params":[{"param":"$taxonomy","desc":"Taxonomy Name","required":"yes"}]},"_get_widget_id_base":{"desc":"Private","params":[{"param":"$id","desc":"Widget ID.","required":"yes"}]},"_hash_hmac":{"desc":"","params":[]},"_http_build_query":{"desc":"From php.net (modified by Mark Jaquith to behave like the native PHP5 function).","params":[{"param":"$data","desc":"An array or object of data. Converted to array.","required":"yes"},{"param":"$prefix","desc":" Numeric index. If set, start parameter numbering with it. ","required":"no"},{"param":"$sep","desc":" Argument separator; defaults to arg_separator.output. ","required":"no"},{"param":"$key","desc":" Used to prefix key name. ","required":"no"},{"param":"$urlencode","desc":" Whether to use urlencode() in the result. ","required":"no"}]},"_image_get_preview_ratio":{"desc":"","params":[]},"_insert_into_post_button":{"desc":"This was once used to display an ‘Insert into Post’ button.","params":[]},"_ipad_meta":{"desc":"","params":[]},"_is_valid_nav_menu_item":{"desc":"Return if a menu item is valid.","params":[{"param":"$item","desc":"The menu item to check.","required":"yes"}]},"_json_decode_object_helper":{"desc":"","params":[{"param":"$data","desc":"","required":"yes"}]},"_links_add_base":{"desc":"Callback to add a base url to relative links in passed content.","params":[{"param":"$m","desc":"The matched link.","required":"yes"}]},"_links_add_target":{"desc":"Callback to add a target attribute to all links in passed content.","params":[{"param":"$m","desc":"The matched link.","required":"yes"}]},"_list_meta_row":{"desc":"Outputs a single row of public meta data in the Custom Fields meta box.","params":[{"param":"$entry","desc":"","required":"yes"},{"param":"$count","desc":"","required":"yes"}]},"_load_image_to_edit_path":{"desc":"Retrieve the path or url of an attachment’s attached file.","params":[{"param":"$attachment_id","desc":"Attachment ID.","required":"yes"},{"param":"$size","desc":" Image size, defaults to full.","required":"no"}]},"_load_textdomain_just_in_time":{"desc":"Loads plugin and theme textdomains just-in-time.","params":[{"param":"$domain","desc":"Text domain. Unique identifier for retrieving translated strings.","required":"yes"}]},"_local_storage_notice":{"desc":"Output the HTML for restoring the post data from DOM storage","params":[]},"_make_cat_compat":{"desc":"Update category structure to old pre 2.3 from new taxonomy structure.","params":[{"param":"$category","desc":"Category Row object or array","required":"yes"}]},"_make_email_clickable_cb":{"desc":"Callback to convert email address match to HTML A element.","params":[{"param":"$matches","desc":"Single Regex Match.","required":"yes"}]},"_make_url_clickable_cb":{"desc":"Callback to convert URI match to HTML A element.","params":[{"param":"$matches","desc":"Single Regex Match.","required":"yes"}]},"_make_web_ftp_clickable_cb":{"desc":"Callback to convert URL match to HTML A element.","params":[{"param":"$matches","desc":"Single Regex Match.","required":"yes"}]},"_maybe_update_core":{"desc":"","params":[]},"_maybe_update_plugins":{"desc":"Check the last time plugins were run before checking plugin versions.","params":[]},"_maybe_update_themes":{"desc":"Check themes versions only after a duration of time.","params":[]},"_mb_strlen":{"desc":"","params":[]},"_mb_substr":{"desc":"","params":[]},"_mce_set_direction":{"desc":"Set the localized direction for MCE plugin.","params":[{"param":"$mce_init","desc":"MCE settings array.","required":"yes"}]},"_media_button":{"desc":"This was once used to display a media button.","params":[]},"_media_states":{"desc":"","params":[{"param":"$post","desc":"","required":"yes"}]},"_n":{"desc":"Translates and retrieves the singular or plural form based on the supplied number.","params":[{"param":"$single","desc":"The text to be used if the number is singular.","required":"yes"},{"param":"$plural","desc":"The text to be used if the number is plural.","required":"yes"},{"param":"$number","desc":"The number to compare against to use either the singular or plural form.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"_navigation_markup":{"desc":"Wraps passed links in navigational markup.","params":[{"param":"$links","desc":"Navigational links.","required":"yes"},{"param":"$class","desc":" Custom class for nav element. Default: posts-navigation.","required":"no"},{"param":"$screen_reader_text","desc":" Screen reader text for nav element. Default: Posts navigation.","required":"no"}]},"_nav_menu_item_id_use_once":{"desc":"Prevents a menu item ID from being used more than once.","params":[{"param":"$id","desc":"","required":"yes"},{"param":"$item","desc":"","required":"yes"}]},"_nc":{"desc":"A version of _n(), which supports contexts.","params":[{"param":"$single","desc":"The text to be used if the number is singular.","required":"yes"},{"param":"$plural","desc":"The text to be used if the number is plural.","required":"yes"},{"param":"$number","desc":"The number to compare against to use either the singular or plural form.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"_nx":{"desc":"Translates and retrieves the singular or plural form based on the supplied number, with gettext context.","params":[{"param":"$single","desc":"The text to be used if the number is singular.","required":"yes"},{"param":"$plural","desc":"The text to be used if the number is plural.","required":"yes"},{"param":"$number","desc":"The number to compare against to use either the singular or plural form.","required":"yes"},{"param":"$context","desc":"Context information for the translators.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"_nx_noop":{"desc":"Registers plural strings with gettext context in POT file, but does not translate them.","params":[{"param":"$singular","desc":"Singular form to be localized.","required":"yes"},{"param":"$plural","desc":"Plural form to be localized.","required":"yes"},{"param":"$context","desc":"Context information for the translators.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"_n_noop":{"desc":"Registers plural strings in POT file, but don’t translate them.","params":[{"param":"$singular","desc":"Singular form to be localized.","required":"yes"},{"param":"$plural","desc":"Plural form to be localized.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"_oembed_create_xml":{"desc":"Creates an XML string from a given array.","params":[{"param":"$data","desc":"The original oEmbed response data.","required":"yes"},{"param":"$node","desc":" XML node to append the result to recursively.","required":"no"}]},"_oembed_filter_feed_content":{"desc":"Prepare the oembed HTML to be displayed in an RSS feed.","params":[{"param":"$content","desc":"The content to filter.","required":"yes"}]},"_oembed_rest_pre_serve_request":{"desc":"Hooks into the REST API output to print XML instead of JSON.","params":[{"param":"$served","desc":"Whether the request has already been served.","required":"yes"},{"param":"$result","desc":"Result to send to the client. Usually a WP_REST_Response.","required":"yes"},{"param":"$request","desc":"Request used to generate the response.","required":"yes"},{"param":"$server","desc":"Server instance.","required":"yes"}]},"_pad_term_counts":{"desc":"Add count of children to parent count.","params":[{"param":"$terms","desc":"List of term objects, passed by reference.","required":"yes"},{"param":"$taxonomy","desc":"Term context.","required":"yes"}]},"_page_traverse_name":{"desc":"Traverse and return all the nested children post names of a root page.","params":[{"param":"$page_id","desc":"Page ID.","required":"yes"},{"param":"$children","desc":"Parent-children relations, passed by reference.","required":"yes"},{"param":"$result","desc":"Result, passed by reference.","required":"yes"}]},"_post_format_get_term":{"desc":"Remove the post format prefix from the name property of the term object created by get_term().","params":[{"param":"$term","desc":"","required":"yes"}]},"_post_format_get_terms":{"desc":"Remove the post format prefix from the name property of the term objects created by get_terms().","params":[{"param":"$terms","desc":"","required":"yes"},{"param":"$taxonomies","desc":"","required":"yes"},{"param":"$args","desc":"","required":"yes"}]},"_post_format_link":{"desc":"Filters the post format term link to remove the format prefix.","params":[{"param":"$link","desc":"","required":"yes"},{"param":"$term","desc":"","required":"yes"},{"param":"$taxonomy","desc":"","required":"yes"}]},"_post_format_request":{"desc":"Filters the request to allow for the format prefix.","params":[{"param":"$qvs","desc":"","required":"yes"}]},"_post_format_wp_get_object_terms":{"desc":"Remove the post format prefix from the name property of the term objects created by wp_get_object_terms().","params":[{"param":"$terms","desc":"","required":"yes"}]},"_post_states":{"desc":"","params":[{"param":"$post","desc":"","required":"yes"}]},"_post_type_meta_capabilities":{"desc":"Store or return a list of post type meta caps for map_meta_cap().","params":[{"param":"$capabilities","desc":"Post type meta capabilities.","required":"no"}]},"_preview_theme_stylesheet_filter":{"desc":"Private function to modify the current stylesheet when previewing a theme","params":[]},"_preview_theme_template_filter":{"desc":"Private function to modify the current template when previewing a theme","params":[]},"_prime_comment_caches":{"desc":"Adds any comments from the given IDs to the cache that do not already exist in cache.","params":[{"param":"$comment_ids","desc":"Array of comment IDs.","required":"yes"},{"param":"$update_meta_cache","desc":" Whether to update the meta cache. ","required":"no"}]},"_prime_network_caches":{"desc":"Adds any networks from the given IDs to the cache that do not already exist in cache.","params":[{"param":"$network_ids","desc":"Array of network IDs.","required":"yes"}]},"_prime_post_caches":{"desc":"Adds any posts from the given ids to the cache that do not already exist in cache","params":[{"param":"$ids","desc":"ID list.","required":"yes"},{"param":"$update_term_cache","desc":" Whether to update the term cache. ","required":"no"},{"param":"$update_meta_cache","desc":" Whether to update the meta cache. ","required":"no"}]},"_prime_site_caches":{"desc":"Adds any sites from the given ids to the cache that do not already exist in cache.","params":[{"param":"$ids","desc":"ID list.","required":"yes"}]},"_prime_term_caches":{"desc":"Adds any terms from the given IDs to the cache that do not already exist in cache.","params":[{"param":"$term_ids","desc":"Array of term IDs.","required":"yes"},{"param":"$update_meta_cache","desc":" Whether to update the meta cache. ","required":"no"}]},"_publish_post_hook":{"desc":"Hook to schedule pings and enclosures when a post is published.","params":[{"param":"$post_id","desc":"The ID in the database table of the post being published.","required":"yes"}]},"_redirect_to_about_wordpress":{"desc":"Redirect to the About WordPress page after a successful upgrade.","params":[{"param":"$new_version","desc":"","required":"yes"}]},"_register_widget_form_callback":{"desc":"","params":[{"param":"$id","desc":"Widget ID.","required":"yes"},{"param":"$name","desc":"Name attribute for the widget.","required":"yes"},{"param":"$form_callback","desc":"Form callback.","required":"yes"},{"param":"$options","desc":" Widget control options. See wp_register_widget_control(). ","required":"no"}]},"_register_widget_update_callback":{"desc":"Registers the update callback for a widget.","params":[{"param":"$id_base","desc":"The base ID of a widget created by extending WP_Widget.","required":"yes"},{"param":"$update_callback","desc":"Update callback method for the widget.","required":"yes"},{"param":"$options","desc":" Widget control options. See wp_register_widget_control(). ","required":"no"}]},"_relocate_children":{"desc":"This was once used to move child posts to a new parent.","params":[{"param":"$old_ID","desc":"","required":"yes"},{"param":"$new_ID","desc":"","required":"yes"}]},"_remove_qs_args_if_not_in_url":{"desc":"Removes arguments from a query string if they are not present in a URL DO NOT use this in plugin code.","params":[{"param":"$query_string","desc":"","required":"yes"},{"param":"$args_to_check","desc":"","required":"yes"},{"param":"$url","desc":"","required":"yes"}]},"_remove_theme_support":{"desc":"Do not use. Removes theme support internally, ignorant of the blacklist.","params":[{"param":"$feature","desc":"","required":"yes"}]},"_reset_front_page_settings_for_post":{"desc":"Reset the page_on_front, show_on_front, and page_for_post settings when a linked page is deleted or trashed.","params":[{"param":"$post_id","desc":"Post ID.","required":"yes"}]},"_response_to_rss":{"desc":"Retrieve","params":[{"param":"$resp","desc":"","required":"yes"}]},"_rotate_image_resource":{"desc":"","params":[]},"_sanitize_text_fields":{"desc":"Internal helper function to sanitize a string from user input or from the db","params":[{"param":"$str","desc":"String to sanitize.","required":"yes"},{"param":"$keep_newlines","desc":"Whether to keep newlines. Default: false.","required":"no"}]},"_save_post_hook":{"desc":"Callback formerly fired on the save_post hook. No longer needed.","params":[]},"_scalar_wp_die_handler":{"desc":"Kill WordPress execution.","params":[{"param":"$message","desc":" Response to print. ","required":"no"}]},"_search_terms_tidy":{"desc":"Formerly used internally to tidy up the search terms.","params":[{"param":"$t","desc":"Search terms to tidy, e.g. trim.","required":"yes"}]},"_set_cron_array":{"desc":"Updates the CRON option with the new CRON array.","params":[{"param":"$cron","desc":"Cron info array from _get_cron_array().","required":"yes"}]},"_set_preview":{"desc":"Sets up the post object for preview based on the post autosave.","params":[{"param":"$post","desc":"","required":"yes"}]},"_show_post_preview":{"desc":"Filters the latest content for preview from the post autosave.","params":[]},"_sort_name_callback":{"desc":"Callback to sort array by a ‘name’ key.","params":[]},"_sort_nav_menu_items":{"desc":"Sort menu items by the desired key.","params":[{"param":"$a","desc":"The first object to compare","required":"yes"},{"param":"$b","desc":"The second object to compare","required":"yes"}]},"_sort_uname_callback":{"desc":"Callback to sort array by a ‘Name’ key.","params":[]},"_split_str_by_whitespace":{"desc":"Breaks a string into chunks by splitting at whitespace characters.","params":[{"param":"$string","desc":"The string to split.","required":"yes"},{"param":"$goal","desc":"The desired chunk length.","required":"yes"}]},"_thickbox_path_admin_subfolder":{"desc":"Thickbox image paths for Network Admin.","params":[]},"_transition_post_status":{"desc":"Hook for managing future post transitions to published.","params":[{"param":"$new_status","desc":"New post status.","required":"yes"},{"param":"$old_status","desc":"Previous post status.","required":"yes"},{"param":"$post","desc":"Post object.","required":"yes"}]},"_truncate_post_slug":{"desc":"Truncate a post slug.","params":[{"param":"$slug","desc":"The slug to truncate.","required":"yes"},{"param":"$length","desc":" Max length of the slug. Default 200 (characters).","required":"no"}]},"_unzip_file_pclzip":{"desc":"This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the PclZip library.","params":[{"param":"$file","desc":"Full path and filename of zip archive","required":"yes"},{"param":"$to","desc":"Full path on the filesystem to extract archive to","required":"yes"},{"param":"$needed_dirs","desc":"A partial list of required folders needed to be created.","required":"no"}]},"_unzip_file_ziparchive":{"desc":"This function should not be called directly, use unzip_file instead. Attempts to unzip an archive using the ZipArchive class.","params":[{"param":"$file","desc":"Full path and filename of zip archive","required":"yes"},{"param":"$to","desc":"Full path on the filesystem to extract archive to","required":"yes"},{"param":"$needed_dirs","desc":"A partial list of required folders needed to be created.","required":"no"}]},"_update_blog_date_on_post_delete":{"desc":"Handler for updating the blog date when a published post is deleted.","params":[{"param":"$post_id","desc":"Post ID","required":"yes"}]},"_update_blog_date_on_post_publish":{"desc":"Handler for updating the blog date when a post is published or an already published post is changed.","params":[{"param":"$new_status","desc":"The new post status","required":"yes"},{"param":"$old_status","desc":"The old post status","required":"yes"},{"param":"$post","desc":"Post object","required":"yes"}]},"_update_generic_term_count":{"desc":"Will update term count based on number of objects.","params":[{"param":"$terms","desc":"List of term taxonomy IDs.","required":"yes"},{"param":"$taxonomy","desc":"Current taxonomy object of terms.","required":"yes"}]},"_update_posts_count_on_delete":{"desc":"Handler for updating the blog posts count date when a post is deleted.","params":[{"param":"$post_id","desc":"Post ID.","required":"yes"}]},"_update_posts_count_on_transition_post_status":{"desc":"Handler for updating the blog posts count date when a post status changes.","params":[{"param":"$new_status","desc":"The status the post is changing to.","required":"yes"},{"param":"$old_status","desc":"The status the post is changing from.","required":"yes"}]},"_update_post_term_count":{"desc":"Will update term count based on object types of the current taxonomy.","params":[{"param":"$terms","desc":"List of Term taxonomy IDs.","required":"yes"},{"param":"$taxonomy","desc":"Current taxonomy object of terms.","required":"yes"}]},"_update_term_count_on_transition_post_status":{"desc":"Update the custom taxonomies’ term counts when a post’s status is changed.","params":[{"param":"$new_status","desc":"New post status.","required":"yes"},{"param":"$old_status","desc":"Old post status.","required":"yes"},{"param":"$post","desc":"Post object.","required":"yes"}]},"_upgrade_422_remove_genericons":{"desc":"Cleans up Genericons example files.","params":[]},"_upgrade_cron_array":{"desc":"Upgrade a Cron info array.","params":[{"param":"$cron","desc":"Cron info array from _get_cron_array().","required":"yes"}]},"_usort_by_first_member":{"desc":"Sorts a multidimensional array by first member of each top level member","params":[{"param":"$a","desc":"","required":"yes"},{"param":"$b","desc":"","required":"yes"}]},"_usort_terms_by_ID":{"desc":"Sort categories by ID.","params":[{"param":"$a","desc":"","required":"yes"},{"param":"$b","desc":"","required":"yes"}]},"_usort_terms_by_name":{"desc":"Sort categories by name.","params":[{"param":"$a","desc":"","required":"yes"},{"param":"$b","desc":"","required":"yes"}]},"_walk_bookmarks":{"desc":"The formatted output of a list of bookmarks.","params":[{"param":"$bookmarks","desc":"List of bookmarks to traverse.","required":"yes"},{"param":"$args","desc":"Bookmarks arguments. show_updated(int|bool) Whether to show the time the bookmark was last updated. Accepts 1|true or 0|false. Default 0|false. show_description(int|bool) Whether to show the bookmakr description. Accepts 1|true, Accepts 1|true or 0|false. Default 0|false. show_images(int|bool) Whether to show the link image if available. Accepts 1|true or 0|false. Default 1|true. show_name(int|bool) Whether to show link name if available. Accepts 1|true or 0|false. Default 0|false. before(string) The HTML or text to prepend to each bookmark. Default <li>. after(string) The HTML or text to append to each bookmark. Default </li>. link_before(string) The HTML or text to prepend to each bookmark inside the anchor tags.  link_after(string) The HTML or text to append to each bookmark inside the anchor tags.  between(string) The string for use in between the link, description, and image. Default n. show_rating(int|bool) Whether to show the link rating. Accepts 1|true or 0|false. Default 0|false.  ","required":"no"}]},"_wptexturize_pushpop_element":{"desc":"Search for disabled element tags. Push element to stack on tag open and pop on tag close.","params":[{"param":"$text","desc":"Text to check. Must be a tag like <html> or [shortcode].","required":"yes"},{"param":"$stack","desc":"List of open tag elements.","required":"yes"},{"param":"$disabled_elements","desc":"The tag names to match against. Spaces are not allowed in tag names.","required":"yes"}]},"_wp_add_global_attributes":{"desc":"Helper function to add global attributes to a tag in the allowed html list.","params":[{"param":"$value","desc":"An array of attributes.","required":"yes"}]},"_wp_admin_bar_init":{"desc":"Instantiate the admin bar object and set it up as a global for access elsewhere.","params":[]},"_wp_admin_html_begin":{"desc":"","params":[]},"_wp_ajax_add_hierarchical_term":{"desc":"Ajax handler for adding a hierarchical term.","params":[]},"_wp_ajax_delete_comment_response":{"desc":"Sends back current comment total and new page links if they need to be updated.","params":[{"param":"$comment_id","desc":"","required":"yes"},{"param":"$delta","desc":"","required":"no"}]},"_wp_ajax_menu_quick_search":{"desc":"Prints the appropriate response to a menu quick search.","params":[{"param":"$request","desc":"The unsanitized request values.","required":"no"}]},"_wp_auto_add_pages_to_menu":{"desc":"Automatically add newly published page objects to menus with that as an option.","params":[{"param":"$new_status","desc":"The new status of the post object.","required":"yes"},{"param":"$old_status","desc":"The old status of the post object.","required":"yes"},{"param":"$post","desc":"The post object being transitioned from one status to another.","required":"yes"}]},"_wp_batch_split_terms":{"desc":"Splits a batch of shared taxonomy terms.","params":[]},"_wp_call_all_hook":{"desc":"Call the ‘all’ hook, which will process the functions hooked into it.","params":[{"param":"$args","desc":"The collected parameters from the hook that was called.","required":"yes"}]},"_wp_credits_add_profile_link":{"desc":"Retrieve the link to a contributor’s WordPress.org profile page.","params":[{"param":"$display_name","desc":"The contributors display name, passed by reference.","required":"yes"},{"param":"$username","desc":"The contributors username.","required":"yes"},{"param":"$profiles","desc":"URL to the contributors WordPress.org profile page.","required":"yes"}]},"_wp_credits_build_object_link":{"desc":"Retrieve the link to an external library used in WordPress.","params":[{"param":"$data","desc":"External library data, passed by reference.","required":"yes"}]},"_wp_customize_changeset_filter_insert_post_data":{"desc":"Filters changeset post data upon insert to ensure post_name is intact.","params":[{"param":"$post_data","desc":"An array of slashed post data.","required":"yes"},{"param":"$supplied_post_data","desc":"An array of sanitized, but otherwise unmodified post data.","required":"yes"}]},"_wp_customize_include":{"desc":"Includes and instantiates the WP_Customize_Manager class.","params":[]},"_wp_customize_loader_settings":{"desc":"Adds settings for the customize-loader script.","params":[]},"_wp_customize_publish_changeset":{"desc":"Publish a snapshot’s changes.","params":[{"param":"$new_status","desc":"New post status.","required":"yes"},{"param":"$old_status","desc":"Old post status.","required":"yes"},{"param":"$changeset_post","desc":"Changeset post object.","required":"yes"}]},"_wp_dashboard_control_callback":{"desc":"Outputs controls for the current dashboard widget.","params":[{"param":"$dashboard","desc":"","required":"yes"},{"param":"$meta_box","desc":"","required":"yes"}]},"_wp_dashboard_recent_comments_row":{"desc":"Outputs a row for the Recent Comments widget.","params":[{"param":"$comment","desc":"The current comment.","required":"yes"},{"param":"$show_date","desc":" Whether to display the date.","required":"no"}]},"_wp_delete_orphaned_draft_menu_items":{"desc":"Deletes orphaned draft menu items","params":[]},"_wp_delete_post_menu_item":{"desc":"Callback for handling a menu item when its original object is deleted.","params":[{"param":"$object_id","desc":"The ID of the original object being trashed.","required":"yes"}]},"_wp_delete_tax_menu_item":{"desc":"Serves as a callback for handling a menu item when its original object is deleted.","params":[{"param":"$object_id","desc":" The ID of the original object being trashed. Default 0.","required":"no"},{"param":"$tt_id","desc":"Term taxonomy ID. Unused.","required":"no"},{"param":"$taxonomy","desc":"Taxonomy slug.","required":"no"}]},"_wp_filter_build_unique_id":{"desc":"Build Unique ID for storage and retrieval.","params":[{"param":"$tag","desc":"Used in counting how many hooks were applied","required":"yes"},{"param":"$function","desc":"Used for creating unique id","required":"yes"},{"param":"$priority","desc":"Used in counting how many hooks were applied. If === false and $function is an object reference, we return the unique id only if it already has one, false otherwise.","required":"yes"}]},"_wp_filter_taxonomy_base":{"desc":"Filters the URL base for taxonomies.","params":[{"param":"$base","desc":"The taxonomy base that were going to filter","required":"yes"}]},"_wp_footer_scripts":{"desc":"Private, for use in *_footer_scripts hooks","params":[]},"_wp_get_attachment_relative_path":{"desc":"Get the attachment path relative to the upload directory.","params":[{"param":"$file","desc":"Attachment file name.","required":"yes"}]},"_wp_get_current_user":{"desc":"Retrieves the current user object.","params":[]},"_wp_get_image_size_from_meta":{"desc":"Get the image size as array from its meta data.","params":[{"param":"$size_name","desc":"Image size. Accepts any valid image size name (thumbnail, medium, etc.).","required":"yes"},{"param":"$image_meta","desc":"The image meta data.","required":"yes"}]},"_wp_get_post_revision_version":{"desc":"Gets the post revision version.","params":[{"param":"$revision","desc":"","required":"yes"}]},"_wp_get_user_contactmethods":{"desc":"The old private function for setting up user contact methods.","params":[{"param":"$user","desc":" WP_User object. ","required":"no"}]},"_wp_handle_upload":{"desc":"Handle PHP uploads in WordPress, sanitizing file names, checking extensions for mime type, and moving the file to the appropriate directory within the uploads directory.","params":[{"param":"$file","desc":"Reference to a single element of $_FILES. Call the function once for each uploaded file.","required":"yes"},{"param":"$overrides","desc":"An associative array of names => values to override default variables. Default false.","required":"yes"},{"param":"$time","desc":"Time formatted in yyyy/mm.","required":"yes"},{"param":"$action","desc":"Expected value for $_POST[action].","required":"yes"}]},"_wp_http_get_object":{"desc":"Returns the initialized WP_Http Object","params":[]},"_wp_image_editor_choose":{"desc":"Tests which editors are capable of supporting the request.","params":[{"param":"$args","desc":"Additional data. Accepts { mime_type=>string, methods=>{string, string, ...} }","required":"no"}]},"_wp_iso_convert":{"desc":"Helper function to convert hex encoded chars to ASCII","params":[{"param":"$match","desc":"The preg_replace_callback matches array","required":"yes"}]},"_wp_kses_decode_entities_chr":{"desc":"Regex callback for wp_kses_decode_entities()","params":[{"param":"$match","desc":"preg match","required":"yes"}]},"_wp_kses_decode_entities_chr_hexdec":{"desc":"Regex callback for wp_kses_decode_entities()","params":[{"param":"$match","desc":"preg match","required":"yes"}]},"_wp_kses_split_callback":{"desc":"Callback for wp_kses_split.","params":[]},"_wp_link_page":{"desc":"Helper function for wp_link_pages().","params":[{"param":"$i","desc":"Page number.","required":"yes"}]},"_wp_menu_item_classes_by_context":{"desc":"Add the class property classes for the current context, if applicable.","params":[{"param":"$menu_items","desc":"The current menu item objects to which to add the class property information.","required":"yes"}]},"_wp_menu_output":{"desc":"Display menu.","params":[{"param":"$menu","desc":"","required":"yes"},{"param":"$submenu","desc":"","required":"yes"},{"param":"$submenu_as_parent","desc":"","required":"no"}]},"_wp_nav_menu_meta_box_object":{"desc":"Adds custom arguments to some of the meta box object types.","params":[{"param":"$object","desc":"The post type or taxonomy meta-object.","required":"no"}]},"_wp_object_count_sort_cb":{"desc":"Serves as a callback for comparing objects based on count.","params":[{"param":"$a","desc":"The first object to compare.","required":"yes"},{"param":"$b","desc":"The second object to compare.","required":"yes"}]},"_wp_object_name_sort_cb":{"desc":"Serves as a callback for comparing objects based on name.","params":[{"param":"$a","desc":"The first object to compare.","required":"yes"},{"param":"$b","desc":"The second object to compare.","required":"yes"}]},"_wp_oembed_get_object":{"desc":"Returns the initialized {@link WP_oEmbed} object","params":[]},"_wp_post_revision_data":{"desc":"Returns a post array ready to be inserted into the posts table as a post revision.","params":[{"param":"$post","desc":" A post array or a WP_Post object to be processed for insertion as a post revision. ","required":"no"},{"param":"$autosave","desc":" Is the revision an autosave? ","required":"no"}]},"_wp_post_revision_fields":{"desc":"Determines which fields of posts are to be saved in revisions.","params":[{"param":"$post","desc":" A post array or a WP_Post object being processed for insertion as a post revision. ","required":"no"},{"param":"$deprecated","desc":"Not used.","required":"no"}]},"_wp_post_thumbnail_class_filter":{"desc":"Adds a ‘wp-post-image’ class to post thumbnails Uses the begin_fetch_post_thumbnail_html and end_fetch_post_thumbnail_html action hooks to dynamically add/remove itself so as to only filter post thumbnails","params":[{"param":"$attr","desc":"Attributes including src, class, alt, title","required":"yes"}]},"_wp_post_thumbnail_class_filter_add":{"desc":"Adds _wp_post_thumbnail_class_filter to the wp_get_attachment_image_attributes filter","params":[]},"_wp_post_thumbnail_class_filter_remove":{"desc":"Removes _wp_post_thumbnail_class_filter from the wp_get_attachment_image_attributes filter","params":[]},"_wp_post_thumbnail_html":{"desc":"Output HTML for the post thumbnail meta-box.","params":[{"param":"$thumbnail_id","desc":"ID of the attachment used for thumbnail","required":"no"},{"param":"$post","desc":"The post ID or object associated with the thumbnail, defaults to global $post.","required":"no"}]},"_wp_preview_post_thumbnail_filter":{"desc":"Filters post thumbnail lookup to set the post thumbnail.","params":[{"param":"$value","desc":"The value to return - a single metadata value, or an array of values.","required":"yes"},{"param":"$post_id","desc":"Post ID.","required":"yes"},{"param":"$meta_key","desc":"Meta key.","required":"yes"}]},"_wp_preview_terms_filter":{"desc":"Filters terms lookup to set the post format.","params":[{"param":"$terms","desc":"","required":"yes"},{"param":"$post_id","desc":"","required":"yes"},{"param":"$taxonomy","desc":"","required":"yes"}]},"_wp_put_post_revision":{"desc":"Inserts post data into the posts table as a post revision.","params":[{"param":"$post","desc":"Post ID, post object OR post array.","required":"no"},{"param":"$autosave","desc":" Is the revision an autosave?","required":"no"}]},"_wp_register_meta_args_whitelist":{"desc":"Filter out `register_meta()` args based on a whitelist.","params":[{"param":"$args","desc":"Arguments from register_meta().","required":"yes"},{"param":"$default_args","desc":"Default arguments for register_meta().","required":"yes"}]},"_wp_relative_upload_path":{"desc":"Return relative path to an uploaded file.","params":[{"param":"$path","desc":"Full path to the file.","required":"yes"}]},"_wp_sidebars_changed":{"desc":"Handle sidebars config after theme change","params":[]},"_wp_specialchars":{"desc":"Converts a number of special characters into their HTML entities.","params":[{"param":"$string","desc":"The text which is to be encoded.","required":"yes"},{"param":"$quote_style","desc":" Converts double quotes if set to ENT_COMPAT, both single and double if set to ENT_QUOTES or none if set to ENT_NOQUOTES. Also compatible with old values; converting single quotes if set to single, double if set to double or both if otherwise set. Default is ENT_NOQUOTES.","required":"no"},{"param":"$charset","desc":" The character encoding of the string. Default is false.","required":"no"},{"param":"$double_encode","desc":" Whether to encode existing html entities. Default is false.","required":"no"}]},"_wp_timezone_choice_usort_callback":{"desc":"Sort-helper for timezones.","params":[{"param":"$a","desc":"","required":"yes"},{"param":"$b","desc":"","required":"yes"}]},"_wp_translate_php_url_constant_to_key":{"desc":"Translate a PHP_URL_* constant to the named array keys PHP uses.","params":[{"param":"$constant","desc":"PHP*URL** constant.","required":"yes"}]},"_wp_translate_postdata":{"desc":"Rename $_POST data from form names to DB post columns.","params":[{"param":"$update","desc":"Are we updating a pre-existing post?","required":"no"},{"param":"$post_data","desc":"Array of post data. Defaults to the contents of $_POST.","required":"no"}]},"_wp_upgrade_revisions_of_post":{"desc":"Upgrade the revisions author, add the current post as a revision and set the revisions version to 1","params":[{"param":"$post","desc":"Post object","required":"yes"},{"param":"$revisions","desc":"Current revisions of the post","required":"yes"}]},"_wp_upload_dir":{"desc":"A non-filtered, non-cached version of wp_upload_dir() that doesn’t check the path.","params":[{"param":"$time","desc":" Time formatted in yyyy/mm. ","required":"no"}]},"_x":{"desc":"Retrieve translated string with gettext context.","params":[{"param":"$text","desc":"Text to translate.","required":"yes"},{"param":"$context","desc":"Context information for the translators.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"_xmlrpc_wp_die_handler":{"desc":"Kill WordPress execution and display XML message with error message.","params":[{"param":"$message","desc":"Error message.","required":"yes"},{"param":"$title","desc":" Error title. ","required":"no"},{"param":"$args","desc":" Arguments to control behavior. ","required":"no"}]},"__":{"desc":"Retrieve the translation of $text.","params":[{"param":"$text","desc":"Text to translate.","required":"yes"},{"param":"$domain","desc":" Text domain. Unique identifier for retrieving translated strings. ","required":"no"}]},"__autoload":{"desc":"Autoloader compatibility callback.","params":[{"param":"$classname","desc":"Class to attempt autoloading.","required":"yes"}]},"__checked_selected_helper":{"desc":"Private helper function for checked, selected, and disabled.","params":[{"param":"$helper","desc":"One of the values to compare","required":"yes"},{"param":"$current","desc":"(true) The other value to compare if not just true","required":"yes"},{"param":"$echo","desc":"Whether to echo or just return the string","required":"yes"},{"param":"$type","desc":"The type of checked|selected|disabled we are doing","required":"yes"}]},"__clear_multi_author_cache":{"desc":"Helper function to clear the cache for number of authors.","params":[]},"__get_option":{"desc":"Version of get_option that is private to install/upgrade.","params":[{"param":"$setting","desc":"Option name.","required":"yes"}]},"__ngettext":{"desc":"Retrieve the plural or single form based on the amount.","params":[]},"__ngettext_noop":{"desc":"Register plural strings in POT file, but don’t translate them.","params":[]},"__return_empty_array":{"desc":"Returns an empty array.","params":[]},"__return_empty_string":{"desc":"Returns an empty string.","params":[]},"__return_false":{"desc":"Returns false.","params":[]},"__return_null":{"desc":"Returns null.","params":[]},"__return_true":{"desc":"Returns true.","params":[]},"__return_zero":{"desc":"Returns 0.","params":[]}}');
Object.keys(autocomplete_wordpress).forEach(function(key){ autocomplete_wordpress[key]['type'] = "wordpress" });